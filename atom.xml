<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Even&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://neareven.github.io/"/>
  <updated>2017-12-27T02:40:30.476Z</updated>
  <id>https://neareven.github.io/</id>
  
  <author>
    <name>Even</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>亲密关系--通往灵魂的旅程</title>
    <link href="https://neareven.github.io/2017/12/26/37-book/"/>
    <id>https://neareven.github.io/2017/12/26/37-book/</id>
    <published>2017-12-26T14:37:00.000Z</published>
    <updated>2017-12-27T02:40:30.476Z</updated>
    
    <content type="html"><![CDATA[<p>已分手的女友推荐了这本书.<br>  这本书应该被归为心理学相关书籍吧.<br>  看心理学的书籍时,总想从中找到具体的可以效法的准则,但又怕书中都是这些浅显的做法而失去了其对现象的研究,看这些书,我想知道的是选择做一件事的动机,而不是按着教条去行事.<br>  小时候翻过卡耐基的书,看了亲密关系又想到了卡老的书.<br>  每个语境下都有其特殊性,本就找不到唯一的准绳,可以适用于任何情形.看卡老的书,只懊悔一点,为什么我没有遇到类似的情景,到了现在,再未看过,心底里早已把卡老的书归为了成功学.<br>  还好,读&lt;亲密关系&gt;时,我已有了一点点类似的经历.读许多书,只是为了寻找书中的那一丝共鸣罢了.</p>
<p>  两个人走到一起,彼此相吸引,爱是维系二者关系的一个纽带.但是什么促成了两个人决定携手走入婚姻的殿堂?爱,责任,相互的依赖….作者说是因为[重要性].</p>
<p>  “我发誓，在学习无条件爱你的过程中，我会带给你难以想象的痛苦，导致你对我说出连纽约的出租车司机听了都会吓到的话，而且让你后悔遇见了我。而当你对我做出相同的事时，我会用一个三岁小孩的成熟度来响应，而且用急性子和坏脾气来当做我的两大武器。我永远也不会记得，我们只是两个尽力想做到最好的普通人。我会把你当做我唯一的快乐源泉。最后我才成长并了解到亲密关系的真正目的”.<br>  我想没有人的结婚誓词会是这样吧.但这也许才是婚后生活的现状吧.初恋时,我们对爱情有一万种完美的想象,因爱而盲目痴狂,愿倾其所有来爱另一半.<br>  终于,我们的需求得到了满足,渴望被爱,终于被爱.<br>  但经历最初的绚丽绽放后,我们还是会走入争执的泥淖.<br>  “一旦找到有潜力满足我们需求的候选人，我们就着手将他们塑造成我们心中的理想伴侣”<br>  以前的我总试图着控制别人,让别人按照自己的意志行事,无论是对身边的朋友,还是家中的娃娃们.是什么让我慢慢放弃了类似的想法?每个人都是独立的个体,都有其自己的选择,旁观而不干涉,很难做到,也许你觉着只是善意的提醒，但这些都是你自己控制欲强加于人的外在表现而已.<br>  “亲密关系中的另一方最知道我们的脆弱点在哪里,所以总是直击要害,一招毙命”<br>  此刻的我可以想象,在处理婚姻中的逆境时,歇斯底里的怒吼不会出现在我身上,更多的应是冷战吧.我宁愿面对着冰冷的墙壁,也不愿多看你一眼.当初你侬我侬的二人,也会成为两个陌路人吧.<br>  以前曾想,只要你真心付出,总会有所回报.但一次两次三次后,早已不再奢望,你所有的抉择都是你自己选择的,并不因为你会怎样,便要别人也要用同样的方式来对待你.但没有后悔,至少我曾在年少的时候尝试着迈出去过,结果也许不美丽,但我是在满怀着的爱的时候做的这些事.</p>
<p>  想起了灵魂歌手,当我们被所有人遗忘时,我们的灵魂便会消失.<br>  分手了,但却放不下.<br>  “当我需要你的时候,我唯一要做的事就是做梦..”</p>
<p>##书摘:##</p>
<ul>
<li><p>克老师把亲密关系的过程分为以下几个阶段：绚丽、幻灭、内省和启示。</p>
</li>
<li><p>在幻灭期可以形同陌路或仇人。用最简单的语言来说就是，我们通常会把自己从小到大得不到的、未满足的需求，全部都投射在那个爱我们、让我们觉得特殊的人身上，觉得有了他/她，这些需求都会得到满足了。</p>
</li>
<li><p>另一本为：《找回你的生命礼物》），</p>
</li>
<li><p>但是，亲密关系的另一方最知道我们的脆弱点在哪里，所以总是直击要害，一招毙命。于是，我们在亲密关系中受到的伤害远远大于其他关系对我们的伤害。</p>
</li>
<li><p>经由亲密关系呈现出来的问题，我们有机会面对自己的无力感，并发现自己的伟大潜能。</p>
</li>
<li><p>但是婚姻并不是关于爱的。所有在婚姻中的困难，问题其实是关于重要性。</p>
</li>
<li><p>就与面对妈妈不快乐或爸爸不满意时的感受相似。当这种感觉上来的时候，我们不想去面对，我们会立刻走向防御机制。我们会把对方推开，我们会埋怨我们的伴侣让我们觉得自己是个失败者。</p>
</li>
<li><p>我的太太是没有办法让我快乐的，同时让我快乐也不是她的职责所在，她的快乐也不是来爱我。即使她爱我，我也没有把她的爱放在我这里。</p>
</li>
<li><p>亲密关系问题的真正根源往往像个无解的谜，因为在看似单纯的寻找和留住那个“特定的人”的过程背后，其实有着不为人知的目的。</p>
</li>
<li><p>当我们真正沉浸于爱中时，我们会很快乐，而快乐时就自然地想要付出。我们希望无条件地付出，因为在我们心灵深处觉得这是对的。</p>
</li>
<li><p>完美的伴侣”。为了寻求真爱，不管是一开始的浪漫吸引的绚烂，还是之后的争执及无尽的阻碍，我们都一路走来。</p>
</li>
<li><p>但那真的是爱吗？还是需求不满而又觉得自己很无能？</p>
</li>
<li><p>许多人把需求和感觉当做爱；</p>
</li>
<li><p>即使无数的丑闻让盲目崇拜的问题暴露出来，也不能改变人们崇拜偶像的倾向。当踏上情感之旅时，我们也会看到“月晕现象”。</p>
</li>
<li><p>让我们先来看看亲密关系的第一阶段，这是个让人满心温暖的阶段。不管被灼伤过多少次，我们仍然被热情的火焰所吸引。这是人类七情六欲中最强的感情，我们心甘情愿为爱盲目，被热吞噬，从童稚的少年到迟暮的老年，每个人都向往在遇到一生真爱时的那种心动感觉。</p>
</li>
<li><p>往往不是他们自己所想的那回事。开始和维持一段亲密关系背后的真正动机，其实在于需求。</p>
</li>
<li><p>身为一个无可救药的浪漫主义者，我实在不愿意相信这是真的。我想要相信的是，在这世界上有一个专门为我创造的女人，她存在的唯一目的，就是打开我的心房，让我体验真爱。只要找到了她，我们就会从此过着幸福快乐的生活。我们会手牵手走在乡间小道和草原上（小心地不踩到牛便便），即使不发一语也心有灵犀，彼此几乎不开口说话，只会偶尔交换一些充满智慧或幽默的洞见。</p>
</li>
<li><p>从此就过着幸福快乐的生活。这真是一幅完美无缺的景象，除了一件事——我身在其中，而有太多需求的我，一点都不完美。</p>
</li>
<li><p>孩童的两大主要需求是归属感和确认自己的重要性。</p>
</li>
<li><p>这个人可以无视我们所有的缺点，绝不伤害我们，即使我们有错也永远支持我们，而且永远觉得我们很了不起。这个特别的人需要我们的程度，和我们需要他/她一样多。（</p>
</li>
<li><p>因为如果没人觉得我们是不可或缺的，我们将被迫面对被全世界遗忘的难受感觉（我们还必须面对另一个残酷的事实：将不会有人满足我们的需求！）。</p>
</li>
<li><p>其实，这种美好感觉的真正原因，是因为我意识到需求[2]即将得到满足。然而在心灵深处，我却清楚地感受到欲望在啃噬着我，由于我用很强的羞耻心来作为防卫的机制，欲望才不至于暴露出来，</p>
</li>
<li><p>“当我需要你的时候，我唯一需要做的事就是做梦……” ——艾佛利兄弟</p>
</li>
<li><p>孩童时期需求没有得到满足时，我们心中所形成的看待外在世界的态度，对我们有很大的影响。</p>
</li>
<li><p>一旦找到有潜力满足我们需求的候选人，我们就着手将他们塑造成我们心中的理想伴侣。</p>
</li>
<li><p>这种修饰或彻底改造伴侣的企图，很快就会让我们走上通往地狱之路。</p>
</li>
<li><p>期望与要求可分为明说和暗示两种方式。暗示的方式应用十分广泛，主要原因有二：一、你希望伴侣满足你的需求，但又不想表现出软弱且需求不满的样子；二、你幻想你的理想情人会读心术，能够知道你的每个想法。</p>
</li>
<li><p>我希望她证明她爱我，我需要她安抚我的不安全感与无力感。</p>
</li>
<li><p>期望的目的是要让需求得到满足，</p>
</li>
<li><p>[8]她可能得随时察言观色，想办法在适当的时机满足我，还得注意质量的高低，以及时间的长短。我想这样过了一星期之后，她可能就属于精神崩溃的高危人群了。</p>
</li>
<li><p>两个人都对彼此做过度的情绪索求，会在脆弱的亲密关系的互动上，施加极大的压力。</p>
</li>
<li><p>这样的失望会让我们认为对方是故意在欺骗我们——因为他们耍诈，让我们相信他们可以给我们所要的一切。</p>
</li>
<li><p>这也就是“月晕现象”退去的时刻，你即将进入亲密关系的第二阶段，也就是我称为“幻灭”的阶段。</p>
</li>
<li><p>我愿不愿意放弃这项期望呢？”换句话说，我愿不愿意不再把满足这项需求当做伴侣的职责？我愿不愿意寻求自己内在的力量来满足我的所有需求呢？我愿不愿意让这种内在的力量成为我快乐的源泉，而不再把伴侣当成予取予求的对象？</p>
</li>
<li><p>因为不被满足的期望，迟早会变成愤恨，而让你和伴侣渐行渐远</p>
</li>
<li><p>你终究会发现，需求并不能完全得到满足，因而感到失望，甚至愤恨。如果你感到愤恨，这就代表“月晕现象”的第一阶段已经结束了，你进入了亲密关系的第二阶段——“幻灭”。</p>
</li>
<li><p>尼尔森说行为不端的孩子并不是坏孩子，而只不过是沮丧的孩子。她指出了四种主要的偏差行为： ——引起注意（看看我！看看我！） ——权力斗争（我不想做，你不能逼我！）</p>
</li>
<li><p>——报复心理（你伤害我多少，我也要伤害你多少。） ——自我放逐（努力有什么用呢？反正我一点也不重要。）</p>
</li>
<li><p>我们宁愿争吵也不愿面对伤口，是因为生气比承受心碎要简单得多。</p>
</li>
<li><p>那我的誓词将会变成：“我发誓，在学习无条件爱你的过程中，我会带给你难以想象的痛苦，导致你对我说出连纽约的出租车司机听了都会吓到的话，而且让你后悔遇见了我。而当你对我做出相同的事时，我会用一个三岁小孩的成熟度来响应，而且用急性子和坏脾气来当做我的两大武器。我永远也不会记得，我们只是两个尽力想做到最好的普通人。我会把你当做我唯一的快乐源泉。最后我才成长并了解到亲密关系的真正目的。”</p>
</li>
<li><p>约翰和玛莉都在试图控制对方的行为，借以控制过去的创伤。</p>
</li>
<li><p>我们从小就常听人说，人际关系就是“给予与获得”，但我的理论则是“给予与接受”。我不想从伴侣身上“获得”什么东西——这样我会觉得自己像个贼一样，我情愿“接受”伴侣自愿给我的东西。</p>
</li>
<li><p>外面”。没有人会满足我们的需求；没有人会让我们快乐；也没有人该为我们所受的伤负责。</p>
</li>
<li><p>但如果你把亲密关系当做学习无条件的爱的途径，</p>
</li>
<li><p>我一生中最好的时光都给你了，但是我得到了什么？什么都没有！”那就表示，这个人已经因为不断地牺牲而濒临崩溃边缘，要不然就是准备一走了之了。不幸的是，这个人所付出的，其实并不是“最好”的。</p>
</li>
<li><p>真心诚意地付出，是一种完全不同的体验。你不会觉得心力交瘁，也不会因为得不到感激而愤愤不平，当然也不是为了偿还罪恶感才付出。这样的付出是完全不求回报的。你是听从自己的心在做事，因为你知道，这样的付出对每个人都好（</p>
</li>
<li><p>只有爱能进入你的心，去改变只有给予却不懂得接受的模式（牺牲），以及只有获得却不懂得享受的模式（放纵），使得牺牲转变为真心的给予，而使放纵转为真心的接受。</p>
</li>
<li><p>就变成了大罪人似的。不要固执地认为，你应该跟目前的伴侣过一辈子。因为我相信，如果你不能自由地离开，那么即使留下来，可能也不是你自己的意愿——</p>
</li>
<li><p>如果你为了破除依附情结而逃离亲密关系，你往往会在无意间吸引到一个会再次让你感到窒息的人。有时候离开是必要的，因为你已经处在依附情结的陷阱中太久了；但是有时候，离开却只是短暂的自由。</p>
</li>
<li><p>我发明了如下的数学公式：“目标的重要性（I）”等于“我们认为自己有多需要它（N）”乘上“我们认为它有多难达成（D）”，也就是I=N×D。之后我又将它稍作修订，加上了一个因素：“这个目标达成之后，我与意中人发生肌肤之亲的机会能增加多少（S）”，成为以下的公式：I=N×D+S。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;已分手的女友推荐了这本书.&lt;br&gt;  这本书应该被归为心理学相关书籍吧.&lt;br&gt;  看心理学的书籍时,总想从中找到具体的可以效法的准则,但又怕书中都是这些浅显的做法而失去了其对现象的研究,看这些书,我想知道的是选择做一件事的动机,而不是按着教条去行事.&lt;br&gt;  小时候翻过
    
    </summary>
    
    
      <category term="拆书记" scheme="https://neareven.github.io/tags/%E6%8B%86%E4%B9%A6%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Method Swizzle</title>
    <link href="https://neareven.github.io/2017/12/03/36-methodSwizzle/"/>
    <id>https://neareven.github.io/2017/12/03/36-methodSwizzle/</id>
    <published>2017-12-03T02:01:00.000Z</published>
    <updated>2017-12-04T07:14:30.504Z</updated>
    
    <content type="html"><![CDATA[<p>###参考链接<br> <a href="http://www.jianshu.com/p/84d1771e9792" target="_blank" rel="external">蒋小飞的blog:</a><br>         <a href="http://blog.csdn.net/u010768881/article/details/56673265" target="_blank" rel="external">wang_bang的blog:</a><br>         <a href="http://nshipster.cn/method-swizzling/" target="_blank" rel="external">NSHipster:</a><br>         <a href="http://yulingtianxia.com/" target="_blank" rel="external">杨萧玉的blog:</a></p>
<p>#Method, SEL, IMP<br>在运行时,类(Class)维护了一个消息分发列表来解决消息的正确发送.每一个消息列表的入口是一个方法(Method),这个方法映射了一对键值对,其中键值是这个方法的名字selector(SEL),值是指向这个方法实现的函数指针implementation(IMP). Method swizzling修改了类的消息分发列表使得已经存在的selector映射了另一个实现implementation,同时重命名了原生方法的实现为一个新的selector.</p>
<h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_method *Method;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @param SEL: selector,方法选择器,存储方法的名称,有着相同函数名和参数名的方法有着相同的方法名</div><div class="line"> * @param IMP: implement,方法实现,指向方法实现代码块的地址</div><div class="line"> */</div><div class="line">struct objc_method&#123;</div><div class="line">	SEL method_name;</div><div class="line">	char *method_types;</div><div class="line">	IMP method_imp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="IMP-–-Implementation"><a href="#IMP-–-Implementation" class="headerlink" title="IMP – Implementation"></a>IMP – Implementation</h3><p>函数指针,函数执行入口.该函数使用标准的c进行调用.</p>
<h4 id="第一个参数指向self-代表当前类实例的地址-如果是类则指向它的元类-作为消息的接收者"><a href="#第一个参数指向self-代表当前类实例的地址-如果是类则指向它的元类-作为消息的接收者" class="headerlink" title="第一个参数指向self,代表当前类实例的地址,如果是类则指向它的元类,作为消息的接收者."></a>第一个参数指向self,代表当前类实例的地址,如果是类则指向它的元类,作为消息的接收者.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef id (*IMP)(id, SEL, ...)</div></pre></td></tr></table></figure>
<h3 id="SEL"><a href="#SEL" class="headerlink" title="SEL"></a>SEL</h3><p>SEL是objc_selector结构体的指针,但实际上在运行时被注册(映射)的C型字符串.Selector由编译器产生并且在当类被加载进内存时由runtime自动进行名字和实现的映射<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_selector *SEL;</div><div class="line">struct objc_selector&#123;</div><div class="line">	void *sel_id;</div><div class="line">	const char *sel_types;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从sel_getName()方法的源码中可以看出<code>SEL</code>与<code>const char *</code>是可以相互转化的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const char *sel_getName(SEL sel)&#123;</div><div class="line">	return sel ?(const char *)sel: &quot;&lt;null selector&gt;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 获取</div><div class="line"></div><div class="line">SEL selA = @selector(...);</div><div class="line">// 创建</div><div class="line">SEL selB = sel_registerName(...);</div></pre></td></tr></table></figure>
<p>打印log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(lldb) p selA</div><div class="line">(SEL) $0 = &quot;setString:&quot;</div><div class="line">(lldb) p selB</div><div class="line">(SEL) $1 = &quot;setString:&quot;</div><div class="line">(lldb) p (const char *)$0</div><div class="line">(const char *) $2 = 0x0000000110c08016 &quot;setString:&quot;</div><div class="line">(lldb) p (const char *)$1</div><div class="line">(const char *) $3 = 0x0000000110c08016 &quot;setString:&quot;</div><div class="line">(lldb)</div></pre></td></tr></table></figure></p>
<p>从log中可以看出selA与selB指向相同的地址.代表同一个字符串<br>不同类中相同名字的方法所对应的选择器是相同的,即使方法名字相同而变量类型不同也会导致它们具有相同的方法选择器</p>
<h3 id="消息发送"><a href="#消息发送" class="headerlink" title="消息发送"></a>消息发送</h3><p>当一个receiver接收消息时,会触发<code>objc_msgSend(receiver, SEL op, ...)</code>.每一个receiver都是objc_object的结构体</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">struct objc_object &#123;</div><div class="line">	Class isa;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">struct objc_method_list&#123;</div><div class="line">	struct objc_method_list *obsolete;</div><div class="line">	int method_count;</div><div class="line">	struct objc_method method_list[1];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="通过isa指针找到当前对象的class-并在class的method-list中寻找发送的消息-结构体objc-method-list是一个包含多个objc-method的数组-objc-method是一个包含SEL和IMP的结构体-SEL主要用来标注方法的名称-IMP是方法指针-因为每个方法都有自己的地址-这各方式直接找到方法的地址-效率最高"><a href="#通过isa指针找到当前对象的class-并在class的method-list中寻找发送的消息-结构体objc-method-list是一个包含多个objc-method的数组-objc-method是一个包含SEL和IMP的结构体-SEL主要用来标注方法的名称-IMP是方法指针-因为每个方法都有自己的地址-这各方式直接找到方法的地址-效率最高" class="headerlink" title="通过isa指针找到当前对象的class, 并在class的method list中寻找发送的消息,结构体objc_method_list是一个包含多个objc_method的数组,objc_method是一个包含SEL和IMP的结构体,SEL主要用来标注方法的名称,IMP是方法指针.因为每个方法都有自己的地址,这各方式直接找到方法的地址,效率最高."></a>通过isa指针找到当前对象的class, 并在class的method list中寻找发送的消息,结构体objc_method_list是一个包含多个objc_method的数组,objc_method是一个包含SEL和IMP的结构体,SEL主要用来标注方法的名称,IMP是方法指针.因为每个方法都有自己的地址,这各方式直接找到方法的地址,效率最高.</h4><blockquote>
<ol>
<li>首先找到SEL对应的方法实现IMP.因为不同的类对同一方法会有不同的实现,所以找到的方法依赖于消息接收者的类型.<ol>
<li>然后将消息接收者对象(指向消息接收者对象的指针)及方法中指定的参数传递给方法实现IMP.</li>
<li>最后,将方法实现的返回值作为该函数实现的返回值</li>
</ol>
</li>
</ol>
</blockquote>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一."></a>方法一.</h2><blockquote>
<p>如果类中没有实现Original selector对应的方法,就添加Method,并将其IMP映射为Swizzle的实现.然后替换Swizzle selector的IMP为Original的实现;否则交换二者IMP.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">+ (void)load&#123;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        Class aCls = [self class];</div><div class="line">        SEL originalSelector = @selector(method_original:);</div><div class="line">        SEL swizzledSelector = @selector(method_swizzle:);</div><div class="line">        </div><div class="line">        Method originalMethod = class_getInstanceMethod(aCls, originalSelector);</div><div class="line">        Method swizzledMethod = class_getInstanceMethod(aCls, swizzledSelector);</div><div class="line">        </div><div class="line">        BOOL didAddMethod = class_addMethod(aCls, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));</div><div class="line">        if (didAddMethod) &#123;</div><div class="line">            class_replaceMethod(aCls, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));</div><div class="line">        &#125;else&#123;</div><div class="line">            method_exchangeImplementations(originalMethod, swizzledMethod);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二."></a>方法二.</h2><blockquote>
<p>为了避免方法命名冲突和参数_cmd被篡改,使用静态方法版本的Method Swizzle. CaptainHook的宏定义使用此种方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef IMP *IMPPointer;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三."></a>方法三.</h2><p>直接交换IMP很危险.如果当前类中没有实现这个方法,class_getInstanceMethod()返回的是某个父类的Method对象,这样method_exchangeImplementations()就把父类的原始实现(IMP)跟当前类的Swizzle实现交换了.这样其他父类及其他子类的方法调用就会出问题.但如果这个类中实现了这个方法,那么方案一与方案三等价.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">+ (void)load&#123;</div><div class="line">	static dispatch_once_t onceToken;</div><div class="line">	dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">		Class aClass = [self class];</div><div class="line">		SEL originalSelector = @selector(Method_original:);</div><div class="line">		SEL swizzledSelector = @selector(Method_swizzle:);</div><div class="line">		Method originalMethod = class_getInstanceMethod(aClass, originalSelector);</div><div class="line">		Method swizzledMethod = class_getInstanceMethod(aClass, swizzledSelector);</div><div class="line">		method_exchangeImplementations(originalMethod, swizzledMethod);</div><div class="line">		&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###参考链接&lt;br&gt; &lt;a href=&quot;http://www.jianshu.com/p/84d1771e9792&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;蒋小飞的blog:&lt;/a&gt;&lt;br&gt;         &lt;a href=&quot;http://blog
    
    </summary>
    
    
      <category term="iOS" scheme="https://neareven.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>CleanMyMac破解3.9.1</title>
    <link href="https://neareven.github.io/2017/12/01/35-cleanmymac/"/>
    <id>https://neareven.github.io/2017/12/01/35-cleanmymac/</id>
    <published>2017-12-01T05:01:00.000Z</published>
    <updated>2017-12-01T10:11:15.100Z</updated>
    
    <content type="html"><![CDATA[<p>清理磁盘空间,卸载软件,一次清理,便可以帮我们节省不少的空间.<br>celanmymac3.9支持macOs High Sierra.</p>
<p><img src="http://orvnx1k8y.bkt.clouddn.com/2017-12-01-487A2D6C-96F5-43F0-9056-2EAF9B11293B.png" alt="487A2D6C-96F5-43F0-9056-2EAF9B11293B"><br><img src="http://orvnx1k8y.bkt.clouddn.com/2017-12-01-Jietu20171201-180233.jpg" alt="Jietu20171201-180233"><br><img src="http://orvnx1k8y.bkt.clouddn.com/2017-12-01-Jietu20171201-175410.jpg" alt="Jietu20171201-175410"></p>
<h2 id="CleanMyMac-mac破解版下载地址"><a href="#CleanMyMac-mac破解版下载地址" class="headerlink" title="CleanMyMac mac破解版下载地址"></a><a href="https://u15567510.pipipan.com/fs/15567510-222908941" target="_blank" rel="external">CleanMyMac mac破解版下载地址</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;清理磁盘空间,卸载软件,一次清理,便可以帮我们节省不少的空间.&lt;br&gt;celanmymac3.9支持macOs High Sierra.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://orvnx1k8y.bkt.clouddn.com/2017-12-01-487A2D6
    
    </summary>
    
    
      <category term="mac app" scheme="https://neareven.github.io/tags/mac-app/"/>
    
  </entry>
  
  <entry>
    <title>mac迅雷vip破解 &amp; iOS迅雷</title>
    <link href="https://neareven.github.io/2017/12/01/34-thunder/"/>
    <id>https://neareven.github.io/2017/12/01/34-thunder/</id>
    <published>2017-12-01T04:42:00.000Z</published>
    <updated>2017-12-01T10:12:42.523Z</updated>
    
    <content type="html"><![CDATA[<p>迅雷内讧升级,bitcoin错过了,玩客币又错过了.与发财无源啊.</p>
<h1 id="MAC版-vip破解"><a href="#MAC版-vip破解" class="headerlink" title="MAC版:vip破解"></a>MAC版:vip破解</h1><p>迅雷mac破解版,<code>需要先登录自己的账号</code>,之后才可以享用vip加速<br><img src="http://orvnx1k8y.bkt.clouddn.com/2017-12-01-9BA5AB01-795C-4CDE-8A79-A538702F27A4.png" alt="9BA5AB01-795C-4CDE-8A79-A538702F27A4"></p>
<h1 id="iOS版"><a href="#iOS版" class="headerlink" title="iOS版"></a>iOS版</h1><p>迅雷iOS企业版也出了,除了广告多点,到也可以忍受,<br><img src="http://orvnx1k8y.bkt.clouddn.com/2017-12-01-221512120948_.pic.jpg" width="50%" height="50%"><br><img src="http://orvnx1k8y.bkt.clouddn.com/2017-12-01-Screen Shot 2017-12-01 at 下午5.29.13.png" width="50%" height="50%"><br><img src="http://orvnx1k8y.bkt.clouddn.com/2017-12-01-Screen Shot 2017-12-01 at 下午5.29.29.png" width="50%" height="50%"></p>
<h1 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h1><p>##mac: <a href="https://u15567510.ctfile.com/fs/15567510-229970659" target="_blank" rel="external">mac版VIP下载链接</a></p>
<p>##iOS: <a href="https://ithunder-ota.a.88cdn.com/download-guide/step1.html" target="_blank" rel="external">把这个链接拷贝到iPhone上用safari打开</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;迅雷内讧升级,bitcoin错过了,玩客币又错过了.与发财无源啊.&lt;/p&gt;
&lt;h1 id=&quot;MAC版-vip破解&quot;&gt;&lt;a href=&quot;#MAC版-vip破解&quot; class=&quot;headerlink&quot; title=&quot;MAC版:vip破解&quot;&gt;&lt;/a&gt;MAC版:vip破解&lt;/h1&gt;
    
    </summary>
    
    
      <category term="mac app" scheme="https://neareven.github.io/tags/mac-app/"/>
    
  </entry>
  
  <entry>
    <title>Runtime -2</title>
    <link href="https://neareven.github.io/2017/11/29/33-runtime/"/>
    <id>https://neareven.github.io/2017/11/29/33-runtime/</id>
    <published>2017-11-29T12:22:00.000Z</published>
    <updated>2017-12-01T09:15:12.093Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/" target="_blank" rel="external">玉令天下大神的runtime详解,通俗流畅,学习runtime强烈推荐,此处是链接,正文多摘抄自大神blog与runtime源码</a></p>
<h1 id="Messaging"><a href="#Messaging" class="headerlink" title="Messaging"></a>Messaging</h1><h2 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h2><blockquote>
<p>信息表述可以被转化为objc_msgSend函数的方法调用,可以通过名字来获取方法.如果需要的话,我们也可以用objc_msgSend来规避动态绑定.</p>
</blockquote>
<h2 id="二-objc-msgSend-消息转发函数"><a href="#二-objc-msgSend-消息转发函数" class="headerlink" title="二. objc_msgSend 消息转发函数"></a>二. objc_msgSend 消息转发函数</h2><blockquote>
<p>oc中,直到运行时消息才会被绑定到方法实现.编译器会把一个消息表达式转化为一次对消息函数objc_msgSend的调用.这个函数将接收器与方法做为两个主要参数.消息传递的其他参数也会通过这个函数来处理.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objc_msgSend(receiver, selector)</div></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objc_msgSend(receiver, selector, arg1, arg2...)</div></pre></td></tr></table></figure>
<p>消息传递函数实现了动态绑定所必需的操作:</p>
<ul>
<li>它首先找到选择器所引用的过程,由于相同的方法可能会被不同的类所执行,其调用规则取决于接收器</li>
<li>然后调用该过程,将接收对象和参数传递给这个方法</li>
<li>最后,将这个过程返回的值作为函数值返回</li>
</ul>
<p>消息转发的关键在于编译器为每个类和对象创建的结构体中.每个类结构体中包含了两个重要的因素:</p>
<ul>
<li>指向父类的指针</li>
<li>类调度表.表格中包含方法选择器及指向方法选择器的指针地址</li>
</ul>
<p>创建新对象,需要分配内存给这个对象,同时这个对象的实例变量也会被初始化.这个对象的第一个变量是指向它的类结构体的.这个指针是isa,通过isa可以找到它的类和它的所有父类.</p>
<p><img src="http://orvnx1k8y.bkt.clouddn.com/2017-11-30-messaging1.gif" alt="messaging1"></p>
<p>运行时动态绑定的实现方式:<br>当一个消息被转发给一个对象时,消息转发函数会根据isa指针指向的类结构体中找到调度表中的方法选择器.如果找不到选择器,会在父类的调度表中查找.如果父类中也没有这个方法,会继续向上一级的父类查找,直到NSObject.一旦找到,消息转发函数会调用调度表中的这个方法并把接收器的数据结构传递过来.</p>
<p>为了优化消息转发进程,运行时系统会缓存方法选择器和被调用过的方法地址.消息转发函数会开辟出一个独立的缓存区,用来缓存当前类和父类中的方法.在查找调度表之前,会首先检查接收对象的缓存区,如果存在,消息转发函数就只比函数调用慢一点.</p>
<p>当我们的程序运行一段时间后可以对缓存区做预加载,使所有被传递的消息都能找到对应的缓存方法.缓存区会动态增长以此来容纳程序运行时所创建的新方法.</p>
<h2 id="隐藏参数的使用"><a href="#隐藏参数的使用" class="headerlink" title="隐藏参数的使用"></a>隐藏参数的使用</h2><p>objc_msgSend在消息转发时除了传递显示声明的参数外会同时传递两个隐藏参数:</p>
<ul>
<li>接收对象[the receiving object]</li>
<li>方法选择器[the selector for the method]</li>
</ul>
<p>这两参数在源代码的定义中并没有被声明出来,只是在代码编译时被插入实现中<br>尽管没有被显示声明出来,但是代码中我们还是可以引用它们.但是消息转发时还是会将<code>self</code>作为接收对象,<code>_cmd</code>作为方法选择器.</p>
<p>self实际上是在方法实现中访问消息接收者对象的实例变量的途径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- strange&#123;</div><div class="line">	id target = getTheReceiver();</div><div class="line">	SEL method = getTheMethod();</div><div class="line"></div><div class="line">	if (target == self || method == _cmd)&#123;</div><div class="line">		return nil;</div><div class="line">	&#125;</div><div class="line">	return [target performSelector:method];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当方法的super关键字接收到消息时,编译器会创建一个objc_super结构体.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">struct objc_super&#123;id receiver;Class class;&#125;</div></pre></td></tr></table></figure>
<p>上面定义了消息被转发给特定父类.其中的receiver仍为self本身.当我们通过[super class]获取父类时,编译器只是将self的id指针与class的SEL传递给了objc_msgSenderSuper函数,只有NSObject类才能找到class方法,然后class方法调用object_getClass(),接着调用objc_msgSend(objc_super-&gt;receiver,@selector(class)),传入的第一个参数是指向self的id指针,与调用[self class]相同</p>
<h2 id="获取方法的地址"><a href="#获取方法的地址" class="headerlink" title="获取方法的地址"></a>获取方法的地址</h2><p>避开消息绑定而直接获取方法的地址并调用方法,这种做法很少用,除非是需要持续大量重复调用某个方法.当一个方法被多次调用,如果我们希望避免因多次调用产生的开销,获取指针地址会是很好的选择.</p>
<p>通过<code>methodForSelector:</code>,我们可以获取方法实现的函数指针,然后用这个指针去调用这个函数.这个方法返回的函数指针必须被小心地转换成合适的类型,包括返回值和参数.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  </div><div class="line"> * @param id: 接收对象:self</div><div class="line"> * @param SEL: 接收器: _cmd</div><div class="line"> */</div><div class="line">void (*setter)(id, SEL, BOOL);</div><div class="line">int i;</div><div class="line"></div><div class="line">setter = (void (*)(id, SEL, BOOL))[target methodForSelector:@selector(setFilled:)];</div><div class="line">for (i = 0; i &lt; 1000; i++)&#123;</div><div class="line">	setter(targetList[i], @selector(setFiled:), YES);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="SEL"><a href="#SEL" class="headerlink" title="SEL"></a>SEL</h2><p>可以通过Objc编译器<code>@selector()</code>或者runtime系统的<code>sel_registername</code>来获得一个SEL类型的方法选择器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_selector *SEL;</div></pre></td></tr></table></figure></p>
<h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_object *id;</div></pre></td></tr></table></figure>
<p><code>isa</code>指针并总是指向实例对象所属的类,不能依靠它来确定类型,应该用class来确定对象的类.KVO的实现机理就是将被观察对象的isa指针指向一个中间类而不是真实的类,即<code>isa-swizzling</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">struct objc_object &#123;Class isa&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>Class 其实是指向objc_class结构体的的指针<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_class *Class</div></pre></td></tr></table></figure></p>
<p>objc_class继承于objc_object,一个ObjC类本身也是一个对象,为了处理类与对象的关系,runtime库创建了元类(MetaClass), 类对象所属类型就叫元类.它用来表述类对象本身所具备的元数据.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">struct objc_class: objc_object&#123;</div><div class="line">	Class superclass;</div><div class="line">	cache_t cache;  // cache pointer and vtable</div><div class="line">	class_data_bits_t bits;</div><div class="line">	class_rw_t *data()&#123;</div><div class="line">		return bits.data();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>objc-cache.mm</code><br>cache为方法调用的性能进行优化,每当实例对象接收到一个消息时,它不会直接在isa指向的类的方法列表中遍历查找能够响应消息的方法,而是优先在cache中查找.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">struct cache_t &#123;</div><div class="line">	struct bucket_t *_buckets;</div><div class="line">	mask_t _mask;</div><div class="line">	mask_t _occupied;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>_buckets</code>存储IMP, <code>_mask/_occupied</code>对应vtable</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">struct bucket_t&#123;</div><div class="line">	private:</div><div class="line">			cache_key_t _key;</div><div class="line">			IMP _imp;</div><div class="line"></div><div class="line">	public:</div><div class="line">			inline cache_key_t key() const &#123;return _key;&#125;</div><div class="line">			inline IMP imp() const &#123;return (IMP)_imp;&#125;</div><div class="line">			inline void setKey(cache_key_t newKey) &#123;_key = newkey;&#125;</div><div class="line">			inline void setImp(Imp newImp) &#123;_imp = newImp;&#125;</div><div class="line"></div><div class="line">			void set(cache_key_t newKey, IMP newImp);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>objc-runtime-new.h</code></p>
<h2 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h2><p>category_t存储了类别中可以拓展的实例方法/类方法/协议/实例属性/类属性[类属性2016新增]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct category_t *Category;</div></pre></td></tr></table></figure></p>
<p><code>objc-runtime-new.mm</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">struct category_t &#123;</div><div class="line">	const char *name;</div><div class="line">	classref_t cls;</div><div class="line">	struct method_list_t *instanceMethods;</div><div class="line">	struct method_list_t *classMethods;</div><div class="line">	struct protocol_list_t *protocols;</div><div class="line">	struct property_list_t * isntanceProperties;</div><div class="line">	// fields below this point are not always present on disk</div><div class="line">	struct property_list_t *_classProperties;</div><div class="line"></div><div class="line">	method_list_t *methodsForMeta(bool isMeta)&#123;</div><div class="line">		if (isMeta) return classMethods;</div><div class="line">		else return instanceMethods;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	property_list_t *propertiesForMeta(bool isMeta, struct header_info *hi)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">typedef struct method_t *Method</div><div class="line">``</div><div class="line"></div><div class="line">存储了方法名/方法类型与方法实现</div><div class="line">*	方法名类型为SEL,相同名字的方法即使在不同类中定义,它们的方法选择器也相同</div><div class="line">*	方法类型types是个char指针,存储方法的参数类型与返回值类型</div><div class="line">*	imp指向了方法的实现,本质上是一个函数指针</div></pre></td></tr></table></figure>
<p>struct method_t{<br>SEL name;<br>const char *types;<br>IMP imp;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## Ivar</div></pre></td></tr></table></figure></p>
<p>typedef struct ivar_t *Ivar;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>struct ivar_t {<br>    int32_t <em>offset;<br>    const char </em>name;<br>    const char *type;<br>    uint32_t alignment_raw;<br>    unit32_t size;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">根据实例查找其在类中的名字,即``反射``;</div><div class="line">class_copyIvarList获取实例变量和属性,并在原本的属性名前加一个_;</div></pre></td></tr></table></figure></p>
<ul>
<li>(NSString <em>)nameWithInstance:(id)instance{<br>  unsigned int numIvars = 0;<br>  NSString </em>key = nil;<br>  Ivar <em>ivars = class_copyIvarList([self class], &amp;numIvars);<br>  for (int i=0;i&lt;numivars; i++){<br>  Ivar thisIvar = ivars[i];<br>  const char </em>type = ivar_getTypeEncoding(thisIvar);<br>  NSString *stringType = [NSString stringWithCString:type encoding:NSUTF8StringEncoding];<br>  if (![stringType hasPrefix:@”@”]){<br>  continue;<br>}<br>if ((object_getIvar(self, thisIvar) == instance))){<br>  key = [NSString stringWithUTF8String:ivar_getName(thisIvar)];<br>}<br>free(ivars);<br>return key;<br>}<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">## objc_property_t</div><div class="line"></div><div class="line">@property标记了类中的属性,指向objc_property结构体的指针</div></pre></td></tr></table></figure>
</li>
</ul>
<p>typedef struct propety_t *objc_propety_t;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">通过class_copyPropertyList与protocol_copyPropertyList来获取类和协议中的属性</div></pre></td></tr></table></figure></p>
<p>objc_property_t <em>class_copyPropertyList(Class cls, unsigned int </em>outCount)<br>objc_property_t <em>protocol_copyPropertyList(Protocol </em>proto, unsigned int *outCount)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">返回类型为指向指针的指针,因为属性列表是个数组,每个元素内容都是一个objc_property_t指针,而这两个函数返回的值是指向这个数组的指针.</div><div class="line"></div><div class="line">property_getName查找属性名</div></pre></td></tr></table></figure>
<p>const char *property_getName(objc_property_t property)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">class_getProperty protocol_getProperty通过给出的名称来在类和协议中获取属性的引用</div></pre></td></tr></table></figure></p>
<p>objc_property_t class_getProperty(Class cls, const char <em>name)<br>objc_property_t protocol_getProperty(Protocol </em>proto, const char *name, BOOL isRequiredProperty, BOOL isInstanceProperty)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">property_getAttributes获取属性的名称与@encode类型字符串:</div></pre></td></tr></table></figure></p>
<p>const char *property_getAttributes(objc_property_t property)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>对比class_copyIvarList,使用class_copyPropertyList只能获取类的属性,而不包含成员变量,但此时获取的属性名不带下划线<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@interface Lender: NSObjcet &#123;</div><div class="line">	float alone;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@property float alone;</div><div class="line">@end</div><div class="line"></div><div class="line">id LenderClass = objc_getClass(&quot;Lender&quot;);</div><div class="line">usnigned int outCount, i;</div><div class="line">objc_property_t *properties = class_copyPropertyList(LenderClass, &amp;outCount);</div><div class="line">for (i = 0;i&lt;outCount;i++)&#123;</div><div class="line">	objc_property_t property = properties[i];</div><div class="line">	fprintf(stdout, &quot;%s %s\n&quot;, property_getName(property),property_getAttributes(property));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="protocol-t"><a href="#protocol-t" class="headerlink" title="protocol_t"></a>protocol_t</h2><p>protocol 主要内容其实是(可选)方法,其次就是继承其他protocol. swift支持protocol多继承,需要protocols数组来做兼容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">struct protocol_t: objc_object&#123;</div><div class="line">	const char *mangleName;</div><div class="line">	struct protocol_list_t *protocols;</div><div class="line">	method_list_t *instanceMethods;</div><div class="line">	method_list_t *classMethods;</div><div class="line">	method_list_t *optionalInstanceMethods;</div><div class="line">	method_list_t *optionalClassMethods;</div><div class="line">	method_list_t *instanceProperties;</div><div class="line">	unit32_t size;</div><div class="line">	unit32_t flags;</div><div class="line">	const char **_extendedMethodTypes;</div><div class="line">	const char *_demangledName;</div><div class="line">	property_list_t *_classProperties;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="IMP"><a href="#IMP" class="headerlink" title="IMP"></a>IMP</h2><p>IMP是一个函数指针,由编译器生成.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef void(*IMP)(void /* id, SEL, ... */);</div></pre></td></tr></table></figure></p>
<h2 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h2><p>objc_msgSend(id , SEL, arg…)</p>
<h3 id="一-执行步骤"><a href="#一-执行步骤" class="headerlink" title="一. 执行步骤"></a>一. 执行步骤</h3><ul>
<li>1.检测selector是不是要忽略,mac os x中,有了垃圾回收就不用理会retain,release</li>
<li>2.检测target是不是nil,如果为nil,会自动被oc忽略</li>
<li>3.开始查找这个类的IMP,先从cache中找,一旦找到,就跳到对应的函数中去执行.</li>
<li>4.如果cache中没有,就到方法分发表中查找</li>
<li>5.如果分发表中也没有,就到父类的分发表中查找,一直找,直到NSObject</li>
<li>6.如果NSObject也没有,就进入动态方法解析</li>
</ul>
<p>objc_msgSend_stret[st:struct re:return 如果消息返回的是数据结构而不是简单的值,那么调用名字会带有stret的函数]</p>
<h2 id="动态方法解析"><a href="#动态方法解析" class="headerlink" title="动态方法解析"></a>动态方法解析</h2><p>可以用@dynamic关键字在类的实现文件中修饰一个属性,来动态地提供一个方法的实现.这表示我们会为这个属性动态提供存取方法,也就是说编译器不会再默认为我们提供setPropertyName与propertyName方法,而是需要我们动态提供.我可以通过分别重载resolveInstanceMethod:和resolveClassMethod分别添加实例方法和类方法实现.当runtime系统在Cache和方法分发表(包括父类)中找不到要执行的方法时,Runtime会调用resolveInstanceMethod或resolveClassMethod提供一次动态添加方法实现的机会.需要用class_addMethod函数来完成向特定类添加特定方法的实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@dynamic propertyName;</div></pre></td></tr></table></figure>
<p>oc方法可以被简化成一个包含两个参数self与_cmd的c函数.我们也可以用class_addMethod函数给class添加一个方法.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@implementation MyClass</div><div class="line">/**</div><div class="line"> * @param resolveThisMethodDynamically添加了实现内容,即dynamicMethodIMP方法中代码</div><div class="line"> * @param</div><div class="line"> */</div><div class="line"></div><div class="line">void dynamicMethodIMP(id self, SEL _cmd)&#123;</div><div class="line">	// implementation...</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (BOOL)resolveInstanceMethod:(SEL)aSEL&#123;</div><div class="line">	if (aSEL == @selector(resolveThisMethodDynamically))&#123;</div><div class="line">	class_addMethod([self class], aSEL, (IMP) dynamicMethodIMP, &quot;v@:&quot;);  // [v: void @:An OBjcet(whether statically typed or typed id)  :: A method selector]</div><div class="line">	return YES;</div><div class="line">&#125;</div><div class="line">return [super resolveInstanceMethod:aSEL];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>[self class] / object_getClass(self) / object_getClass([self class]):</p>
<ul>
<li><ol>
<li>当self为实例对象时,[self clss]与object_getClass(等价),因为前者会调用后者.[objcet_getClass([self class])得到元类]</li>
</ol>
</li>
<li><ol>
<li>当self为类对象时,[self class]返回值自身,还是self.object_getClass(self)与object_getClass([self  class])<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">@interface Student : NSObject</div><div class="line">+ (void)learnClass:(NSString *)string;</div><div class="line">- (void)goToSchool:(NSString *)name;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation Student</div><div class="line">+ (BOOL)resolveClassMethod:(SEL)sel&#123;</div><div class="line">    if (sel == @selector(learnClass:)) &#123;</div><div class="line">        //        objc_getClass(&lt;#const char * _Nonnull name#&gt;)</div><div class="line">        //          object_getClass(&lt;#id  _Nullable obj#&gt;) -&gt; return the class of an object</div><div class="line">        //        class_addMethod(&lt;#Class  _Nullable __unsafe_unretained cls#&gt;, &lt;#SEL  _Nonnull name#&gt;, &lt;#IMP  _Nonnull imp#&gt;, &lt;#const char * _Nullable types#&gt;)</div><div class="line">        class_addMethod(object_getClass(self), sel, class_getMethodImplementation(object_getClass(self), @selector(myClassMethod:)), &quot;v@:&quot;);</div><div class="line">        return YES;</div><div class="line">    &#125;</div><div class="line">    return [class_getSuperclass(self) resolveClassMethod:sel];</div><div class="line">&#125;</div><div class="line">+ (BOOL)resolveInstanceMethod:(SEL)aSel&#123;</div><div class="line">    if (aSel == @selector(myInstanceMethod:)) &#123;</div><div class="line">        class_addMethod([self class], aSel, class_getMethodImplementation([self class], @selector(myInstanceMethod:)), &quot;v@:&quot;);</div><div class="line">        return YES;</div><div class="line">    &#125;</div><div class="line">    return  [super resolveInstanceMethod:aSel];</div><div class="line">&#125;</div><div class="line">+ (void)myClassMethod:(NSString *)string&#123; &#125;</div><div class="line">- (void)myInstanceMethod:(NSString *)string&#123;&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h2 id="消息转发"><a href="#消息转发" class="headerlink" title="消息转发"></a>消息转发</h2><p><img src="http://orvnx1k8y.bkt.clouddn.com/2017-12-01-QQ20141113-1@2x.png" alt="QQ20141113-1@2x"></p>
<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>在消息转发执行前,可以通过重载<code>forwardingTargetForSelector:(SEL)aSelector</code>方法替换消息的接收者为其他对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 如果此方法返回nil或self,则会进入消息转发机制(forwardInvocation:);否则将向返回的对象重新发送消息</div><div class="line">- (id)forwardinTargetForSelector:(SEL)aSel&#123;</div><div class="line">	if (aSel == @selector(myCustomMethod:))&#123;</div><div class="line">	return alternateObject;</div><div class="line">&#125;</div><div class="line">return [super forwardingTargetForSelector:aSelector];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果要替换类方法的接收者,需要重写<code>forwardingTargetForSelector:(SEL)aSelector</code>方法,并返回类对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+ (id)forwardingTargetForSelector:(SEL)aSelector&#123;</div><div class="line">	if (aSelector == @selector(xxx))&#123;</div><div class="line">	return NSClassFromString(@&quot;Class name&quot;);</div><div class="line">&#125;</div><div class="line">return [super forwardingTargetForSelector:aSelector];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h2><p>当动态方法解析不作处理返回no时,消息转发机制会被触发. 这时执行forwardInvocation:方法会被执行.可以重写这个方法来定义转发逻辑.<br>在forwardInvocation消息发送前,Runtime系统会向对象发送methodSignatureForSelector消息,并取到返回的方法签名用于生成NSInvocation对象.所以在重写forwardInvocation的同时也要重写<code>methodSignatureForSelector</code>.<br>当一个对象由于没有相应的方法实现而无法响应某消息时,运行时系统将通过forwardInvocation消息通知该对象.每个对象都从NSObject类中继承了forwardInvocation方法.<br>forwardInvocation方法就像一个不能识别的消息分发中心,将这些消息转发给不同的接收对象.也可以将所有的消息转发给同一个接收对象.</p>
<blockquote>
<p>注意: forwardInvocaiton方法只有在消息接收对象无法正常响应时才会被调用.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation&#123;</div><div class="line">	if ([someOtherObject respondsToSelector:[anInvocation selector]])&#123;</div><div class="line">	[anInvocation invokeWithTarget:someOhterObject];</div><div class="line">&#125;else&#123;</div><div class="line">	[super forwardInvocation:anInvocation];</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="转发与多继承"><a href="#转发与多继承" class="headerlink" title="转发与多继承"></a>转发与多继承</h2><p>oc不支持多继承,但通过消息转发可以实现多继承的效果</p>
<p>一个对象给它的替代者对象转发消息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSel&#123;</div><div class="line">NSMethodSignature *signature = [super methodSignatureForSelector:aSel];</div><div class="line">if (!signature)&#123;</div><div class="line">	signature = [surrogate methodSignatureForSelector:aSel];</div><div class="line">&#125;</div><div class="line">return signature;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Method-Swizzling"><a href="#Method-Swizzling" class="headerlink" title="Method Swizzling"></a>Method Swizzling</h2><blockquote>
<p>终于到了这一节,硬着头皮啃到了最后,虽说很多东西还是不懂,但比以前,一看这篇文章,不超过3行,必定放弃,这次能走到这里,已经算是很大的进步了. 而在逆向中,这个方法的用处也非常大<br>　<br>通过重新映射方法够达到偷天换日的目的.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">interface UIViewController (Tracking)</div><div class="line">@end</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">@implementation UIViewController (Tracking)</div><div class="line">+ (void)load&#123;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        Class aCls = [self class];</div><div class="line">        </div><div class="line">        // when swizzling a class method,use the following:</div><div class="line">        // Class aCls = object_getClass((id)self);</div><div class="line">        </div><div class="line">        SEL originalSelector = @selector(viewWillAppear:);</div><div class="line">        SEL swizzledSelector = @selector(xw_viewWillAppear:);</div><div class="line">        </div><div class="line">        Method originalMethod = class_getInstanceMethod(aCls, originalSelector);</div><div class="line">        Method swizzledMethod = class_getInstanceMethod(aCls, swizzledSelector);</div><div class="line">        </div><div class="line">        BOOL didAddMethod = class_addMethod(aCls, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));</div><div class="line">        </div><div class="line">        if (didAddMethod) &#123;</div><div class="line">            class_replaceMethod(aCls, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));</div><div class="line">        &#125;else&#123;</div><div class="line">            method_exchangeImplementations(originalMethod, swizzledMethod);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">#pragma mark - Method Swizzling</div><div class="line">- (void)xw_viewWillAppear:(BOOL)animated&#123;</div><div class="line">	// 此时方法已经被替换成viewWillAppear. 如果直接调用[self viewWillAppear:animated]会各成死循环</div><div class="line">    [self xw_viewWillAppear:animated];</div><div class="line">    NSLog(@&quot;method swizzling&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>load 与initazlize区别: load程序启动时就会调用且只调用一次,顺序是父类-&gt;子类-&gt;分类. load时所有类都会被load;  initazlize在首次调用该类前调用,也只调用一次,用不到则不会调用. initazlize遵从普通方法的覆写,如果当前类中没有,会调用父类的方法. load不会自动覆写</p>
<p>如果类中不存在要替换的方法,那就先用class_addMethod和class_replaceMethod函数添加和替换这两个方法的实现;如果类中已经有了想要替换的方法,就直接调用method_exchangeImplementations进行方法替换.</p>
<p>object_getClass((id)self)与[self class]返回的结果类型都是Class,但前者为元类,后者为其本身.此时self为Class而不是实例.</p>
</blockquote>
<p>[NSObject class] 与 [objcet class]区别:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+ (Class)class&#123;</div><div class="line">	return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (Class)class&#123;</div><div class="line">	return object_getClass(self);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>如果类中没有被替换实现的原方法时,class_replaceMethod相当于直接调用class_addMethod向类中添加该方法的实现.否则调用method_setImplementation方法,types会被忽略.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// method_exchangeImplementations与下列方法等价</div><div class="line">IMP imp1 = method_getImplementation(m1);</div><div class="line">IMP imp2 = method_getImplementation(m2);</div><div class="line">method_setImplementation(m1, imp2);</div><div class="line">method_setImplementation(m2, imp1);</div></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">+ (IMP)swizzleSelector:(SEL)origSelector withIMP:(IMP)newIMP&#123;</div><div class="line">    Class class = [self class];</div><div class="line">    Method origMethod = class_getClassMethod(class, origSelector);</div><div class="line">    IMP origIMP = method_getImplementation(origMethod);</div><div class="line">    BOOL addMethod = class_addMethod(self, origSelector, newIMP, method_getTypeEncoding(origMethod));</div><div class="line">    if (!addMethod) &#123;</div><div class="line">        method_setImplementation(origMethod, newIMP);</div><div class="line">    &#125;</div><div class="line">    return origIMP;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="self-amp-super"><a href="#self-amp-super" class="headerlink" title="self &amp; super"></a>self &amp; super</h2><p><a href="http://www.cnblogs.com/tangbinblog/p/4034890.html" target="_blank" rel="external">self&amp;super</a><br>在动态方法中,self 代表对象,在静态方法中,self代表类.总之,self代表当前方法的调用者<br> self是类的隐藏的参数变量,源代码中并未显示声明出来,指向当前调用方法的对象(类也是对象,类对象),另一个隐藏参数是_cmd, 代表当前类方法的selector.<br> super不是隐藏参数,是一个``编译器指示符.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id objc_msgSendSuper(struct objc_super *super, SEL op, arg...)</div></pre></td></tr></table></figure>
<p> self = [super init] 被转化成objc_msgSend(id super, SEL init),先在当前类cache中查找init方法,找不到会查找父类,直到NSObject,还找不到,会去分发表中查找.<br> NSOject的init方法,负表初始化内存区域,向里面添加一些必要的属性,返回内存指针.这样延着继承链初始化的内存指针会被从上到下传递,在不同的子类中向块内存添加子类及必要的属性<br> [super init]只是一个编译器符号,可以写成[self init],只不过方法是从self的父类开始查找</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">struct objc_super&#123;</div><div class="line">	id receiver;</div><div class="line">	Class superClass;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self = [super init]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;玉令天下大神的runtime详解,通俗流畅,学习runtime强烈推
    
    </summary>
    
    
      <category term="iOS" scheme="https://neareven.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Runtime - 1</title>
    <link href="https://neareven.github.io/2017/11/27/32-runtime/"/>
    <id>https://neareven.github.io/2017/11/27/32-runtime/</id>
    <published>2017-11-27T03:01:00.000Z</published>
    <updated>2017-12-04T06:07:57.698Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Working-with-Class"><a href="#Working-with-Class" class="headerlink" title="Working with Class"></a>Working with Class</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objc_msgSend(receiver, selector, arg1, arg2,...)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const char * class_getName(Class cls)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class class_getSuperclass(Class cls)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class class_setSuperclass(Class cls, Class newSuper)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BOOL class_isMetaClass(Class cls)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> // 返回类实例大小</div><div class="line">size_t class_getInstanceSize(Class cls)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 获取实例变量</div><div class="line">Ivar class_getInstanceVariable(Class cls, const char *name)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 获取类变量</div><div class="line">Ivar class_getClassVariable(Class cls, const char *name)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BOOL class_addIvar(Class cls, const char *name, size_t size, uint8_t alignment, const char *types)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// Describes the instance variables declared by a class</div><div class="line">// 返回数组长度</div><div class="line">Ivar * calss_copyIvarList(Class cls, unsigned int *outCount)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const char *class_getIvarLayout(Clss cls)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void class_setIvarLayout(Class cls, const char *layout)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const char *class_getWeakIvarLayout(Class cls)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void class_setWeakIvarLayout(Class cls, const char *layout)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 属性获取</div><div class="line">objc_property_t class_getProperty(Class cls, const char *name)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 属性列表获取</div><div class="line">objc_property_t *class_copyPropertyList(Class cls, unsigned int *outCount)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 为类添加新的方法,如果该方法已存在,返回no</div><div class="line">// 只能替换父类的方法</div><div class="line">BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 当前类中的方法替换: </div><div class="line">IMP method_setImplementation(Method method, IMP imp)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">void myMethodImp(id self, SEL _cmd)&#123;</div><div class="line">	// impementation...</div><div class="line">&#125;</div><div class="line">class_addMethod([self class], @selector(resolveThisMethodDynamically), </div><div class="line">(IMP)myMethodIMP, &quot;v@:&quot;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 获取类的实例方法[-方法]</div><div class="line">Method class_getInstanceMethod(Class aClass, SEL aSelector)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 获取类方法[+方法]</div><div class="line">Method class_getClassMethod(Class aClass, SEL aSelector)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// Class cls 获取的是类本身. </div><div class="line">// 获取类中的方法列表</div><div class="line">Method *class_copyMethodList(Class cls, unsigned int *outCount)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// to get the calss methods of a class, use </div><div class="line">// object_getClass()是获取元类的方法</div><div class="line">class_copyMethodList(object_getClass(cls), &amp;count).</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// if the method name doesn&apos;t exist, called class_method</div><div class="line">// if the method name does exist, called method_setImplementation</div><div class="line">// 替换类已有方法的实现,如果该方法不存在则添加该方法</div><div class="line">IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 获取类中的方法实现</div><div class="line">IMP class_getMethodImplementation(Class cls, SEL name)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">stret: [st: struct] [ret: return]</div><div class="line">// 获取类中的方法实现,返回值类型为struct</div><div class="line">IMP class_getMethodImplementation_stret(Class cls, SEL name)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 判断类中是否包含某个方法的实现</div><div class="line">BOOL class_respondsToSelector(Class cls, SEL sel)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// add a protocol to a class</div><div class="line">BOOL class_addProtocol(Class cls, Protocol *protocol)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  add a property to a class</div><div class="line"> * @param attributes: an array of property attributes</div><div class="line"> */</div><div class="line">BOOL class_addProperty(Class cls, const char *name, const objc_property_attribute *attributes, unsigned int attributeCount)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  replace a property of a class</div><div class="line"> */</div><div class="line">void class_replaceproperty(Class cls, const char *name, const objc_property_attribute *attributes, unsigned int attributeCount)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  判断是否遵循协议</div><div class="line"> */</div><div class="line">BOOL class_conformsToProtocol(Class cls, Protocol *protocol)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Protocol ** class_copyProtocolist(Class cls, unsigned int *outCount)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int class_getVersion(Class theClass)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void class_setVersion(Class theClass, int version)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 不主动调用</div><div class="line">Class objc_getFutureClass(const char *name)</div><div class="line">void objc_setFutureClass(Class cls, const char *name)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  creates a new class an metaclass</div><div class="line"> * @descp  To create a new class, start by objc_allocateClassPair,then set the class&apos;s attributes with functions like class_addMethod and class_addIvar. When you are done building the class, call objc_registerClassPair.</div><div class="line"> * @param  superclass: nil 或父类</div><div class="line"> * @param  extraBytes: 0</div><div class="line"> */</div><div class="line"></div><div class="line">objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  destroys a class and its associated metaclass. the class must have been allocated using objc_allocateClassPair.</div><div class="line"> * @param  </div><div class="line"> */</div><div class="line">void objc_disposeClassPair(Class cls)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  register a class that allocated using objc_allocateClassPair</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">void objc_registerClassPair(Class cls)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  used by Foundation&apos;s Key-Value Observaing</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">objc_duplicateClass</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  creates an instance of a class, allocating memory for the class in the default malloc memory zone.</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">id class_createInstance(Class cls, size_t extraBytes)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  creates an instance of a class at the specified location</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">id objc_constructInstance(Class cls, void *bytes)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  Destroys an instance of a class without freeing memory and removes any of its associated references.</div><div class="line"> */</div><div class="line">void objc_destructInstance(id obj)</div></pre></td></tr></table></figure>
<h2 id="Working-with-Instances"><a href="#Working-with-Instances" class="headerlink" title="Working with Instances"></a>Working with Instances</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  returns a copy of a given object</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">id object_copy(id obj, size_t size)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 设置新的方法</div><div class="line">Ivar object_setInstanceVariable(id obj, const char *name, void *value)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 获取方法</div><div class="line">Ivar object_getInstanceVariable(id obj, const char *name, void **outValue)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  returns a pointer to any extra bytes allocated with a instance given object</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">OBJC_EXPORT void *object_getIndexedIvars(id obj)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  reads the value of an instance variable (ivar : instance variable)</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">id object_getIvar(id object, Ivar ivar)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @param object: the object containing the instance variable whose value you want to set</div><div class="line"> * @param ivar: the instance variable whose value you want to set</div><div class="line"> */</div><div class="line">void object_setIvar(id object, Ivar ivar, id value)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const char *object_getClassName(id obj)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 获取元类</div><div class="line">//objc_getMetaClass</div><div class="line">Class object_getClass(id object)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class object_setClass(id object, Class cls)</div></pre></td></tr></table></figure>
<h2 id="Obtaining-Class-Definitions"><a href="#Obtaining-Class-Definitions" class="headerlink" title="Obtaining Class Definitions"></a>Obtaining Class Definitions</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int objc_getClassList(Class *buffer, int bufferLen)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">int numClasses;</div><div class="line">Class *classes = NULL;</div><div class="line"></div><div class="line">classes = NULL;</div><div class="line">numClasses = objc_getClassList(NULL, 0);</div><div class="line">if (numClasses &gt; 0)</div><div class="line">&#123;</div><div class="line">	classes = malloc(sizeof(Class) *numClasses);</div><div class="line">	numClasses = objc_getClassList(classes, numClasses);</div><div class="line">	free(classes);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  creates and returns a list of pointers to all registered class definitions</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">Class *objc_copyClassList(unsigned int *outCount)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief   returns the class definition of a specified class</div><div class="line"> * @brief  objc_getClass need to see whether the class is registered</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">id objc_lookUpClass(const char *name)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id objc_getClass(const char *name)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  this function is the same as objc_getClass, but kills the process if the class is not found</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">id objc_getRequiredClass(const char *name)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id objc_getMetaClass(const char *name)</div></pre></td></tr></table></figure>
<h2 id="Working-with-Instance-Variables"><a href="#Working-with-Instance-Variables" class="headerlink" title="Working with Instance Variables"></a>Working with Instance Variables</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  returns the name of an isntance variable</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">const char * ivar_getName(Ivar ivar)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 在class_addMethod时用到.获取变量的type类型</div><div class="line">// v@:  v: void @:id ::selector</div><div class="line">const char * ivar_getTypeEncoding(Ivar ivar)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  id or other object types, call objcet_getIvar/object_setIvar</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">ptrdiff_t ivar_getOffset(Ivar ivar)</div></pre></td></tr></table></figure>
<h2 id="Associative-references"><a href="#Associative-references" class="headerlink" title="Associative references"></a>Associative references</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  sets an associated value for a given object using a given key and association policy 为指定对象设置键值</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">void objc_setAssociatedObject(id object, void *key, id value ,</div><div class="line">objc_AssocationPolicy policy)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id objc_getAssociatedObject(id objcet, void *key)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  设置objc_setAssociatedObjcet 的value为nil来清除对象间的关联,下面的方法还会清除与这个对象的其他代理</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">void objc_removeAssociatedObjects(id object)</div></pre></td></tr></table></figure>
<h2 id="Sending-Messages"><a href="#Sending-Messages" class="headerlink" title="Sending Messages"></a>Sending Messages</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">objc_msgSend / objc_msgSend_stret / objc_msgSendSuper / objc_msgSendSuper_stret</div><div class="line">_stret: 发送数据结构类型的消息</div><div class="line"></div><div class="line">// 给父类发送消息用的objc_msgSendSuper</div><div class="line">id objc_msgSend(id self, SEL op, arg...)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  sends a message with a floating-point return value to an instance of a class</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">double objc_msgSend_fpret(id self, SEL op, arg...)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void objc_msgSend_stret(void *stretAddr, id theReceiver, SEL theSelector, arg...)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// if (self = [super init])&#123;&#125;</div><div class="line">id objc_msgSendSuper(struct objc_super *super, SEL op, arg...)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void objc_msgSendSuper_stret(struct objc_super *super, SEL op, arg...)</div></pre></td></tr></table></figure>
<h2 id="Working-with-Methods"><a href="#Working-with-Methods" class="headerlink" title="Working with Methods"></a>Working with Methods</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  calls the implementation of a specified method</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">id method_invoke(id receiver, Method m, arg...)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void method_invoke_stret(id receiver, Method m, ...)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 获取Method中的SEL结构体指针</div><div class="line">SEL method_getName(Method method)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 查找Method的IMP实现</div><div class="line">IMP method_getImplementation(Method method)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 获取方法的Type字符串,包含参数类型和返回值类型 v@ (参数类型:void 返回值类型:id)</div><div class="line">const char * method_getTypeEncoding(Method method)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 获取Mehtod的返回值类型字符串</div><div class="line">char * method_copyReturnType(Method method)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  returns a string describing a single parameter type of a method</div><div class="line"> * @param index: the index of the parameter to inspect</div><div class="line"> */</div><div class="line"> // 获取Method中第n个参数的类型</div><div class="line">char * method_copyArgumentType(Method method, unsigned int index)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void method_getReturnType(Method method, char *dst, size_t dst_len)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 获取Method参数个数</div><div class="line">unsigned method_getNumberOfArguments(Method method)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void method_getArgumentType(Method method, unsigned int index, char *dst, size_t dst_len)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">struct objc_method_description *method_getDescription(Method m)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 设置Method的IMP</div><div class="line">IMP method_setImplementation(Method method, IMP imp)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  方法交换</div><div class="line"> * @param</div><div class="line"> */</div><div class="line"></div><div class="line">void method_exchangeImpementations(Method m1, Method m2)</div><div class="line">IMP imp1 = method_getImplementation(m1);</div><div class="line">IMP imp2 = method_getImplementation(m2);</div><div class="line">method_setImplementation(m1, imp2);</div><div class="line">method_setImplementation(m2, imp1);</div></pre></td></tr></table></figure>
<h2 id="Working-with-Libraies"><a href="#Working-with-Libraies" class="headerlink" title="Working with Libraies"></a>Working with Libraies</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  返回被载入的静态库与动态库的名称</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">const char **objc_copyImageNames(unsigned int *outCount)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const char *class_getImageName(Class cls)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  返回选定的静态库或动态库中包含的类名称</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">const char **objc_copyClassNamesForImage(const char *image, unsigned int *outCount)</div></pre></td></tr></table></figure>
<h2 id="Working-with-Selectors"><a href="#Working-with-Selectors" class="headerlink" title="Working with Selectors"></a>Working with Selectors</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const char * sel_getName(SEL aSelector)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SEL sel_registerName(const char *str)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 与sel_regiterName等同</div><div class="line">SEL sel_getUid(const char *str)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BOOL sel_isEqual(SEL lhs, SEL rhs)</div></pre></td></tr></table></figure>
<h2 id="Working-with-Protcols"><a href="#Working-with-Protcols" class="headerlink" title="Working with Protcols"></a>Working with Protcols</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Protocol *objc_getProtocol(const char *name)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Protocol **objc_copyProtocolList(unsigned int *outCount)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  创建协议实例</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">Protocol *objc_allocateProtocol(const char *name)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void objc_registerProtocol(Protocol *proto)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  添加协议</div><div class="line"> * @param isRequiredMethod: 是否必须实现</div><div class="line"> * @paam isInstanceMethod: yes: method是实例方法 no: method是类方法</div><div class="line"> */</div><div class="line">void protocol_addMethodDescription(Protocol *proto, SEL name, const char *types, BOOL isRequiredMethod, BOOL isInstanceMethod)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  将已注册的协议添加到另一个正在构建的协议中(under construction): allocated but not yet registered</div><div class="line"> * @param  proto: 正在构建的协议</div><div class="line"> */</div><div class="line">void protocol_addProtocol(Protocol *proto, Protocol *addition)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  adds a property to a protocol that is under construction</div><div class="line"> * @param  isInstanceProperty为no时,任何属性都不会被添加</div><div class="line"> */</div><div class="line">void protocol_addProperty(Protocol *proto, const char *name, </div><div class="line">const objc_property_attribute_t *attributes, unsigned int attributeCount, </div><div class="line">BOOL isRequiredMethod, BOOL isInstanceProperty)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const char *protocol_getName(Protocol *p);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BOOL protocol_isEqual(Protocol *proto, Protocol *other)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  return an array of method descriptions of methods meeting a iven specification for a given protocol 返回满足选定协议的方法描述数组</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">struct objc_method_description *protocol_copyMethodDescriptionList(</div><div class="line">Protocol *p, BOOL isRequiredMethod, BOOL isInstanceMethod, unsigned int *outCount)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">struct objc_method_description protocol_getMethodDescription(</div><div class="line">Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  返回协议声明的属性</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">objc_property_t *protocol_copyPropertyList(Protocol *protocol, unsigned int *outCount)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objc_property_t protocol_getProperty(Protocol *proto, const char *name, BOOL isRequiredProperty, BOOL isInstanceProperty)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Protocol **protocol_copyProtocolList(Protocol *proto, unsigned int *outCount)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BOOL protocol_conformsToProtocol(Protocol *proto, Protocol *other)</div><div class="line"> @protocol ProtocolName&lt; protocol list&gt;</div></pre></td></tr></table></figure>
<h2 id="Working-with-Properties"><a href="#Working-with-Properties" class="headerlink" title="Working with Properties"></a>Working with Properties</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 获取属性名称</div><div class="line">const char *property_getName(objc_property_t property)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 获取属性值</div><div class="line">const char *property_getAttributes(objc_property_t property)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">char *property_copyAttributeValue(objc_property_t protocol, const char *attributeName)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objc_property_attribute_t *property_copyAttributeList(objc_property_t property, unsigned int *outCount)</div></pre></td></tr></table></figure>
<h2 id="Using-Objective-C-Language-Features"><a href="#Using-Objective-C-Language-Features" class="headerlink" title="Using Objective-C Language Features"></a>Using Objective-C Language Features</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  Inserted by the complier when a mutation is detected during a foreach iteration</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">void objc_enumerationMutaion(id obj)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void objc_setEnumerationMutationHandler(void (*handler)(id))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IMP imp_implementationWithBlock(id block)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id imp_getBlock(IMP anImp)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BOOL imp_removeBlock(IMP anImp)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id objc_loadWeak(id *location)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  store a new value in a __weak variable</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">id objc_storeWeak(id *location, id obj)</div></pre></td></tr></table></figure>
<h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  an apaque type that represents an Objective-C class</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">typedef struct  objc_class *Class;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_method *Method;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_ivar *Ivar;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_category *Category;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_property *objc_property_t;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id (*IMP)(id, SEL, arg...)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef struct objc_selector *SEL;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">struct objc_method_description &#123; </div><div class="line">SEL name; char *types;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">struct objc_method_list &#123;</div><div class="line">struct objc_method_list *obsolete; </div><div class="line">int method_count; </div><div class="line">struct objc_method method_list[1]&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * @brief  Performance optimization for method calls. contains pointers to recently used methods</div><div class="line"> * @param</div><div class="line"> */</div><div class="line">struct objc_cache &#123;</div><div class="line">unsigned int mask; </div><div class="line">unsigned int occupied;</div><div class="line"> Method buckets[1]&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">struct objc_protocol_list&#123;</div><div class="line">struct objc_protocol_list *next; </div><div class="line">int count;</div><div class="line"> Protocol *list[1]&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">typedef struct &#123;</div><div class="line">const char *name;</div><div class="line"> const char *value;</div><div class="line"> &#125; </div><div class="line"> objc_property_attribute_t;</div></pre></td></tr></table></figure>
<h2 id="Instance-Data-Types"><a href="#Instance-Data-Types" class="headerlink" title="Instance Data Types"></a>Instance Data Types</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// id pointer to an instance of a class</div><div class="line">typedef struct objc_object *id;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// objc_object represents an instance of a class</div><div class="line">struct objc_object &#123;Class isa&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// objc_super specifies the superclass of an instance</div><div class="line">struct objc_supper &#123;id receiver; Class class&#125;;</div></pre></td></tr></table></figure>
<h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef signed char BOOL;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef uintptr_t objc_AssociationPolicy;</div></pre></td></tr></table></figure>
<h2 id="Type-Encodings"><a href="#Type-Encodings" class="headerlink" title="Type Encodings"></a>Type Encodings</h2><blockquote>
<p> Interacting with the Runtime at three distinct levels: Objective-C source code; Nsobject methods[isKindOfClass/isMemberOfClass/respondsToSelector/conformsToProtocol/methodForSelector]; Runtime functions;</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Working-with-Class&quot;&gt;&lt;a href=&quot;#Working-with-Class&quot; class=&quot;headerlink&quot; title=&quot;Working with Class&quot;&gt;&lt;/a&gt;Working with Class&lt;/h2&gt;&lt;figure c
    
    </summary>
    
    
      <category term="iOS" scheme="https://neareven.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Tuxera NTFS for Mac 2016.1 注册版 - 最好用的NTFS文件系统驱动</title>
    <link href="https://neareven.github.io/2017/10/04/31-tuxera-ntfs-2016-1/"/>
    <id>https://neareven.github.io/2017/10/04/31-tuxera-ntfs-2016-1/</id>
    <published>2017-10-04T03:01:00.000Z</published>
    <updated>2017-10-04T03:53:06.949Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://orvnx1k8y.bkt.clouddn.com/2017-10-04-TuxeraNTFS.jpg" alt="TuxeraNTFS"></p>
<p>Mac只支持读取NTFS的文件,但不支持写入,当我们想把1024上下载的小电影拷贝到移动硬盘时,会发现我们的移动硬盘或U盘弹出大大的拒绝提示,而如果安装了Tuxera NTFS,这个问题就迎刃而解了.<br>至于tuxera的其他强大功能,硬盘管理/格式转换/数据保护,你会用吗,反正我不会.</p>
<p><code>Tuxera NTFS for Mac 2016.1 支持macOS high sierra</code>,对于手痒升级到了macOS sierra的我来说,再无后顾之忧了.</p>
<p><img src="http://orvnx1k8y.bkt.clouddn.com/2017-10-04-15070868830631.jpg" alt="只要195.18"><br>官网195.18大洋,支持正版的童鞋可以去看看<a href="https://www.tuxera.com/products/tuxera-ntfs-for-mac/" target="_blank" rel="external">tuxera官网</a>, 至于我这个穷鬼,就只好找crack了.</p>
<h3 id="Tuxera-NTFS-2016-1破解方法"><a href="#Tuxera-NTFS-2016-1破解方法" class="headerlink" title="Tuxera NTFS 2016.1破解方法:"></a>Tuxera NTFS 2016.1破解方法:</h3><ol>
<li><code>断网</code> <code>断网</code> <code>断网</code>,以下步骤请在断网后执行</li>
<li><p>点击tuxerantfs_2016.1.dmg,install Tuxera NTFS<br><img src="http://orvnx1k8y.bkt.clouddn.com/2017-10-04-15070876766182.jpg" alt=""></p>
</li>
<li><p>会默认选择试用版,继续<br><img src="http://orvnx1k8y.bkt.clouddn.com/2017-10-04-15070877669132.jpg" alt=""></p>
</li>
<li><p>安装完成后会进入这个界面, <code>不要点击重新启动!!!</code><br><img src="http://orvnx1k8y.bkt.clouddn.com/2017-10-04-15070878274461.jpg" alt=""></p>
</li>
<li><p>回到这个目录,将Crack文件夹中的Tuxera NTFS移动到 <code>/Library/PreferencePanes/Tuxera NTFS.prefPane/Contents/MacOS</code>进行替换<br><img src="http://orvnx1k8y.bkt.clouddn.com/2017-10-04-15070880960849.jpg" alt=""></p>
</li>
<li>替换好了,重新启动你的电脑吧</li>
<li>重启好后,打开系统偏好设置,出现了这个图标,进去,在激活下输入产品密钥就可以了</li>
<li>如果发现产品密钥没法输入,那就重新执行以上步骤</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">8GNQX-7440M-Z1LXQ-YZ3PY</div><div class="line">8X1QJ-0640Y-71K7Q-ZDGYK</div><div class="line">8X96X-4P40W-71LEY-RGAP6</div></pre></td></tr></table></figure>
<ol>
<li>现在你可以联网肆意的下载小电影了</li>
</ol>
<h2 id="Tuxera-NTFS-2016-1-mac破解版下载地址"><a href="#Tuxera-NTFS-2016-1-mac破解版下载地址" class="headerlink" title="Tuxera NTFS 2016.1 mac破解版下载地址"></a><a href="https://page10.ctfile.com/fs/15567510-222909040" target="_blank" rel="external">Tuxera NTFS 2016.1 mac破解版下载地址</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://orvnx1k8y.bkt.clouddn.com/2017-10-04-TuxeraNTFS.jpg&quot; alt=&quot;TuxeraNTFS&quot;&gt;&lt;/p&gt;
&lt;p&gt;Mac只支持读取NTFS的文件,但不支持写入,当我们想把1024上下载的小电影拷贝到
    
    </summary>
    
    
      <category term="mac app" scheme="https://neareven.github.io/tags/mac-app/"/>
    
  </entry>
  
  <entry>
    <title>jQuery</title>
    <link href="https://neareven.github.io/2017/07/27/30-jQuery/"/>
    <id>https://neareven.github.io/2017/07/27/30-jQuery/</id>
    <published>2017-07-27T11:52:00.000Z</published>
    <updated>2017-07-27T08:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-元素"><a href="#一-元素" class="headerlink" title="一. 元素"></a>一. 元素</h2><p><code>$(&#39;*&#39;)</code>: 选取所有元素<br><code>$(&#39;p:first&#39;)</code>: <code>选取第一个&lt;p&gt;元素</code><br><code>$(&#39;ul li:first&#39;)</code>: <code>选取第一个&lt;ul&gt;元素的第一个&lt;li&gt;元素</code><br><code>$(ul li:first-child)</code>:<code>选取第个&lt;ul&gt;元素的第一个&lt;li&gt;元素</code><br><code>$(&#39;[href]&#39;)</code>: 选取带有href的元素<br><code>$(&quot;a[target=&#39;_blank&#39;]&quot;)</code>: 选取所有target=_blank的<a>元素<br><code>$(&#39;:button&#39;)</code>: <code>选取所有type=&#39;button&#39;的&lt;input&gt;元素和&lt;button&gt;元素</code></a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="keyword">this</span>).hide()</div><div class="line">$(<span class="string">'p.test'</span>).hide()</div><div class="line">$(<span class="string">'#test'</span>).hide()</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在文档完全加载完后执行函数</span></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="二-事件"><a href="#二-事件" class="headerlink" title="二. 事件"></a>二. 事件</h2><p><code>$(&#39;p&#39;).click()</code> : 点击</p>
<p>// 双击<br><code>$(&#39;p&#39;).dbclick()</code>: 双击</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// mouseenter: 当鼠标指针穿过元素时触发</span></div><div class="line">$(<span class="string">'#p1'</span>).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// mouseleave(): 当鼠标离开元素时触发</span></div><div class="line">$(<span class="string">'#p1'</span>).mouseleave(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// mousedown(): 鼠标移动到元素上方,并按下鼠标按键时触发</span></div><div class="line">$(<span class="string">'#p1'</span>).mousedown(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// mouseup(): 当在元素上松开鼠标时触发</span></div><div class="line">$(<span class="string">'#p1'</span>).mouseup(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><code>hover()</code>: 用于模拟鼠标悬停事件</p>
<p>`` focus()<figure class="highlight plain"><figcaption><span>当元素获得焦点时触发</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; 当通过鼠标点击选中元素或通过tab键定位到元素时触发</div><div class="line"></div><div class="line">```js</div><div class="line">$(&apos;input&apos;).focus(function () &#123;</div><div class="line">	$(this).css(&apos;background-color&apos;,&apos;red&apos;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><code>blur()</code>: 元素失去焦点时触发</p>
<h2 id="三-效果"><a href="#三-效果" class="headerlink" title="三. 效果"></a>三. 效果</h2><h3 id="1-隐藏-显示"><a href="#1-隐藏-显示" class="headerlink" title="1. 隐藏/显示"></a>1. 隐藏/显示</h3><blockquote>
<p>speed速度: ‘slow’,’fast’,或毫秒</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(selector).hide(speed,callback)</div><div class="line">$(selector).show(speed,callback)</div></pre></td></tr></table></figure>
<p><code>toggle()</code>:切换hide与show[先隐藏之后显示]<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(selector).toggle(speed,callback)</div></pre></td></tr></table></figure></p>
<h3 id="2-淡入炎出"><a href="#2-淡入炎出" class="headerlink" title="2. 淡入炎出"></a>2. 淡入炎出</h3><p><code>$(selector).fadeIn(speed, callback)</code>:淡入</p>
<p><code>fadeOut()</code>: 淡出</p>
<p><code>fadeToggle()</code>:切换淡入淡出效果</p>
<blockquote>
<p>如果已淡入则淡出,如果已淡出则淡入</p>
</blockquote>
<p><code>fadeTo()</code>: 渐变到给定的透明度</p>
<blockquote>
<p>speed与opacity必须设置</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(selector).fadeTo(speed, opacity,callback)</div></pre></td></tr></table></figure>
<h3 id="3-滑动"><a href="#3-滑动" class="headerlink" title="3. 滑动"></a>3. 滑动</h3><p><code>$(selector).slideDown(speed,callback)</code>: 向下滑动</p>
<p><code>$(selector).slideUp(speed,callback)</code>: 向止拉起</p>
<p><code>slideToggle()</code>: 切换slideDown()与slideUp()</p>
<h3 id="4-动画"><a href="#4-动画" class="headerlink" title="4. 动画"></a>4. 动画</h3><blockquote>
<p>params: 必须定义css属性且用驼峰法命名</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(selector).animate(&#123;params&#125;, speed, callback)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用相对值</span></div><div class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">"div"</span>).animate(&#123;</div><div class="line">    <span class="attr">left</span>:<span class="string">'250px'</span>,</div><div class="line">    <span class="attr">height</span>:<span class="string">'+=150px'</span>,</div><div class="line">    <span class="attr">width</span>:<span class="string">'+=150px'</span></div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用预定义的值</span></div><div class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">"div"</span>).animate(&#123;</div><div class="line">    <span class="attr">height</span>:<span class="string">'toggle'</span></div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用队列功能</span></div><div class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> div=$(<span class="string">"div"</span>);</div><div class="line">  div.animate(&#123;<span class="attr">height</span>:<span class="string">'300px'</span>,<span class="attr">opacity</span>:<span class="string">'0.4'</span>&#125;,<span class="string">"slow"</span>);</div><div class="line">  div.animate(&#123;<span class="attr">width</span>:<span class="string">'300px'</span>,<span class="attr">opacity</span>:<span class="string">'0.8'</span>&#125;,<span class="string">"slow"</span>);</div><div class="line">  div.animate(&#123;<span class="attr">height</span>:<span class="string">'100px'</span>,<span class="attr">opacity</span>:<span class="string">'0.4'</span>&#125;,<span class="string">"slow"</span>);</div><div class="line">  div.animate(&#123;<span class="attr">width</span>:<span class="string">'100px'</span>,<span class="attr">opacity</span>:<span class="string">'0.8'</span>&#125;,<span class="string">"slow"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="5-停止动画"><a href="#5-停止动画" class="headerlink" title="5. 停止动画"></a>5. 停止动画</h3><blockquote>
<p>stopAll:清除动画队列,默认为false,即仅停止活动的动画,允许任何排入队列的动画向后执行<br>goToEnd: 是否立即完成当前动画,默认为false<br><code>$(selector).stop(stopAll, goToEnd)</code></p>
</blockquote>
<h3 id="6-方法链接"><a href="#6-方法链接" class="headerlink" title="6. 方法链接"></a>6. 方法链接</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#p1"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>).slideUp(<span class="number">2000</span>).slideDown(<span class="number">2000</span>);</div></pre></td></tr></table></figure>
<h2 id="四-HTML"><a href="#四-HTML" class="headerlink" title="四. HTML"></a>四. HTML</h2><h3 id="1-获取内容-amp-属性"><a href="#1-获取内容-amp-属性" class="headerlink" title="1. 获取内容&amp;属性"></a>1. 获取内容&amp;属性</h3><p><code>text()</code>: 获取元素的文本内容<br><code>html()</code>: 获取元素的内容,包含html标记<br><code>val()</code>: 获取表单字段的值<br><code>attr()</code>: 获取属性值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  alert($(<span class="string">"#runoob"</span>).attr(<span class="string">"href"</span>));</div><div class="line">&#125;);</div><div class="line">$(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"#test1"</span>).text(<span class="string">"Hello world!"</span>);</div><div class="line">&#125;);</div><div class="line">$(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"#test2"</span>).html(<span class="string">"&lt;b&gt;Hello world!&lt;/b&gt;"</span>);</div><div class="line">&#125;);</div><div class="line">$(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"#test3"</span>).val(<span class="string">"RUNOOB"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="2-内容-amp-属性回调"><a href="#2-内容-amp-属性回调" class="headerlink" title="2. 内容&amp;属性回调"></a>2. 内容&amp;属性回调</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$(selector).text(<span class="function"><span class="keyword">function</span> (<span class="params">index, originText</span>) </span>&#123;</div><div class="line">	<span class="comment">/* body... */</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">$(selector).html(<span class="function"><span class="keyword">function</span> (<span class="params">index, originHtml</span>) </span>&#123;</div><div class="line">	<span class="comment">/* body... */</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">"#runoob"</span>).attr(<span class="string">"href"</span>,<span class="string">"http://www.runoob.com/jquery"</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">"#runoob"</span>).attr(<span class="string">"href"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">i,origValue</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> origValue + <span class="string">"/jquery"</span>; </div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="3-添加元素"><a href="#3-添加元素" class="headerlink" title="3. 添加元素"></a>3. 添加元素</h3><blockquote>
<p>append : 在元素结尾插入内容</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"ol"</span>).append(<span class="string">"&lt;li&gt;追加列表项&lt;/li&gt;"</span>);</div><div class="line">$(<span class="string">"p"</span>).append(<span class="string">" &lt;b&gt;追加文本&lt;/b&gt;。"</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>prepend(): 在元素开头插入内容[与append相反]<br><code>after()</code>: 在被选元素之后插入内容<br><code>before()</code>: 在被选元素之前插入内容<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// before()</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendText</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> txt1 = <span class="string">'&lt;p&gt; 文本&lt;/p&gt;'</span>  <span class="comment">// 使用html标签创建文本</span></div><div class="line">            <span class="keyword">var</span> txt2 = $(<span class="string">'&lt;p&gt;&lt;/p&gt;'</span>).text(<span class="string">'文本'</span>) <span class="comment">// 使用jquery创建文本</span></div><div class="line">            <span class="keyword">var</span> txt3 = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>)</div><div class="line">            txt3.innerHTML = <span class="string">'文本'</span> <span class="comment">// 使用Dom创建文本</span></div><div class="line">            $(<span class="string">'body'</span>).append(txt1, txt2, txt3)</div><div class="line">        &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">afterText</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> txt1=<span class="string">"&lt;b&gt;I &lt;/b&gt;"</span>;                    <span class="comment">// 使用 HTML 创建元素</span></div><div class="line">    <span class="keyword">var</span> txt2=$(<span class="string">"&lt;i&gt;&lt;/i&gt;"</span>).text(<span class="string">"love "</span>);     <span class="comment">// 使用 jQuery 创建元素</span></div><div class="line">    <span class="keyword">var</span> txt3=<span class="built_in">document</span>.createElement(<span class="string">"big"</span>);  <span class="comment">// 使用 DOM 创建元素</span></div><div class="line">    txt3.innerHTML=<span class="string">"jQuery!"</span>;</div><div class="line">    $(<span class="string">"img"</span>).after(txt1,txt2,txt3);          <span class="comment">// 在图片后添加文本</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="4-删除元素"><a href="#4-删除元素" class="headerlink" title="4. 删除元素"></a>4. 删除元素</h3><p><code>remove</code>: 删除被选元素及其子元素<br><code>empty</code>: 从被选元素中删除子元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 移除class='italic'的元素</span></div><div class="line"> $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"p"</span>).remove(<span class="string">".italic"</span>);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<h2 id="五-CSS"><a href="#五-CSS" class="headerlink" title="五. CSS"></a>五. CSS</h2><ol>
<li><p><code>addClass</code>: 添加类属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">"h1,h2,p"</span>).addClass(<span class="string">"blue"</span>);</div><div class="line">  $(<span class="string">"div"</span>).addClass(<span class="string">"important blue"</span>); <span class="comment">// 添加多个类</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p><code>removeClass</code>: 删除类属性</p>
</li>
<li><p><code>toggleClass</code>: 有则添加,无则删除</p>
</li>
<li><p><code>css(&quot;propertyname&quot;)</code>: 返回首个匹配元素的属性值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"p"</span>).css(<span class="string">"background-color"</span>);</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>设置css属性<br><code>css(&#39;propertyname&#39;, &#39;value&#39;)</code>: 为所有匹配元素设置属性值<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"p"</span>).css(<span class="string">"background-color"</span>,<span class="string">"yellow"</span>);</div><div class="line">$(<span class="string">'p'</span>).css(&#123;</div><div class="line">				<span class="string">'background-color'</span>:<span class="string">'yellow'</span>,</div><div class="line">				<span class="string">'font-size'</span>:<span class="string">'200%'</span></div><div class="line">			&#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="六-遍历"><a href="#六-遍历" class="headerlink" title="六. 遍历"></a>六. 遍历</h2><h3 id="1-向上遍历"><a href="#1-向上遍历" class="headerlink" title="1. 向上遍历:"></a>1. 向上遍历:</h3><p><code>parent</code>: 返回被选元素的父元素<br><code>parents</code>: 返回所有父元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">"span"</span>).parents(<span class="string">"ul"</span>); <span class="comment">// 过滤父元素为ul</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><code>parentsUntil</code>: 介于parent与until两个元素之间的元素,不包含util到的元素</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"span"</span>).parentsUntil(<span class="string">"div"</span>); <span class="comment">// 到div,但不包含div</span></div></pre></td></tr></table></figure>
<h3 id="2-向下遍历"><a href="#2-向下遍历" class="headerlink" title="2. 向下遍历"></a>2. 向下遍历</h3><p> <code>children</code>: 只会向下遍历一层,可设置过滤条件</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 通过.语法设置过滤条件</span></div><div class="line">  $(<span class="string">"div"</span>).children(<span class="string">"p.1"</span>).css(&#123;<span class="string">"color"</span>:<span class="string">"red"</span>,<span class="string">"border"</span>:<span class="string">"2px solid red"</span>&#125;);</div></pre></td></tr></table></figure>
<p> <code>find</code>: 向下层层遍历<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).find(<span class="string">"span"</span>);</div><div class="line">$(<span class="string">"div"</span>).find(<span class="string">"*"</span>);</div></pre></td></tr></table></figure></p>
<h3 id="3-同级遍历"><a href="#3-同级遍历" class="headerlink" title="3. 同级遍历:"></a>3. 同级遍历:</h3><p><code>siblings</code>(‘过滤和条件’): 返回所有同级元素</p>
<p><code>nextAll()</code>: 返回被选元素正方的所有同级元素</p>
<p><code>nextUntil()</code> : 返回两个参数间的同级元素</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"h2"</span>).nextUntil(<span class="string">"h6"</span>) <span class="comment">// 不包含h2与h6</span></div></pre></td></tr></table></figure>
<p><code>prev()</code>: == siblings()<br><code>prevAll()</code><br><code>prevUntil()</code></p>
<h3 id="4-过滤"><a href="#4-过滤" class="headerlink" title="4. 过滤:"></a>4. 过滤:</h3><p><code>first</code>: 返回被选元素的首个元素<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div p"</span>).first()</div></pre></td></tr></table></figure></p>
<p><code>last</code>: 返回被选元素的最后一个元素</p>
<p> <code>eq()</code>: 返回被选元素中带有指定索引号的元素<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"p"</span>).eq(<span class="number">1</span>) <span class="comment">// 选取第二个&lt;p&gt;元素[从0开始]</span></div></pre></td></tr></table></figure></p>
<p> <code>filter()</code>: 返回所有匹配的元素<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'p'</span>).filter(<span class="string">'.url'</span>)</div></pre></td></tr></table></figure></p>
<p> <code>not()</code>: 返回不匹配条件的元素</p>
<h3 id="七-AJAX-Asynchronous-JavaScript-and-XML"><a href="#七-AJAX-Asynchronous-JavaScript-and-XML" class="headerlink" title="七. AJAX[ Asynchronous JavaScript and XML]"></a>七. AJAX[ Asynchronous JavaScript and XML]</h3><p>  最开始听到这个名字还是老大提起的,只是觉得这个名字太过怪异,那时还不知晓原英文缩写是这个</p>
<blockquote>
<p>在不重载整个网页的情况下,通过异步,在后台进行数据的加载</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-元素&quot;&gt;&lt;a href=&quot;#一-元素&quot; class=&quot;headerlink&quot; title=&quot;一. 元素&quot;&gt;&lt;/a&gt;一. 元素&lt;/h2&gt;&lt;p&gt;&lt;code&gt;$(&amp;#39;*&amp;#39;)&lt;/code&gt;: 选取所有元素&lt;br&gt;&lt;code&gt;$(&amp;#39;p:first&amp;
    
    </summary>
    
    
      <category term="javascript" scheme="https://neareven.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>node.js Stream</title>
    <link href="https://neareven.github.io/2017/07/21/29-node.js-wechat/"/>
    <id>https://neareven.github.io/2017/07/21/29-node.js-wechat/</id>
    <published>2017-07-21T04:40:00.000Z</published>
    <updated>2017-07-21T08:39:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>明日将与女友一起去连云之港,颇为期待ing..</p>
<h2 id="一-Buffer数据流的写入与读取"><a href="#一-Buffer数据流的写入与读取" class="headerlink" title="一. Buffer数据流的写入与读取"></a>一. Buffer数据流的写入与读取</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 读取文件</span></div><div class="line">fs.readFile(<span class="string">'logo.png'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, origin_buffer</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(Buffer.isBuffer(origin_buffer))</div><div class="line"></div><div class="line"><span class="comment">// 将读取的数据流写入png中</span></div><div class="line">	fs.writeFile(<span class="string">'logo_buffer.png'</span>, origin_buffer, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (err) &#123;</div><div class="line">			<span class="built_in">console</span>.log(err)</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	<span class="comment">// 数据流转换为64位字符串</span></div><div class="line">	<span class="keyword">var</span> base64Image = origin_buffer.toString(<span class="string">'base64'</span>)</div><div class="line">	<span class="built_in">console</span>.log(base64Image)</div><div class="line"></div><div class="line">	<span class="keyword">var</span> decodedImage = <span class="keyword">new</span> Buffer(base64Image, <span class="string">'base64'</span>)</div><div class="line">	<span class="built_in">console</span>.log(Buffer.compare(origin_buffer, decodedImage))</div><div class="line">	fs.writeFile(<span class="string">'logo_decodedImage.png'</span>, decodedImage, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(err)</div><div class="line">	&#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="二-Stream"><a href="#二-Stream" class="headerlink" title="二. Stream"></a>二. Stream</h2><h3 id="1-读取写入操作"><a href="#1-读取写入操作" class="headerlink" title="1. 读取写入操作"></a>1. 读取写入操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> source = fs.readFileSync(<span class="string">'./logo.png'</span>);</div><div class="line"></div><div class="line">fs.writeFileSync(<span class="string">'stream_logo.png'</span>, source);</div></pre></td></tr></table></figure>
<h3 id="2-监听读取写入时机"><a href="#2-监听读取写入时机" class="headerlink" title="2. 监听读取写入时机"></a>2. 监听读取写入时机</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="keyword">var</span> readStream = fs.createReadStream(<span class="string">'1.rar'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> n = <span class="number">0</span></div><div class="line"></div><div class="line">readStream</div><div class="line">.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123; <span class="comment">// 数据正在传递</span></div><div class="line">	n++</div><div class="line">	readStream.pause()</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'data pause'</span>)</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'data pause end'</span>)</div><div class="line">		readStream.resume()</div><div class="line">	&#125;, <span class="number">10</span>)</div><div class="line"></div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'data emits'</span>)</div><div class="line">	<span class="built_in">console</span>.log(Buffer.isBuffer(chunk))  </div><div class="line"></div><div class="line">	<span class="comment">// console.log(chunk.toString('utf8')) // stream.js内容</span></div><div class="line">&#125;)</div><div class="line">.on(<span class="string">'readable'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 事件可读</span></div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'data readable'</span>)</div><div class="line">&#125;)</div><div class="line">.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(n)</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'data end'</span>)</div><div class="line">&#125;)</div><div class="line">.on(<span class="string">'close'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 流关闭结束</span></div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'data close'</span>)</div><div class="line">&#125;)</div><div class="line">.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'data read error'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="3-读取写入防爆仓"><a href="#3-读取写入防爆仓" class="headerlink" title="3. 读取写入防爆仓"></a>3. 读取写入防爆仓</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> readStream = fs.createReadStream(<span class="string">'1.rar'</span>)</div><div class="line"><span class="keyword">var</span> writeStream = fs.WriteStream(<span class="string">'1-stream.rar'</span>)</div><div class="line"></div><div class="line">readStream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span>	(writeStream.write(chunk) === <span class="literal">false</span>)&#123; <span class="comment">// 读的数据还在缓存区</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'still cached'</span>)</div><div class="line">readStream.pause()</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	writeStream.end()</div><div class="line">&#125;)</div><div class="line"></div><div class="line">writeStream.on(<span class="string">'drain'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'data drains'</span>)</div><div class="line">	readStream.resume()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="4-pipe监听事件"><a href="#4-pipe监听事件" class="headerlink" title="4.pipe监听事件"></a>4.pipe监听事件</h3><ul>
<li>Readable: 可读流,外部的数据被读取并被缓存起来[pasue, resume]</li>
<li>Writable: 可写流,用来消费数据</li>
<li>Duplex: r &amp; w : 双攻流</li>
<li>Transform: 与Duplex类似: 转化流</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</div><div class="line">	<span class="comment">// 文件读入到内存中</span></div><div class="line">	<span class="comment">// fs.readFile('./logo.png', function (err, data) &#123;</span></div><div class="line">	<span class="comment">// 	if (err) &#123;</span></div><div class="line">	<span class="comment">// 		res.send('file not exists')</span></div><div class="line">	<span class="comment">// 	&#125;else&#123;</span></div><div class="line">	<span class="comment">// 		res.writeHeader(200, &#123;'Content-Type':'text/html'&#125;)</span></div><div class="line">	<span class="comment">// 		res.end(data)</span></div><div class="line">	<span class="comment">// 	&#125;</span></div><div class="line">	<span class="comment">// &#125;)</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// pipe会自动监听stream事件</span></div><div class="line">	fs.createReadStream(<span class="string">'stream.js'</span>).pipe(res);</div><div class="line">request(<span class="string">'http://www.imooc.com/static/img/common/coupon-icon.png'</span>).pipe(res)</div><div class="line"></div><div class="line">&#125;).listen(<span class="number">3000</span>)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line">fs.createReadStream(<span class="string">'./1.rar'</span>).pipe(fs.createWriteStream(<span class="string">'1-pipe.rar'</span>))</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Readable = <span class="built_in">require</span>(<span class="string">'stream'</span>).Readable</div><div class="line"><span class="keyword">var</span> Writable = <span class="built_in">require</span>(<span class="string">'stream'</span>).Writable</div><div class="line"></div><div class="line"><span class="keyword">var</span> readStream = <span class="keyword">new</span> Readable()</div><div class="line"><span class="keyword">var</span> writStream = <span class="keyword">new</span> Writable()</div><div class="line"></div><div class="line">readStream.push(<span class="string">'I '</span>)</div><div class="line">readStream.push(<span class="string">'love '</span>)</div><div class="line">readStream.push(<span class="string">'coding '</span>)</div><div class="line">readStream.push(<span class="literal">null</span>) <span class="comment">// 告诉可读流读取完毕</span></div><div class="line"></div><div class="line"></div><div class="line">writStream._write = <span class="function"><span class="keyword">function</span> (<span class="params">chunk, encode, cb</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(chunk.toString())</div><div class="line">	cb()</div><div class="line">&#125;</div><div class="line"></div><div class="line">readStream.pipe(writStream)</div></pre></td></tr></table></figure>
<h3 id="5-自定义stream"><a href="#5-自定义stream" class="headerlink" title="5. 自定义stream"></a>5. 自定义stream</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stream = <span class="built_in">require</span>(<span class="string">'stream'</span>)</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReadStream</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    stream.Readable.call(<span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">util.inherits(ReadStream, stream.Readable)</div><div class="line"></div><div class="line"><span class="comment">// _read为私有变量</span></div><div class="line">ReadStream.prototype._read = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.push(<span class="string">'I '</span>)</div><div class="line">	<span class="keyword">this</span>.push(<span class="string">'love '</span>)</div><div class="line">	<span class="keyword">this</span>.push(<span class="string">'coding '</span>)</div><div class="line">	<span class="keyword">this</span>.push(<span class="literal">null</span>) <span class="comment">// 告诉可读流读取完毕 </span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">WriteStream</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	stream.Writable.call(<span class="keyword">this</span>)</div><div class="line">	<span class="keyword">this</span>._cached = <span class="keyword">new</span> Buffer(<span class="string">''</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">util.inherits(WriteStream, stream.Writable)</div><div class="line"></div><div class="line">WriteStream.prototype._write = <span class="function"><span class="keyword">function</span> (<span class="params">chunk, encode, cb</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(chunk.toString())</div><div class="line">	cb()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">TransformStream</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	stream.Transform.call(<span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">util.inherits(TransformStream, stream.Transform)</div><div class="line"></div><div class="line">TransformStream.prototype._transform = <span class="function"><span class="keyword">function</span> (<span class="params">chunk, encode, cb</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(chunk.toString())</div><div class="line">	cb()</div><div class="line">&#125;</div><div class="line"></div><div class="line">TransformStream.prototype._flush = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.push(<span class="string">'oh yeah'</span>)</div><div class="line">	cb()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> rs = <span class="keyword">new</span> ReadStream()</div><div class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WriteStream()</div><div class="line"><span class="keyword">var</span> ts = <span class="keyword">new</span> TransformStream()</div><div class="line"></div><div class="line">rs.pipe(ts).pipe(ws)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;明日将与女友一起去连云之港,颇为期待ing..&lt;/p&gt;
&lt;h2 id=&quot;一-Buffer数据流的写入与读取&quot;&gt;&lt;a href=&quot;#一-Buffer数据流的写入与读取&quot; class=&quot;headerlink&quot; title=&quot;一. Buffer数据流的写入与读取&quot;&gt;&lt;/a&gt;一. 
    
    </summary>
    
    
      <category term="node.js" scheme="https://neareven.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>node.js Stream</title>
    <link href="https://neareven.github.io/2017/07/21/28-node.js-stream/"/>
    <id>https://neareven.github.io/2017/07/21/28-node.js-stream/</id>
    <published>2017-07-21T04:40:00.000Z</published>
    <updated>2017-07-21T08:39:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>明日将与女友一起去连云之港,颇为期待ing..</p>
<h2 id="一-Buffer数据流的写入与读取"><a href="#一-Buffer数据流的写入与读取" class="headerlink" title="一. Buffer数据流的写入与读取"></a>一. Buffer数据流的写入与读取</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 读取文件</span></div><div class="line">fs.readFile(<span class="string">'logo.png'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, origin_buffer</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(Buffer.isBuffer(origin_buffer))</div><div class="line"></div><div class="line"><span class="comment">// 将读取的数据流写入png中</span></div><div class="line">	fs.writeFile(<span class="string">'logo_buffer.png'</span>, origin_buffer, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (err) &#123;</div><div class="line">			<span class="built_in">console</span>.log(err)</div><div class="line">		&#125;</div><div class="line">	&#125;)</div><div class="line"></div><div class="line">	<span class="comment">// 数据流转换为64位字符串</span></div><div class="line">	<span class="keyword">var</span> base64Image = origin_buffer.toString(<span class="string">'base64'</span>)</div><div class="line">	<span class="built_in">console</span>.log(base64Image)</div><div class="line"></div><div class="line">	<span class="keyword">var</span> decodedImage = <span class="keyword">new</span> Buffer(base64Image, <span class="string">'base64'</span>)</div><div class="line">	<span class="built_in">console</span>.log(Buffer.compare(origin_buffer, decodedImage))</div><div class="line">	fs.writeFile(<span class="string">'logo_decodedImage.png'</span>, decodedImage, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(err)</div><div class="line">	&#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="二-Stream"><a href="#二-Stream" class="headerlink" title="二. Stream"></a>二. Stream</h2><h3 id="1-读取写入操作"><a href="#1-读取写入操作" class="headerlink" title="1. 读取写入操作"></a>1. 读取写入操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> source = fs.readFileSync(<span class="string">'./logo.png'</span>);</div><div class="line"></div><div class="line">fs.writeFileSync(<span class="string">'stream_logo.png'</span>, source);</div></pre></td></tr></table></figure>
<h3 id="2-监听读取写入时机"><a href="#2-监听读取写入时机" class="headerlink" title="2. 监听读取写入时机"></a>2. 监听读取写入时机</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="keyword">var</span> readStream = fs.createReadStream(<span class="string">'1.rar'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> n = <span class="number">0</span></div><div class="line"></div><div class="line">readStream</div><div class="line">.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123; <span class="comment">// 数据正在传递</span></div><div class="line">	n++</div><div class="line">	readStream.pause()</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'data pause'</span>)</div><div class="line">	setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'data pause end'</span>)</div><div class="line">		readStream.resume()</div><div class="line">	&#125;, <span class="number">10</span>)</div><div class="line"></div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'data emits'</span>)</div><div class="line">	<span class="built_in">console</span>.log(Buffer.isBuffer(chunk))  </div><div class="line"></div><div class="line">	<span class="comment">// console.log(chunk.toString('utf8')) // stream.js内容</span></div><div class="line">&#125;)</div><div class="line">.on(<span class="string">'readable'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 事件可读</span></div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'data readable'</span>)</div><div class="line">&#125;)</div><div class="line">.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(n)</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'data end'</span>)</div><div class="line">&#125;)</div><div class="line">.on(<span class="string">'close'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 流关闭结束</span></div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'data close'</span>)</div><div class="line">&#125;)</div><div class="line">.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'data read error'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="3-读取写入防爆仓"><a href="#3-读取写入防爆仓" class="headerlink" title="3. 读取写入防爆仓"></a>3. 读取写入防爆仓</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> readStream = fs.createReadStream(<span class="string">'1.rar'</span>)</div><div class="line"><span class="keyword">var</span> writeStream = fs.WriteStream(<span class="string">'1-stream.rar'</span>)</div><div class="line"></div><div class="line">readStream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</div><div class="line"><span class="keyword">if</span>	(writeStream.write(chunk) === <span class="literal">false</span>)&#123; <span class="comment">// 读的数据还在缓存区</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'still cached'</span>)</div><div class="line">readStream.pause()</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line">.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	writeStream.end()</div><div class="line">&#125;)</div><div class="line"></div><div class="line">writeStream.on(<span class="string">'drain'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'data drains'</span>)</div><div class="line">	readStream.resume()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="4-pipe监听事件"><a href="#4-pipe监听事件" class="headerlink" title="4.pipe监听事件"></a>4.pipe监听事件</h3><ul>
<li>Readable: 可读流,外部的数据被读取并被缓存起来[pasue, resume]</li>
<li>Writable: 可写流,用来消费数据</li>
<li>Duplex: r &amp; w : 双攻流</li>
<li>Transform: 与Duplex类似: 转化流</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</div><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</div><div class="line">	<span class="comment">// 文件读入到内存中</span></div><div class="line">	<span class="comment">// fs.readFile('./logo.png', function (err, data) &#123;</span></div><div class="line">	<span class="comment">// 	if (err) &#123;</span></div><div class="line">	<span class="comment">// 		res.send('file not exists')</span></div><div class="line">	<span class="comment">// 	&#125;else&#123;</span></div><div class="line">	<span class="comment">// 		res.writeHeader(200, &#123;'Content-Type':'text/html'&#125;)</span></div><div class="line">	<span class="comment">// 		res.end(data)</span></div><div class="line">	<span class="comment">// 	&#125;</span></div><div class="line">	<span class="comment">// &#125;)</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// pipe会自动监听stream事件</span></div><div class="line">	fs.createReadStream(<span class="string">'stream.js'</span>).pipe(res);</div><div class="line">request(<span class="string">'http://www.imooc.com/static/img/common/coupon-icon.png'</span>).pipe(res)</div><div class="line"></div><div class="line">&#125;).listen(<span class="number">3000</span>)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line">fs.createReadStream(<span class="string">'./1.rar'</span>).pipe(fs.createWriteStream(<span class="string">'1-pipe.rar'</span>))</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Readable = <span class="built_in">require</span>(<span class="string">'stream'</span>).Readable</div><div class="line"><span class="keyword">var</span> Writable = <span class="built_in">require</span>(<span class="string">'stream'</span>).Writable</div><div class="line"></div><div class="line"><span class="keyword">var</span> readStream = <span class="keyword">new</span> Readable()</div><div class="line"><span class="keyword">var</span> writStream = <span class="keyword">new</span> Writable()</div><div class="line"></div><div class="line">readStream.push(<span class="string">'I '</span>)</div><div class="line">readStream.push(<span class="string">'love '</span>)</div><div class="line">readStream.push(<span class="string">'coding '</span>)</div><div class="line">readStream.push(<span class="literal">null</span>) <span class="comment">// 告诉可读流读取完毕</span></div><div class="line"></div><div class="line"></div><div class="line">writStream._write = <span class="function"><span class="keyword">function</span> (<span class="params">chunk, encode, cb</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(chunk.toString())</div><div class="line">	cb()</div><div class="line">&#125;</div><div class="line"></div><div class="line">readStream.pipe(writStream)</div></pre></td></tr></table></figure>
<h3 id="5-自定义stream"><a href="#5-自定义stream" class="headerlink" title="5. 自定义stream"></a>5. 自定义stream</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stream = <span class="built_in">require</span>(<span class="string">'stream'</span>)</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReadStream</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    stream.Readable.call(<span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">util.inherits(ReadStream, stream.Readable)</div><div class="line"></div><div class="line"><span class="comment">// _read为私有变量</span></div><div class="line">ReadStream.prototype._read = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.push(<span class="string">'I '</span>)</div><div class="line">	<span class="keyword">this</span>.push(<span class="string">'love '</span>)</div><div class="line">	<span class="keyword">this</span>.push(<span class="string">'coding '</span>)</div><div class="line">	<span class="keyword">this</span>.push(<span class="literal">null</span>) <span class="comment">// 告诉可读流读取完毕 </span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">WriteStream</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	stream.Writable.call(<span class="keyword">this</span>)</div><div class="line">	<span class="keyword">this</span>._cached = <span class="keyword">new</span> Buffer(<span class="string">''</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">util.inherits(WriteStream, stream.Writable)</div><div class="line"></div><div class="line">WriteStream.prototype._write = <span class="function"><span class="keyword">function</span> (<span class="params">chunk, encode, cb</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(chunk.toString())</div><div class="line">	cb()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">TransformStream</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	stream.Transform.call(<span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">util.inherits(TransformStream, stream.Transform)</div><div class="line"></div><div class="line">TransformStream.prototype._transform = <span class="function"><span class="keyword">function</span> (<span class="params">chunk, encode, cb</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(chunk.toString())</div><div class="line">	cb()</div><div class="line">&#125;</div><div class="line"></div><div class="line">TransformStream.prototype._flush = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.push(<span class="string">'oh yeah'</span>)</div><div class="line">	cb()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> rs = <span class="keyword">new</span> ReadStream()</div><div class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WriteStream()</div><div class="line"><span class="keyword">var</span> ts = <span class="keyword">new</span> TransformStream()</div><div class="line"></div><div class="line">rs.pipe(ts).pipe(ws)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;明日将与女友一起去连云之港,颇为期待ing..&lt;/p&gt;
&lt;h2 id=&quot;一-Buffer数据流的写入与读取&quot;&gt;&lt;a href=&quot;#一-Buffer数据流的写入与读取&quot; class=&quot;headerlink&quot; title=&quot;一. Buffer数据流的写入与读取&quot;&gt;&lt;/a&gt;一. 
    
    </summary>
    
    
      <category term="node.js" scheme="https://neareven.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>node.js 上传评论内容</title>
    <link href="https://neareven.github.io/2017/07/20/27-node.js%20comment/"/>
    <id>https://neareven.github.io/2017/07/20/27-node.js comment/</id>
    <published>2017-07-20T10:57:00.000Z</published>
    <updated>2017-07-20T08:47:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://orvnx1k8y.bkt.clouddn.com/2017-07-20-15005394443873.jpg" alt=""></p>
<ol>
<li>Chrome浏览器中,打开<a href="https://juejin.im/post/59702bf36fb9a06bc23ac717?utm_source=gold_browser_extension" target="_blank" rel="external">掘金评论地址:</a>,右键-检查,选中Network<br><img src="http://orvnx1k8y.bkt.clouddn.com/2017-07-20-15005396956966.jpg" alt=""></li>
<li>此时当我们提交评论内容时,右边会多出<code>commnent</code>选项,点击comment,图示中的headrs与formData正是我们与服务器交互所需的内容<br><img src="http://orvnx1k8y.bkt.clouddn.com/2017-07-20-15005398308296.jpg" alt="comment"></li>
</ol>
<p><img src="http://orvnx1k8y.bkt.clouddn.com/2017-07-20-15005400073225.jpg" alt=""></p>
<ol>
<li>从<code>General-RequestUrl</code>中获取我们所需的host与path路径,从<code>ResponseHeaders</code>中获取headers, 从<code>formData</code>中获取我们所要提交的内容</li>
</ol>
<blockquote>
<p>注意事项: </p>
<pre><code>1. http端口号:80  https端口号: 443
2. headrs中Content-Length的长度应为我们所要上传的内容长度
</code></pre></blockquote>
<h2 id="codeShow"><a href="#codeShow" class="headerlink" title="codeShow"></a>codeShow</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>)</div><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> postData = querystring.stringify(&#123;</div><div class="line">    <span class="string">'respUser'</span>: <span class="string">'5948e562ac502e5490ee6064'</span>,</div><div class="line">    <span class="string">'targetId'</span>: <span class="string">'597045686fb9a06b9d5baaf4'</span>,</div><div class="line">    <span class="string">'targetType'</span>: <span class="string">'entry'</span>,</div><div class="line">    <span class="string">'content'</span>: <span class="string">'nodejs评论测试'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> options = &#123;</div><div class="line">    <span class="attr">hostname</span>: <span class="string">'comment-wrapper-ms.juejin.im'</span>,</div><div class="line">    <span class="attr">port</span>: <span class="number">443</span>, <span class="comment">// http 为80, https为443</span></div><div class="line">    path: <span class="string">'/v1/comment'</span>,</div><div class="line">    <span class="attr">method</span>: <span class="string">'POST'</span>,</div><div class="line">    <span class="attr">headers</span>: &#123;</div><div class="line">        <span class="string">'Accept'</span>: <span class="string">'*/*'</span>,</div><div class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</div><div class="line">        <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8,en;q=0.6'</span>,</div><div class="line">        <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</div><div class="line">        <span class="string">'Content-Length'</span>: postData.length, <span class="comment">// 注意内容长度</span></div><div class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</div><div class="line">        <span class="string">'Host'</span>: <span class="string">'comment-wrapper-ms.juejin.im'</span>,</div><div class="line">        <span class="string">'Origin'</span>: <span class="string">'https://juejin.im'</span>,</div><div class="line">        <span class="string">'Referer'</span>: <span class="string">'https://juejin.im/post/59702bf36fb9a06bc23ac717?utm_source=gold_browser_extension'</span>,</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'</span>,</div><div class="line">        <span class="string">'X-Juejin-Client'</span>: <span class="string">'1500439077259'</span>,</div><div class="line">        <span class="string">'X-Juejin-Src'</span>: <span class="string">'web'</span>,</div><div class="line">        <span class="string">'X-Juejin-Token'</span>: <span class="string">'eyJhY2Nlc3NfdG9rZW4iOiIwYnIyT0Rhb3R2YlBrMUExIiwicmVmcmVzaF90b2tlbiI6IjVmUGRrM25LNWs4Q0U1c20iLCJ0b2tlbl90eXBlIjoibWFjIiwiZXhwaXJlX2luIjo2MDQ4MDB9'</span>,</div><div class="line">        <span class="string">'X-Juejin-Uid'</span>: <span class="string">'596ee2256fb9a06ba5199d5a'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> req = https.request(options, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'status: '</span> + res.statusCode);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'headers: '</span> + <span class="built_in">JSON</span>.stringify(res.headers))</div><div class="line"></div><div class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> chunk)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'评论完毕'</span>)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    res.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'error: '</span> + error.message)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">req.write(postData)</div><div class="line">req.end()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://orvnx1k8y.bkt.clouddn.com/2017-07-20-15005394443873.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Chrome浏览器中,打开&lt;a href=&quot;https://juejin.im/po
    
    </summary>
    
    
      <category term="node.js" scheme="https://neareven.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>node.js EventEmitter</title>
    <link href="https://neareven.github.io/2017/07/20/26-node.js-eventemitter/"/>
    <id>https://neareven.github.io/2017/07/20/26-node.js-eventemitter/</id>
    <published>2017-07-20T04:57:00.000Z</published>
    <updated>2017-07-20T07:32:29.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter</div><div class="line"><span class="keyword">var</span> life = <span class="keyword">new</span> EventEmitter()</div></pre></td></tr></table></figure>
<h3 id="1-addEventListener"><a href="#1-addEventListener" class="headerlink" title="1. addEventListener"></a>1. addEventListener</h3><ul>
<li>maxListeners: 默认添加10件</li>
<li>设置最大监听事件: life.setMaxListeners(11)</li>
</ul>
<h3 id="2-设置监听事件"><a href="#2-设置监听事件" class="headerlink" title="2. 设置监听事件"></a>2. 设置监听事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setListener</span> (<span class="params">thing</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">`给 listener添加监听 <span class="subst">$&#123;thing&#125;</span>`</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">life.on(<span class="string">'listener'</span>, setListener)</div><div class="line"></div><div class="line">life.on(<span class="string">'listener'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">repeat</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">`重复监听 <span class="subst">$&#123;repeat&#125;</span>`</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">life.on(<span class="string">'listener'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">multi</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'设置多个事件'</span> + multi)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">life.on(<span class="string">'listener1'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">who</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'添加另外一个监听事件'</span> + who)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="3-添加监听"><a href="#3-添加监听" class="headerlink" title="3. 添加监听"></a>3. 添加监听</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">life.emit(<span class="string">'listener'</span>,<span class="string">'success'</span>)</div><div class="line">life.emit(<span class="string">'listener1'</span>, <span class="string">'success'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 给 listener添加监听 success</span></div><div class="line"><span class="comment">// 重复监听 success</span></div><div class="line"><span class="comment">// 设置多个事件success</span></div></pre></td></tr></table></figure>
<h3 id="4-判断监听事件数量"><a href="#4-判断监听事件数量" class="headerlink" title="4. 判断监听事件数量"></a>4. 判断监听事件数量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(life.listeners(<span class="string">'listener'</span>).length) <span class="comment">// 3</span></div><div class="line"><span class="built_in">console</span>.log(EventEmitter.listenerCount(life,<span class="string">'listener'</span>)) <span class="comment">//3</span></div></pre></td></tr></table></figure>
<h3 id="5-判断是否添加监听"><a href="#5-判断是否添加监听" class="headerlink" title="5. 判断是否添加监听"></a>5. 判断是否添加监听</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> boolListener = life.emit(<span class="string">'hi'</span>, <span class="string">'success'</span>) </div><div class="line"><span class="built_in">console</span>.log(boolListener)  <span class="comment">// false, 没有被监听</span></div></pre></td></tr></table></figure>
<h3 id="6-删除监听-在emit之前将on-事件删除-且函数要显式声明"><a href="#6-删除监听-在emit之前将on-事件删除-且函数要显式声明" class="headerlink" title="6. 删除监听[在emit之前将on 事件删除,且函数要显式声明]"></a>6. 删除监听[在emit之前将on 事件删除,且函数要显式声明]</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">life.removeListener(<span class="string">'listener'</span>, setListener);</div><div class="line">life.removeAllListeners(<span class="string">'listener'</span>, setListener)</div><div class="line"><span class="built_in">console</span>.log(EventEmitter.listenerCount(<span class="string">'listener'</span>))</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code
    
    </summary>
    
    
      <category term="node.js" scheme="https://neareven.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript 6入门</title>
    <link href="https://neareven.github.io/2017/07/19/18-js/"/>
    <id>https://neareven.github.io/2017/07/19/18-js/</id>
    <published>2017-07-19T00:57:00.000Z</published>
    <updated>2017-07-19T06:13:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-let"><a href="#一-let" class="headerlink" title="一. let"></a>一. let</h2><ul>
<li>let 所声明的变量,只在let命令所在的代码块有效</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    &#123;</div><div class="line">	<span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">	<span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(b);</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//error, a isn't defined;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> arr = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(i); <span class="comment">// undefined</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">	a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(i); <span class="comment">// 10</span></div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">a[<span class="number">6</span>](); </div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> b = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">	b[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(i); <span class="comment">//6</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">b[<span class="number">6</span>]();</div></pre></td></tr></table></figure>
<ul>
<li>在代码块内,let声明变量之前,该变量都不可用,称为<strong>暂时性死区</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> tmp = <span class="number">123</span>;</div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">	<span class="comment">// 虽然之前全局声明了一个tmp变量,只是此处的tmp被let绑定为块级作用域,所以在声明前对tmp赋值会报错</span></div><div class="line">	tmp = <span class="string">'abc'</span>; <span class="comment">// error </span></div><div class="line">	<span class="keyword">let</span> tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果区块中存在let与const命令,会自动形成封装作用域</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x=y,y=<span class="number">2</span></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> (x, y);</div><div class="line">&#125;</div><div class="line"><span class="comment">// x默认值等于y,而此时y还未声明,属于'死区'</span></div><div class="line">bar(); <span class="comment">// y is not defined</span></div></pre></td></tr></table></figure>
<ul>
<li>let 不允许重复声明(与oc类似)</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> arg;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// error: arg has already been declared</span></div><div class="line">func(<span class="number">1</span>);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">let</span> arg;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(func(<span class="number">1</span>));</div></pre></td></tr></table></figure>
<ul>
<li>块级作用域</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> n = <span class="number">5</span>;</div><div class="line">	<span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">		<span class="keyword">let</span> n = <span class="number">10</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(n);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 5</span></div><div class="line"><span class="comment">// 外层代码块不受内层代码块的影响</span></div><div class="line">f1();</div></pre></td></tr></table></figure>
<h2 id="二-const"><a href="#二-const" class="headerlink" title="二. const"></a>二. const</h2><ul>
<li>声明常量且声明后常量值不能改变</li>
<li>只在声明所在的块级作用域内有效</li>
<li>对const声明的常量赋新值不会报错</li>
<li>const不存在提升,只能在声明之后使用</li>
<li>不支持重复声明</li>
<li>const指向指针,指针指向的对象本身可以改变,但是指针自身不可变</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(MAX); <span class="comment">// ReferenceError</span></div><div class="line">  <span class="keyword">const</span> MAX = <span class="number">5</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> a = [];</div><div class="line">a.push(<span class="string">'node'</span>); <span class="comment">// true</span></div><div class="line">a.length = <span class="number">0</span>; <span class="comment">// true</span></div><div class="line"><span class="comment">// a指向的数组可写,但如果更改指针指向的地址则错误</span></div><div class="line">a = [<span class="string">'dave'</span>]; <span class="comment">// error, assignment to constant variable</span></div></pre></td></tr></table></figure>
<h3 id="三-解构赋值"><a href="#三-解构赋值" class="headerlink" title="三. 解构赋值"></a>三. 解构赋值</h3><ul>
<li>数组解构按次序排列,对象解构由属性名决定</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibs</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">		<span class="keyword">yield</span> a;</div><div class="line">		[a, b] = [b, a+b];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> [first, second,third,four] = fibs();</div><div class="line"><span class="built_in">console</span>.log([first,second,third,four]); <span class="comment">// [0, 1,1,2]</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;bar, foo&#125; = &#123;<span class="attr">foo</span>: <span class="string">'a'</span>, <span class="attr">bar</span>:<span class="string">'b'</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(&#123;bar,foo&#125;); <span class="comment">//&#123;bar:'b',foo:'a'&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;bzz&#125; = &#123;bar, foo&#125;;</div><div class="line"><span class="built_in">console</span>.log(bzz); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> &#123;x&#125; = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(x, &#123;x&#125;); <span class="comment">// 1, &#123;x:1&#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x;</div><div class="line">&#123;x&#125; = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;; <span class="comment">// error, &#123;x&#125;会被解析为代码块</span></div><div class="line"><span class="comment">// (&#123;x&#125; = &#123;x:1&#125;) // true</span></div></pre></td></tr></table></figure>
<ul>
<li>字符串赋值</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> [a,b,c,d,e,f] = <span class="string">'hello'</span>;</div><div class="line"><span class="built_in">console</span>.log(a,b,c,d,e,f)<span class="comment">//h e l l o undefined</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span>: len&#125; = <span class="string">'hello'</span>;</div><div class="line"><span class="built_in">console</span>.log(len, &#123;<span class="attr">length</span>:len&#125;) <span class="comment">// 5 &#123; length: 5 &#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span> (<span class="params">&#123;x=<span class="number">0</span>,y=<span class="number">1</span>&#125; = &#123;&#125;</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> [x,y];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(move(&#123;<span class="attr">x</span>:<span class="number">3</span>,<span class="attr">y</span>:<span class="number">8</span>&#125;))</div><div class="line"><span class="built_in">console</span>.log(move()) <span class="comment">// [0,1]</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> jsonData = &#123;</div><div class="line">	<span class="attr">id</span>: <span class="number">42</span>,</div><div class="line">	<span class="attr">status</span>: <span class="string">'OK'</span>,</div><div class="line">	<span class="attr">data</span>: [<span class="number">867</span>,<span class="number">5309</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123;id, status, <span class="attr">data</span>:number&#125; = jsonData;</div><div class="line"><span class="built_in">console</span>.log(id,status,number);<span class="comment">// 42 'OK' [ 867, 5309 ]</span></div></pre></td></tr></table></figure>
<ul>
<li>指定默认值</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> link = <span class="function"><span class="keyword">function</span> (<span class="params">height, color, url</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> height = height || <span class="number">50</span>;</div><div class="line">    <span class="keyword">var</span> color = color || <span class="string">'red'</span>;</div><div class="line">    <span class="keyword">var</span> url = url || <span class="string">'http://azat.co'</span>;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> link = <span class="function"><span class="keyword">function</span>(<span class="params">height = <span class="number">50</span>, color = <span class="string">'red'</span>, url = <span class="string">'http://azat.co'</span></span>) </span>&#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>for…of 循环遍历</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">map.set(<span class="string">'first'</span>,<span class="string">'hello'</span>);</div><div class="line">map.set(<span class="string">'second'</span>,<span class="string">'world'</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> map) &#123;</div><div class="line">	<span class="built_in">console</span>.log(key + <span class="string">" is "</span> + value); <span class="comment">// first is hello second is world</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [,value] <span class="keyword">of</span> map)&#123;</div><div class="line">	<span class="built_in">console</span>.log(value); <span class="comment">// hello   world</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>输入模块的指定方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class="built_in">require</span>(<span class="string">"source-map"</span>);</div></pre></td></tr></table></figure>
<h3 id="四-字符串-数值-数组-对象扩展"><a href="#四-字符串-数值-数组-对象扩展" class="headerlink" title="四. 字符串/数值/数组/对象扩展"></a>四. 字符串/数值/数组/对象扩展</h3><h4 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1. 字符串:"></a>1. 字符串:</h4><ul>
<li>字符串拼接: 用反引号 + ${string}</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">`Your name is <span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>. `</span>;</div><div class="line"><span class="comment">// 'Your name is ' + first + ' ' + last + '.';</span></div></pre></td></tr></table></figure>
<ul>
<li>多行字符串</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> roadPoem = <span class="string">`Then took the other, as just as fair,</span></div><div class="line">    And having perhaps the better claim</div><div class="line">    Because it was grassy and wanted wear,</div><div class="line">    Though as for that the passing there</div><div class="line">    Had worn them really about the same,`;</div></pre></td></tr></table></figure>
<ul>
<li>标签模板</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span> (<span class="params">s, v1, v2</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(s[<span class="number">0</span>],s[<span class="number">1</span>], v1,v2);</div><div class="line">	<span class="keyword">return</span> <span class="string">'ok'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">tag <span class="string">`Hello <span class="subst">$&#123; a + b&#125;</span> world <span class="subst">$&#123; a*b&#125;</span>`</span>; <span class="comment">// [ Hello   world  15 50</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> total = <span class="number">30</span>;</div><div class="line"><span class="keyword">var</span> msg = splice <span class="string">`the total is <span class="subst">$&#123;total&#125;</span> (<span class="subst">$&#123;total*<span class="number">1.05</span>&#125;</span> with tax)`</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">splice</span> (<span class="params">literals</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> result = <span class="string">''</span>;</div><div class="line">	<span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (i &lt; literals.length) &#123;</div><div class="line">		result += literals[i++];</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</div><div class="line">		<span class="comment">// &#123; '0': [ 'the total is ', ' (', ' with tax)' ],'1': 30, '2': 31.5 &#125;</span></div><div class="line">		<span class="keyword">if</span> (i &lt; <span class="built_in">arguments</span>.length) &#123;</div><div class="line">			result += <span class="built_in">arguments</span>[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 过滤html字符串</span></div><div class="line"><span class="keyword">var</span> message = safeHTML <span class="string">`&lt;p&gt;<span class="subst">$&#123;sender&#125;</span> has sent u a message.&lt;/p&gt;`</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">safeHTML</span>(<span class="params">templateData</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> s = templateData[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> arg = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="built_in">arguments</span>[i]);</div><div class="line"></div><div class="line">        s += arg.replace(<span class="regexp">/&amp;/g</span>, <span class="string">"&amp;amp;"</span>)</div><div class="line">            .replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>)</div><div class="line">            .replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>);</div><div class="line"></div><div class="line">        s += templateData[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-数组"><a href="#2-数组" class="headerlink" title="2. 数组:"></a>2. 数组:</h4><ul>
<li>Array.from</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.from(&#123;<span class="number">0</span>:<span class="string">"a"</span>, <span class="number">1</span>:<span class="string">"b"</span>, <span class="number">2</span>:<span class="string">"c"</span>, <span class="attr">length</span>:<span class="number">3</span>&#125;)</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ['a','b','c']</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</div><div class="line">	<span class="built_in">console</span>.log(args); <span class="comment">// [ 'a', 'b', 'c' ]</span></div><div class="line">	<span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">// &#123; '0': 'a', '1': 'b', '2': 'c' &#125;</span></div><div class="line">&#125;</div><div class="line">foo(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr =  <span class="built_in">Array</span>.from([<span class="number">1</span>,,<span class="number">2</span>,,<span class="number">3</span>], (n)=&gt; n || <span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">// [ 1, 0, 2, 0, 3 ]</span></div></pre></td></tr></table></figure>
<ul>
<li>Array.of()</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayOf</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> [].slice.call(<span class="built_in">arguments</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>,<span class="number">11</span>,<span class="number">8</span>) <span class="comment">// [3,11,8]</span></div></pre></td></tr></table></figure>
<ul>
<li>find: 找到第一个符合条件的数组成员</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> found = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>,<span class="number">10</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &gt; <span class="number">1</span>);</div><div class="line"><span class="built_in">console</span>.log(found); <span class="comment">// 4</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>].find(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,arr</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(value,index,arr); <span class="comment">// 1 0 [ 1, 3, 6 ]</span></div><div class="line">		<span class="keyword">return</span> value &gt; <span class="number">0</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</div><div class="line">&#125;) <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<ul>
<li>fill(column,startIndex, endIndex)[起始位置,结束位置]</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// </span></div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="comment">// ['a', 7, 'c']</span></div></pre></td></tr></table></figure>
<ul>
<li>entries(), keys(), values()遍历</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(index);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].values()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(elem);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 'a'</span></div><div class="line"><span class="comment">// 'b'</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(index, elem);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0 "a"</span></div><div class="line"><span class="comment">// 1 "b"</span></div></pre></td></tr></table></figure>
<ul>
<li>includes(column, startIndex): 数组中是否包含某个值</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法重写</span></div><div class="line"><span class="keyword">const</span> contains = <span class="function">(<span class="params">(</span>)=&gt;</span> <span class="built_in">Array</span>.prototype.includes </div><div class="line">	? <span class="function">(<span class="params">arr,value</span>) =&gt;</span> arr.includes(value): </div><div class="line"> <span class="function">(<span class="params">arr,value</span>) =&gt;</span> arr.some(<span class="function"><span class="params">el</span> =&gt;</span> el === value))();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(contains([<span class="string">'xiao'</span>,<span class="string">'na'</span>], <span class="string">'na'</span>));</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].includes(<span class="number">2</span>,<span class="number">0</span>)); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h4 id="3-对象"><a href="#3-对象" class="headerlink" title="3. 对象"></a>3. 对象</h4><ul>
<li>Object.is(): 用来比较两个值是否严格相等<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>, <span class="string">'is'</span>, &#123;</div><div class="line">	<span class="attr">value</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span> (x === y) &#123;</div><div class="line">			<span class="keyword">return</span> x !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> x !== x &amp;&amp; y !== y;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">configurable</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">enumerable</span>: <span class="literal">false</span>,</div><div class="line">	<span class="attr">writable</span>: <span class="literal">true</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>&gt;<br><a href="http://www.alloyteam.com/2016/03/es6-front-end-developers-will-have-to-know-the-top-ten-properties/" target="_blank" rel="external">前端开发者不得不知的ES6十大特性</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-let&quot;&gt;&lt;a href=&quot;#一-let&quot; class=&quot;headerlink&quot; title=&quot;一. let&quot;&gt;&lt;/a&gt;一. let&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;let 所声明的变量,只在let命令所在的代码块有效&lt;/li&gt;
&lt;/ul&gt;
&lt;figure clas
    
    </summary>
    
    
      <category term="javascript" scheme="https://neareven.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>我决定简单的生活</title>
    <link href="https://neareven.github.io/2017/07/18/17-book/"/>
    <id>https://neareven.github.io/2017/07/18/17-book/</id>
    <published>2017-07-18T05:06:00.000Z</published>
    <updated>2017-07-18T05:12:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>–佐佐木典士</p>
<blockquote>
<p>2017-07-16 15:41:13</p>
<p>两个特质的人，就是极简主义者： 「真正了解自己需要什么的人。」 「为了最重要的人生目标，减少物品数量的人。<br>2017-07-16 15:41:53<br>为了好好珍惜最重要的事物，我们必须「减少」可有可无的东西。 为了将心力集中在最重要的事物，我们必须「减少」其他干扰。<br>2017-07-16 15:50:08<br>人之所以感到不满足是因为当我们实现愿望之后，就会慢慢「习惯」。久而久之，「习惯」就变成「理所当然」。人类对于「理所当然」的事物与状态，最后容易感到「厌倦」。<br>2017-07-16 17:30:24<br>除了外在之外，内在也有价值。善良、有趣、勤勉、体贴、开朗、认真、聪明、亲切、有勇气，内在价值与外在价值不同，内在价值没有极限，只要磨练绝对有利于自己。<br>2017-07-16 17:35:02<br>现在的我很清楚当时为什么无法丢掉看完的书，而且就连不打算看的书也一直放在家里。因为我希望透过书柜，展现自己的价值。   我想告诉大家：「我看了这么多书，你们只要看到我的书柜就知道，我的兴趣相当广泛，我的好奇心十分强烈。我知道这本书，也听过那本书，不过，这些书我都只看过书名而已。虽然我没看过，但真的很感兴趣，正因如此，我才会买一大堆书回家。尽管看不太懂，但我真的有看内容艰涩的书籍。我的外表很平凡，也不太会说话，但我的内在世界充满丰富知识。我是一位有智慧且『深不可测』的人。<br>2017-07-16 17:41:07<br>人之所以不想丢东西，都是因为害怕之后还会用到，或认为未来可能会庆幸自己没丢这样东西<br>2017-07-16 17:43:59<br>人之所以舍不得丢东西，关键不在于东西的价值，而是蕴藏其中的回忆。<br>2017-07-16 17:54:49<br>我想引用他的著作《什么都没有的男人》其中一段话：「我觉得自己的照片、纪录与日记等物品，与我的过去毫无关系。就算我丢掉充满回忆的照片与纪录，过去仍然留在我的记忆里。丢掉有形的物品并不代表丢掉过去，事情没那么严重。忘掉的回忆代表不记住也没关系，那对自己其实没有那么重要。重要的人生回忆会自然地保存下来。」看<br>2017-07-16 21:52:37<br>无论是在家看电视或出门在外，各式各样的信息都会透过媒体、广告等媒介，向所有人强力放送。 我们每天都会接收到这些讯息：努力赚钱、存钱；拥有窈窕美丽的身体曲线；考进好学校；住在舒适的房子里；维持身体健康；在竞争中胜出；成为时尚焦点；扩展事业版图；学习更多知识；未雨绸缪，做好面对危险的准备。 电影导演汤姆·谢迪雅克一语道破这种现象： 「这些信息都在告诉我们，『现在的你不够好！』」<br>2017-07-16 21:52:52<br>因为我们很清楚「自己已经拥有所有需要的东西」，只要明白这一点，自然可忽视杂乱的外在信息。<br>2017-07-16 23:09:44<br>问题不在于如何获得暴增的信息，而是如何保持距离，如何「减少多余的资讯」<br>2017-07-16 23:11:51<br>这个世界上有比别人说的话更重要的事情， 那就是即使跌跌撞撞也要付诸行动</p>
</blockquote>
<p>多看笔记 来自多看阅读 for Kindle</p>
<p><img src="http://orvnx1k8y.bkt.clouddn.com/2017-07-18-IMG_3950.JPG" alt="IMG_3950"></p>
<p>我决定简单的生活,于我所拥有的现在,精简自己的生活.<br>方法论与实践总隔着一段距离,行动,持久的行动,需要付出代价.每日回到住处,背包随手一丢,往床上一躺,也并不就此睡去.掏出手机,刷着朋友圏,微博,扣扣,看到别人生活美好的同时,会更加的自责吧,你只是个一无所成的人.<br>内心的柔软,是时间的积淀而来.每日接触暴力的游戏,嘈杂的人群,而无任何内省的机会,在这样环境的影响下,做个洒脱率性真诚的人,恐怕只是想想吧.<br>一直被推动着做许多事,即使知道这是必做的事,却仍无一点热心.怎么说呢?是一种很松散的生活状态吧,浑浑噩噩.<br>何谓自我?很欣赏萨特的观点.不是你拥有了什么,而是你摈弃所有后所剩下的.于我自是无法做到.<br>这本书讲的并不仅是家居生活.信息焦虑,每日试图去汲取这其中的养分,结果呢?还好,我舍弃了新闻.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;–佐佐木典士&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2017-07-16 15:41:13&lt;/p&gt;
&lt;p&gt;两个特质的人，就是极简主义者： 「真正了解自己需要什么的人。」 「为了最重要的人生目标，减少物品数量的人。&lt;br&gt;2017-07-16 15:41:53&lt;br&gt;为了好
    
    </summary>
    
    
      <category term="拆书记" scheme="https://neareven.github.io/tags/%E6%8B%86%E4%B9%A6%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>陈寅恪的最后二十年</title>
    <link href="https://neareven.github.io/2017/07/14/12-book/"/>
    <id>https://neareven.github.io/2017/07/14/12-book/</id>
    <published>2017-07-14T04:40:00.000Z</published>
    <updated>2017-07-14T04:49:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>并不是一定要去经历些什么，你的人生才会完满，生命本就是残缺的，樱花为何绚烂，皆因那转瞬即逝的美。不用去祈求太多，且只活在自己狭隘的内心世界中，将眼蒙住，任尔东西南北风。擦肩而过，便且过去吧，扼腕叹息，乃至痛哭流涕，实无必要。与之相遇的那一刻，幸福美好终会构筑内心的温柔，而回顾过往淡淡的伤痛会让你懂得珍惜与珍重吧。<br>《陈寅恪的最后二十年》，垂垂老矣，伤痛却又蓬发的二十年。一生的积累，在这最后二十年迸发。晓十国语言，书过目而不忘，于佛学，唐史有极深的钻研，中国文化集大成者。万般无奈，只能将一身才华，倾诉于历史一隅。论再生缘，柳如是别传，发自肺腑，穷清之考据学，成千古文章，却仍让人扼腕叹息。屠龙之技，最终落于鸡羊之身。晚景凄楚，仍埋头于书堆中。<br>再也寻不到了，霓虹灯闪烁，纷纷扰扰，大师已不再有，哪怕只是一个纯粹的人也寻不得了吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;并不是一定要去经历些什么，你的人生才会完满，生命本就是残缺的，樱花为何绚烂，皆因那转瞬即逝的美。不用去祈求太多，且只活在自己狭隘的内心世界中，将眼蒙住，任尔东西南北风。擦肩而过，便且过去吧，扼腕叹息，乃至痛哭流涕，实无必要。与之相遇的那一刻，幸福美好终会构筑内心的温柔，而回
    
    </summary>
    
    
      <category term="拆书记" scheme="https://neareven.github.io/tags/%E6%8B%86%E4%B9%A6%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>javascript高级程序设计:八. BOM</title>
    <link href="https://neareven.github.io/2017/07/12/10-js/"/>
    <id>https://neareven.github.io/2017/07/12/10-js/</id>
    <published>2017-07-12T01:00:00.000Z</published>
    <updated>2017-07-11T02:20:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-Window对象"><a href="#一-Window对象" class="headerlink" title="一. Window对象"></a>一. Window对象</h2><ol>
<li>全局作用域<ul>
<li>在全局作用域中声明的变量/函数都会变成window对象的属性和方法</li>
<li>全局变量不能通过delete操作符删除,但直接在window对象上的定义的属性可以删除<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age = <span class="number">29</span>;</div><div class="line">   <span class="built_in">window</span>.color = <span class="string">'red'</span>;</div><div class="line">   <span class="keyword">delete</span> <span class="built_in">window</span>.color;</div><div class="line">   alert(<span class="built_in">window</span>.color); <span class="comment">// undefined</span></div><div class="line">   <span class="keyword">delete</span> <span class="built_in">window</span>.age;</div><div class="line">   alert(<span class="built_in">window</span>.age); <span class="comment">// 29</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-Window对象&quot;&gt;&lt;a href=&quot;#一-Window对象&quot; class=&quot;headerlink&quot; title=&quot;一. Window对象&quot;&gt;&lt;/a&gt;一. Window对象&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;全局作用域&lt;ul&gt;
&lt;li&gt;在全局作用域中声明的变量/函数都
    
    </summary>
    
    
      <category term="javascript" scheme="https://neareven.github.io/tags/javascript/"/>
    
      <category term="javascript高级程序设计" scheme="https://neareven.github.io/tags/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>javascript高级程序设计:7.函数表达式</title>
    <link href="https://neareven.github.io/2017/07/11/09-js/"/>
    <id>https://neareven.github.io/2017/07/11/09-js/</id>
    <published>2017-07-11T02:00:00.000Z</published>
    <updated>2017-07-11T02:15:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-定义函数的方式"><a href="#一-定义函数的方式" class="headerlink" title="一. 定义函数的方式"></a>一. 定义函数的方式</h2><ol>
<li><p>函数声明</p>
<ul>
<li>函数声明提升:执行代码前会优先读取函数声明<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sayHi();</div><div class="line">  <span class="comment">// 函数声明放在调用语句之后</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      alert(<span class="string">'hi'</span>);</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>函数表态式</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sayHi;</div><div class="line">   <span class="keyword">if</span> (condition) &#123;</div><div class="line">       sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           alert(<span class="string">'hi'</span>);</div><div class="line">       &#125;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           alert(<span class="string">'yo'</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>递归</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">     <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</div><div class="line">         return1;</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">         <span class="keyword">return</span> num * <span class="built_in">arguments</span>(num - <span class="number">1</span>);</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> factorial = (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">     <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">         <span class="keyword">return</span> num * f(num - <span class="number">1</span>);</div><div class="line">     &#125;</div><div class="line"> &#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>3.闭包</p>
<blockquote>
<p>   有权访问另一个函数作用域中的变量的函数[常见方式:在一个函数内部健另一个函数]</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-定义函数的方式&quot;&gt;&lt;a href=&quot;#一-定义函数的方式&quot; class=&quot;headerlink&quot; title=&quot;一. 定义函数的方式&quot;&gt;&lt;/a&gt;一. 定义函数的方式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;函数声明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数声明提升:执行代码前会
    
    </summary>
    
    
      <category term="javascript" scheme="https://neareven.github.io/tags/javascript/"/>
    
      <category term="javascript高级程序设计" scheme="https://neareven.github.io/tags/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>javascript高级程序设计:六.对象</title>
    <link href="https://neareven.github.io/2017/07/09/08-js/"/>
    <id>https://neareven.github.io/2017/07/09/08-js/</id>
    <published>2017-07-09T01:00:00.000Z</published>
    <updated>2017-07-11T01:43:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-对象属性"><a href="#一-对象属性" class="headerlink" title="一. 对象属性"></a>一. 对象属性</h3><ol>
<li>数据属性</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> person = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</div><div class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>, <span class="comment">// 不能从对象中删除属性</span></div><div class="line">    enumerable: <span class="literal">false</span>, <span class="comment">// 遍历</span></div><div class="line">    value: <span class="string">"js"</span></div><div class="line">&#125;);</div><div class="line">alert(person.name); <span class="comment">// js</span></div><div class="line">person.name = <span class="string">"vue"</span>;</div><div class="line">alert(person.name); <span class="comment">// js</span></div></pre></td></tr></table></figure>
<ol>
<li>访问器属性: 只能通过Object.defineProperty()来定义</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">var</span> book = &#123;</div><div class="line">    <span class="attr">_year</span>: <span class="number">2004</span>, <span class="comment">// _只能通过对象方法访问</span></div><div class="line">    edition: <span class="number">1</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">'year'</span>, &#123;</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._year;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (newValue &gt; <span class="number">2004</span>) &#123;</div><div class="line">            <span class="keyword">this</span>._year = newValue;</div><div class="line">            <span class="keyword">this</span>.edition += newValue - <span class="number">2004</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">book.year = <span class="number">2005</span>;</div><div class="line">alert(book.edition);<span class="comment">//2</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">"_year"</span>);</div><div class="line">alert(descriptor.value); <span class="comment">// 2005</span></div><div class="line">alert(<span class="keyword">typeof</span> descriptor.get); <span class="comment">// undefined</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">"year"</span>);</div><div class="line">alert(desc.value); <span class="comment">// undefined</span></div><div class="line">alert(desc.value); <span class="comment">// undefined</span></div><div class="line">alert(<span class="keyword">typeof</span> desc.get); <span class="comment">// function // get为指向函数的指针</span></div></pre></td></tr></table></figure>
<h3 id="二-构造函数的方式"><a href="#二-构造函数的方式" class="headerlink" title="二. 构造函数的方式"></a>二. 构造函数的方式</h3><ol>
<li><p>工厂模式</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.name = name;</div><div class="line">    o.age = age;</div><div class="line">    o.job = job;</div><div class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">"js"</span>, <span class="number">27</span>, <span class="string">"engineer"</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>构造函数</p>
<ul>
<li>没有显示地创建对象</li>
<li>直接将属性和方法赋给了this对象</li>
<li>没有return 语句<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.job = job;</div><div class="line">        <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            alert(<span class="keyword">this</span>.name);</div><div class="line">        &#125;;</div><div class="line">        <span class="xml"><span class="comment">&lt;!--this.sayName = new Function("alert(this.name)");--&gt;</span></span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">     // 当作构造函数调用</div><div class="line">    var person1 = new Person("js", 23, 'enigneer');</div><div class="line">    person1.sayName(); // js</div><div class="line">     </div><div class="line">     // 当作普通函数调用</div><div class="line">     Person("OC",20,'ios');</div><div class="line">     window.sayName(); // oc</div><div class="line"></div><div class="line">     // 在另一个对象的作用域中调用</div><div class="line">     var o = new Object();</div><div class="line">     Person.call(o,'vue',3,"express");</div><div class="line">     o.sayName(); // vue</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>原型模式</p>
<ul>
<li>当为实例添加一个属性时,该属性会屏蔽原型对象中的同名属性</li>
<li>delete可以删除实例属性,从而可以重新访问原型对象中的属性</li>
<li>hasOwnProperty() 检测属性存于实例还是在原型中<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">Person.prototype.name = <span class="string">"js"</span>;</div><div class="line">Person.prototype.age = <span class="number">29</span>;</div><div class="line">Person.prototype.job = <span class="string">"engineer"</span>;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line">alert(<span class="string">"name"</span> <span class="keyword">in</span> person1); <span class="comment">// true</span></div><div class="line">alert(person1.hasOwnProperty(<span class="string">"name"</span>)); <span class="comment">// false</span></div><div class="line">person1.name = <span class="string">"vue"</span>;</div><div class="line">alert(person1.hasOwnProperty(<span class="string">"name"</span>)); <span class="comment">// true</span></div><div class="line">alert(person1.name); <span class="comment">//vue</span></div><div class="line"></div><div class="line"><span class="keyword">delete</span> person1.name;</div><div class="line">alert(person1.name); <span class="comment">// js</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPrototypeProperty</span>(<span class="params">object, name</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> !object.hasOwnProperty &amp;&amp; (name <span class="keyword">in</span> object);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<p><img src="http://orvnx1k8y.bkt.clouddn.com/2017-07-07-IMG_3895.JPG" alt="IMG_3895"></p>
<ol>
<li><p>原型对象: 所有实例在默认情况下都将取得相同的属性值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="attr">constructor</span>: Person,</div><div class="line">    <span class="attr">name</span>: <span class="string">"js"</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">29</span>,</div><div class="line">    <span class="attr">friends</span>: [<span class="string">"shelby"</span>, <span class="string">"court"</span>],</div><div class="line">    <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">person1.friends.push(<span class="string">'van'</span>);</div><div class="line">person2.friends.push(<span class="string">'凉风有信'</span>);</div><div class="line"></div><div class="line">alert(person1.friends);</div><div class="line">alert(person2.friends);</div></pre></td></tr></table></figure>
</li>
<li><p>组合使用构造函数与原型模式</p>
<ul>
<li>构造函数用于定义实例属性</li>
<li>原型模式用于定义方法与共享的属性<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.job = job;</div><div class="line">        <span class="keyword">this</span>.friends = [<span class="string">'court'</span>, <span class="string">'shelby'</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Person.prototype = &#123;</div><div class="line">        <span class="attr">constructor</span>: Person,</div><div class="line">        <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            alert(<span class="keyword">this</span>.name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'na'</span>, <span class="number">23</span>, <span class="string">'soft'</span>);</div><div class="line">    <span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'?'</span>, <span class="number">27</span>, <span class="string">'ios'</span>);</div><div class="line">    person1.friends.push(<span class="string">'hi'</span>);</div><div class="line">    alert(person1.friends);</div><div class="line">    alert(person2.friends);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>动态原型模式</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,job,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName != <span class="string">'function'</span>)    &#123;</div><div class="line">      Person.prototype.sayName =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">      &#125;          </div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ol>
<li>寄生构造函数:重写调用构造函数时返回的值</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpecialArray</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> values = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">      values.push.apply(values, <span class="built_in">arguments</span>);</div><div class="line">      values.toPipedString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.join(<span class="string">"|"</span>);</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> values;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">var</span> colors = <span class="keyword">new</span> SpecialArray(<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>);</div><div class="line">  alert(colors.toPipedString());<span class="comment">// red|blue|green</span></div></pre></td></tr></table></figure>
<ol>
<li>稳妥构造函数模式<ul>
<li>没有公共属性</li>
<li>其他方法不引用this的对象</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(name);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> friend = Person(<span class="string">'vc'</span>, <span class="number">29</span>, <span class="string">'js'</span>);</div><div class="line">friend.sayName(); <span class="comment">// vc</span></div></pre></td></tr></table></figure>
<h3 id="三-继承"><a href="#三-继承" class="headerlink" title="三. 继承"></a>三. 继承</h3><ol>
<li>原型链</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.property = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.property;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.subproperty = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line">    SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</div><div class="line">    alert(instance.getSuperValue()); <span class="comment">// true</span></div><div class="line">    alert(instance.getSubValue()); <span class="comment">// false</span></div><div class="line">        alert(SubType.prototype.isPrototypeOf(instance)); <span class="comment">// ture</span></div><div class="line">    alert(instance <span class="keyword">instanceof</span> SubType); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<ol>
<li><p>原型链的问题: </p>
<blockquote>
<p> 引用类型的值会被所有实例共享<br>apply在特定的作用域中调用函数,实际上等于设置函数体内的this对象</p>
</blockquote>
</li>
<li><p>借用构造函数:可以在子类中向父类传递参数</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        SuperType.call(<span class="keyword">this</span>, <span class="string">'js'</span>);</div><div class="line">        <span class="keyword">this</span>.age = <span class="number">29</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</div><div class="line">    alert(instance.name); <span class="comment">// js</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> instance2 = <span class="keyword">new</span> SuperType();</div><div class="line">    alert(instance2.name); <span class="comment">// undefined</span></div><div class="line">    alert(instance2.age); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<ol>
<li>组合继承: 原型链与借用构造函数进行组合</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">     <span class="keyword">this</span>.name = name;</div><div class="line">     <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>];</div><div class="line"> &#125;</div><div class="line"></div><div class="line"></div><div class="line"> SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     alert(<span class="keyword">this</span>.name);</div><div class="line"> &#125;;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">     SuperType.call(<span class="keyword">this</span>, name);</div><div class="line">     <span class="keyword">this</span>.age = age;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line"> SubType.prototype.constructor = SubType;</div><div class="line"> SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     alert(<span class="keyword">this</span>.age);</div><div class="line"> &#125;;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">'na'</span>, <span class="number">23</span>);</div><div class="line"> instance1.colors.push(<span class="string">'black'</span>);</div><div class="line"> alert(instance1.colors); <span class="comment">// red,green,blue,black</span></div><div class="line"> instance1.sayName(); <span class="comment">// na</span></div><div class="line"> instance1.sayAge(); <span class="comment">// 23</span></div><div class="line"></div><div class="line"> <span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">'me'</span>, <span class="number">26</span>);</div><div class="line"> alert(instance2.colors); <span class="comment">// red,green,blue</span></div><div class="line"> instance2.sayAge();<span class="comment">// 26</span></div><div class="line"> instance2.sayName();<span class="comment">// me</span></div></pre></td></tr></table></figure>
<ol>
<li><p>原型式继承</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">    F.prototype = o;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'na'</span>,</div><div class="line">    <span class="attr">friends</span>: [<span class="string">'li'</span>, <span class="string">'peng'</span>, <span class="string">'yao'</span>]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> anotherPerson = object(person);</div><div class="line">anotherPerson.name = <span class="string">'gred'</span>;</div><div class="line">anotherPerson.friends.push(<span class="string">'hao'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> yetAnotherPerson = object(person);</div><div class="line">yetAnotherPerson.name = <span class="string">'linda'</span>;</div><div class="line">yetAnotherPerson.friends.push(<span class="string">'barbie'</span>);</div><div class="line"></div><div class="line">alert(person.friends); <span class="comment">// li,peng,hao,barbie</span></div><div class="line">alert(anotherPerson.friends); <span class="comment">// li,peng,hao,barbie</span></div></pre></td></tr></table></figure>
</li>
<li><p>寄生式继承</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">original</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> clone = <span class="built_in">Object</span>(original); <span class="comment">// 通过调用函数创建一个新对象</span></div><div class="line">      clone.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 以某种方式来增强对象</span></div><div class="line">          alert(<span class="string">'hi'</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> clone;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> person = &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'js'</span>,</div><div class="line">      <span class="attr">friends</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> anotehrperson = createAnother(person);</div><div class="line">  anotehrperson.sayHi(); <span class="comment">// hi</span></div><div class="line">  alert(anotehrperson.name); <span class="comment">// js</span></div><div class="line">  <span class="comment">// anotherperson 不仅有person的属性和方法,而且有自己的sayhi()方法</span></div></pre></td></tr></table></figure>
</li>
<li><p>寄生组合式继承</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">       <span class="keyword">this</span>.name = name;</div><div class="line">       <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>];</div><div class="line">   &#125;</div><div class="line">   SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">       alert(<span class="keyword">this</span>.name);</div><div class="line">   &#125;;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">       SuperType.call(<span class="keyword">this</span>.name); <span class="comment">// 第干净调用supertype</span></div><div class="line">       <span class="keyword">this</span>.age = age;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// SubType.prototype = new SuperType(); // 第一次调用SuperType</span></div><div class="line">   <span class="comment">// SubType.prototype.constructor = SubType;</span></div><div class="line"></div><div class="line"></div><div class="line">   inheritPrototype(SubType, SuperType);</div><div class="line"></div><div class="line"></div><div class="line">   SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">       alert(<span class="keyword">this</span>.age);</div><div class="line">   &#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一-对象属性&quot;&gt;&lt;a href=&quot;#一-对象属性&quot; class=&quot;headerlink&quot; title=&quot;一. 对象属性&quot;&gt;&lt;/a&gt;一. 对象属性&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;数据属性&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://neareven.github.io/tags/javascript/"/>
    
      <category term="javascript高级程序设计" scheme="https://neareven.github.io/tags/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>node.js开发实战详解</title>
    <link href="https://neareven.github.io/2017/07/09/11-js/"/>
    <id>https://neareven.github.io/2017/07/09/11-js/</id>
    <published>2017-07-09T01:00:00.000Z</published>
    <updated>2017-07-11T02:32:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.&lt;/p&gt;

    
    </summary>
    
    
      <category term="node.js" scheme="https://neareven.github.io/tags/node-js/"/>
    
      <category term="node.js开发实战详解" scheme="https://neareven.github.io/tags/node-js%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%A6%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>javascript高级程序设计:五.引用类型</title>
    <link href="https://neareven.github.io/2017/07/06/07-js/"/>
    <id>https://neareven.github.io/2017/07/06/07-js/</id>
    <published>2017-07-06T03:00:00.000Z</published>
    <updated>2017-07-06T07:29:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-Array"><a href="#一-Array" class="headerlink" title="一. Array"></a>一. Array</h3><h4 id="1-检测数组"><a href="#1-检测数组" class="headerlink" title="1. 检测数组:"></a>1. 检测数组:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value))</div><div class="line">    <span class="keyword">var</span> array = [<span class="string">"js"</span>,<span class="string">"node.js"</span>,<span class="string">"vue"</span>];</div><div class="line">array[<span class="number">99</span>] = <span class="string">"oc"</span>;</div><div class="line">alert(array.length); <span class="comment">// 100</span></div></pre></td></tr></table></figure>
<h4 id="2-转换方法"><a href="#2-转换方法" class="headerlink" title="2. 转换方法"></a>2. 转换方法</h4><pre><code>*   toString():将数组中值的字符串的形式拼接成以逗号分隔的字符串.
*   valueOf(): 原数组
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</div><div class="line">alert(colors.toString());  <span class="comment">// "red,blue,green" 字符串</span></div><div class="line">alert(colors.valueOf());    <span class="comment">// ["red","blue","green"] 数组</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person1 = &#123;</div><div class="line">       <span class="attr">toLocaleString</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="string">"js"</span>;</div><div class="line">       &#125;,</div><div class="line">       <span class="attr">toString</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="string">"oc"</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">var</span> person2 = &#123;</div><div class="line">       <span class="attr">toLocaleString</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="string">"vue"</span>;</div><div class="line">       &#125;,</div><div class="line">       <span class="attr">toString</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="string">"node"</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">var</span> people = [person1, person2];</div><div class="line">   alert(people); <span class="comment">// oc,node</span></div><div class="line">   alert(people.toString()); <span class="comment">// oc, node</span></div><div class="line">   alert(people.toLocaleString()); <span class="comment">// js, vue</span></div></pre></td></tr></table></figure>
<h4 id="3-拼接-join"><a href="#3-拼接-join" class="headerlink" title="3. 拼接: join"></a>3. 拼接: join</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"green"</span>, <span class="string">"blue"</span>];</div><div class="line">alert(colors.join(<span class="string">"||"</span>)); <span class="comment">// red||green||blue</span></div></pre></td></tr></table></figure>
<h4 id="4-栈方法-后进先出-push-pop"><a href="#4-栈方法-后进先出-push-pop" class="headerlink" title="4. 栈方法: 后进先出 push(), pop()"></a>4. 栈方法: 后进先出 push(), pop()</h4><pre><code>&gt; pop取得最后一项
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">"js"</span>,<span class="string">"h5"</span>];</div><div class="line">colors.push(<span class="string">"css"</span>);</div><div class="line">alert(colors.length);   <span class="comment">// 3</span></div><div class="line"><span class="keyword">var</span> item = colors.pop();  <span class="comment">// item = "css";</span></div><div class="line">alert(colors.length);   <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h4 id="5-队列方法-先进先出-shift-unshift"><a href="#5-队列方法-先进先出-shift-unshift" class="headerlink" title="5. 队列方法: 先进先出 : shift(), unshift()"></a>5. 队列方法: 先进先出 : shift(), unshift()</h4><pre><code>* shift(): 取得第一项
* unshift(): 在数组前端添加任意个项并返回数组的长度
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">"js"</span>,<span class="string">"h5"</span>];</div><div class="line">colors.push(<span class="string">"css"</span>);  </div><div class="line"><span class="keyword">var</span> item = colors.shift();  <span class="comment">// item = "js";</span></div><div class="line">alert(colors.length);   <span class="comment">// 2</span></div><div class="line">    </div><div class="line"><span class="keyword">var</span> count = colors.unshift(<span class="string">"oc"</span>,<span class="string">"node"</span>); <span class="comment">// count = 4, colors = ["oc", "node", "js","h5"]</span></div></pre></td></tr></table></figure>
<h4 id="6-重排序方法"><a href="#6-重排序方法" class="headerlink" title="6. 重排序方法:"></a>6. 重排序方法:</h4><pre><code>* reverse():数组反转

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> values = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">values.reverse();   <span class="comment">// vlaues = [3,2,1];</span></div></pre></td></tr></table></figure>

* sort(): 先调用toString(),然后比较得到的字符串[即使是全是数字,也依然会调用toString]
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> values = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>];</div><div class="line">values.sort();  <span class="comment">// values = [0,1,10,15,5];</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;!--<span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (value1 &lt; value2) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;--&gt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1,value2</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> value2-value1; <span class="comment">// 降序</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> values = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">5</span>];</div><div class="line">values.sort(compare);       <span class="comment">// values = [0,1,5,10,15]</span></div></pre></td></tr></table></figure>
<h4 id="7-合并-conact"><a href="#7-合并-conact" class="headerlink" title="7. 合并: conact"></a>7. 合并: conact</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>];</div><div class="line"><span class="keyword">var</span> colorsConact = colors.concat(<span class="string">"yellow"</span>, [<span class="string">"brown"</span>,<span class="string">"gray"</span>]); <span class="comment">// colorsConact = ["red","blue","yellow","brown","gray"]</span></div></pre></td></tr></table></figure>
<h4 id="8-截取-slice-start-int-end-int"><a href="#8-截取-slice-start-int-end-int" class="headerlink" title="8.  截取: .slice(start: int, end: int)"></a>8.  截取: .slice(start: int, end: int)</h4><blockquote>
<p>end为结束位置</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"yellow"</span>, <span class="string">"brown"</span>, <span class="string">"gray"</span>];</div><div class="line"><span class="keyword">var</span> colorsSlice = colors.slice(<span class="number">3</span>); <span class="comment">// colorsSlice = ["brown", "gray"]</span></div><div class="line">alert(colorsSlice);</div><div class="line">colorsSlice = colors.slice(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// colorsSlice = ["blue"]</span></div><div class="line">alert(colorsSlice);</div></pre></td></tr></table></figure>
<h4 id="9-splice"><a href="#9-splice" class="headerlink" title="9. splice:"></a>9. splice:</h4><pre><code>* 删除: colors.splice(start: int, deleteCount: int)--&gt;返回删除的数组
* 插入
* 替换:返回被替换的数组
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];</div><div class="line"><span class="comment">// 删除第一项</span></div><div class="line"><span class="keyword">var</span> removed = colors.splice(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">// colors = ["green", "blue"]; removed = ["red"]</span></div><div class="line"></div><div class="line"><span class="comment">// 从位置1开始插入2项</span></div><div class="line">removed = colors.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"yellow"</span>,<span class="string">"orange"</span>);<span class="comment">// colors = ["green","yellow","orange","blue"]; removed为空数组</span></div><div class="line"></div><div class="line"><span class="comment">// 插入两项,删除第一项</span></div><div class="line">removed = colors.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">"red"</span>, <span class="string">"purple"</span>); <span class="comment">//removed = [</span></div><div class="line"><span class="string">"yellow"</span>], colors = [<span class="string">"green"</span>, <span class="string">"red"</span>, <span class="string">"purple"</span>, <span class="string">"orange"</span>, <span class="string">"blue"</span>];</div></pre></td></tr></table></figure>
<h4 id="10-位置"><a href="#10-位置" class="headerlink" title="10. 位置"></a>10. 位置</h4><pre><code>&gt; 传入要查找的项和查找起点位置的索引,返回要查找的项在数组中的位置,如果没找到,返回-1
* indexOf(searchString: string, position?: int):从数组的开头向后查找
* lastIndexOf():从数组的末尾向前查找
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</div><div class="line">    alert(numbers.indexOf(<span class="number">4</span>)); <span class="comment">// 3</span></div><div class="line"></div><div class="line">    <span class="comment">// 位置越界</span></div><div class="line">    alert(numbers.indexOf(<span class="number">4</span>, <span class="number">4</span>)); <span class="comment">// 5</span></div><div class="line">    alert(numbers.lastIndexOf(<span class="number">4</span>, <span class="number">4</span>)); <span class="comment">// 3</span></div><div class="line"></div><div class="line">    alert(numbers.indexOf(<span class="number">0</span>));<span class="comment">// -1</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">"js"</span>&#125;;</div><div class="line">    <span class="keyword">var</span> people = [&#123;<span class="attr">name</span>: <span class="string">"js"</span>&#125;];</div><div class="line">    alert(people.indexOf(person));<span class="comment">//-1</span></div><div class="line"><span class="string">``</span><span class="string">`  </span></div><div class="line">#### 11. 迭代</div><div class="line">    * every():  返回boolvalue</div><div class="line">    * some():   返回boolvalue</div><div class="line">    * filter(): 返回满足条件的数组</div><div class="line">    * map():    与rac中map类似</div><div class="line">    * forEach(): 与oc中enumrated类似,遍历</div><div class="line"></div><div class="line">`<span class="string">``</span>js</div><div class="line">     <span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</div><div class="line">     <span class="keyword">var</span> every = numbers.every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> item &gt; <span class="number">4</span>;</div><div class="line">     &#125;); <span class="comment">// every false</span></div><div class="line"></div><div class="line">     <span class="keyword">var</span> some = numbers.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">     	<span class="keyword">return</span> item &gt; <span class="number">4</span>;</div><div class="line">     &#125;); <span class="comment">// some true</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</div><div class="line"> <span class="keyword">var</span> filter = numbers.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</div><div class="line"> 	<span class="keyword">return</span> item &gt; <span class="number">4</span>;</div><div class="line"> &#125;); <span class="comment">// filter = ["5"]</span></div><div class="line"></div><div class="line"> <span class="keyword">var</span> map = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</div><div class="line"> 	<span class="keyword">return</span> item * <span class="number">2</span>;</div><div class="line"> &#125;); <span class="comment">// map = [2, 4, 6, 8, 10, 8, 6, 4, 2]</span></div><div class="line"></div><div class="line"> numbers.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</div><div class="line"></div><div class="line"> &#125;);<span class="comment">// 遍历,无返回值</span></div></pre></td></tr></table></figure>
<h4 id="12-归并方法"><a href="#12-归并方法" class="headerlink" title="12. 归并方法"></a>12. 归并方法</h4><pre><code>* reduce: 从数组第一项开始向后遍历
* reduceRight: 从数组的最后一项开始,向前遍历
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> values = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> sum = values.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,index,array</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> prev + cur;</div><div class="line">	<span class="comment">// 1 + 2</span></div><div class="line">	<span class="comment">// 3 + 3</span></div><div class="line">	<span class="comment">// 6 + 4</span></div><div class="line">	<span class="comment">// 10 + 5</span></div><div class="line">&#125;); <span class="comment">// 15</span></div></pre></td></tr></table></figure>
<h3 id="二-Date"><a href="#二-Date" class="headerlink" title="二. Date"></a>二. Date</h3><h4 id="1-Date-parse"><a href="#1-Date-parse" class="headerlink" title="1. Date.parse()"></a>1. Date.parse()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(<span class="string">"6/13/2004"</span>));</div></pre></td></tr></table></figure>
<h4 id="2-Date-UTC"><a href="#2-Date-UTC" class="headerlink" title="2. Date.UTC()"></a>2. Date.UTC()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2000</span>,<span class="number">0</span>))<span class="comment">// 2000年1月1日午夜0点</span></div><div class="line"><span class="keyword">var</span> now = <span class="built_in">Date</span>.now;</div></pre></td></tr></table></figure>
<p><img src="http://orvnx1k8y.bkt.clouddn.com/2017-07-06-IMG_38921.jpg" alt="IMG_38921"></p>
<h3 id="三-RegExp"><a href="#三-RegExp" class="headerlink" title="三. RegExp"></a>三. RegExp</h3><h3 id="四-Function"><a href="#四-Function" class="headerlink" title="四. Function"></a>四. Function</h3><h4 id="1-函数声明"><a href="#1-函数声明" class="headerlink" title="1. 函数声明"></a>1. 函数声明</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">alert(sum(<span class="number">10</span>,<span class="number">10</span>));</div><div class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123; <span class="comment">// sum在初始化中,执行错误</span></div><div class="line">     	<span class="keyword">return</span> num1 + num2;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>arguments.callee</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</div><div class="line"> 	<span class="keyword">if</span> (num &lt; <span class="number">1</span>) &#123;</div><div class="line"> 		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"> 	&#125;<span class="keyword">else</span> &#123;</div><div class="line"> 		<span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num<span class="number">-1</span>);</div><div class="line"> 	&#125;</div><div class="line"> &#125;</div><div class="line"> factorial(<span class="number">3</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>caller</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> 	inner();</div><div class="line"> &#125;</div><div class="line"><span class="comment">// arguments.callee指向inner</span></div><div class="line"><span class="comment">// inner.caller指向outer</span></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> 	alert(<span class="built_in">arguments</span>.callee.caller);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> outer();</div></pre></td></tr></table></figure>
</li>
<li><p>call</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.color = <span class="string">"red"</span>;</div><div class="line"> <span class="keyword">var</span> o = &#123;<span class="attr">color</span>: <span class="string">"blue"</span>&#125;;</div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> 	alert(<span class="keyword">this</span>.color);</div><div class="line"> &#125;</div><div class="line"> sayColor(); <span class="comment">// "red"</span></div><div class="line"> sayColor.call(<span class="keyword">this</span>); <span class="comment">// "red"</span></div><div class="line"> sayColor.call(<span class="built_in">window</span>); <span class="comment">// "red"</span></div><div class="line"> sayColor.call(o); <span class="comment">// "blue"</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一-Array&quot;&gt;&lt;a href=&quot;#一-Array&quot; class=&quot;headerlink&quot; title=&quot;一. Array&quot;&gt;&lt;/a&gt;一. Array&lt;/h3&gt;&lt;h4 id=&quot;1-检测数组&quot;&gt;&lt;a href=&quot;#1-检测数组&quot; class=&quot;headerlink
    
    </summary>
    
    
      <category term="javascript" scheme="https://neareven.github.io/tags/javascript/"/>
    
      <category term="javascript高级程序设计" scheme="https://neareven.github.io/tags/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
</feed>
