<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Even&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://neareven.github.io/"/>
  <updated>2017-07-19T06:13:33.000Z</updated>
  <id>https://neareven.github.io/</id>
  
  <author>
    <name>Even</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ECMAScript 6入门</title>
    <link href="https://neareven.github.io/2017/07/19/18-js/"/>
    <id>https://neareven.github.io/2017/07/19/18-js/</id>
    <published>2017-07-19T00:57:00.000Z</published>
    <updated>2017-07-19T06:13:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-let"><a href="#一-let" class="headerlink" title="一. let"></a>一. let</h2><ul>
<li>let 所声明的变量,只在let命令所在的代码块有效</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    &#123;</div><div class="line">	<span class="keyword">let</span> a = <span class="number">10</span>;</div><div class="line">	<span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(b);</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//error, a isn't defined;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> arr = [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(i); <span class="comment">// undefined</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">	a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(i); <span class="comment">// 10</span></div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">a[<span class="number">6</span>](); </div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> b = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">	b[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(i); <span class="comment">//6</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">b[<span class="number">6</span>]();</div></pre></td></tr></table></figure>
<ul>
<li>在代码块内,let声明变量之前,该变量都不可用,称为<strong>暂时性死区</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> tmp = <span class="number">123</span>;</div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">	<span class="comment">// 虽然之前全局声明了一个tmp变量,只是此处的tmp被let绑定为块级作用域,所以在声明前对tmp赋值会报错</span></div><div class="line">	tmp = <span class="string">'abc'</span>; <span class="comment">// error </span></div><div class="line">	<span class="keyword">let</span> tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果区块中存在let与const命令,会自动形成封装作用域</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">x=y,y=<span class="number">2</span></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> (x, y);</div><div class="line">&#125;</div><div class="line"><span class="comment">// x默认值等于y,而此时y还未声明,属于'死区'</span></div><div class="line">bar(); <span class="comment">// y is not defined</span></div></pre></td></tr></table></figure>
<ul>
<li>let 不允许重复声明(与oc类似)</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> arg;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// error: arg has already been declared</span></div><div class="line">func(<span class="number">1</span>);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">let</span> arg;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(func(<span class="number">1</span>));</div></pre></td></tr></table></figure>
<ul>
<li>块级作用域</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> n = <span class="number">5</span>;</div><div class="line">	<span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">		<span class="keyword">let</span> n = <span class="number">10</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(n);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 5</span></div><div class="line"><span class="comment">// 外层代码块不受内层代码块的影响</span></div><div class="line">f1();</div></pre></td></tr></table></figure>
<h2 id="二-const"><a href="#二-const" class="headerlink" title="二. const"></a>二. const</h2><ul>
<li>声明常量且声明后常量值不能改变</li>
<li>只在声明所在的块级作用域内有效</li>
<li>对const声明的常量赋新值不会报错</li>
<li>const不存在提升,只能在声明之后使用</li>
<li>不支持重复声明</li>
<li>const指向指针,指针指向的对象本身可以改变,但是指针自身不可变</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(MAX); <span class="comment">// ReferenceError</span></div><div class="line">  <span class="keyword">const</span> MAX = <span class="number">5</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> a = [];</div><div class="line">a.push(<span class="string">'node'</span>); <span class="comment">// true</span></div><div class="line">a.length = <span class="number">0</span>; <span class="comment">// true</span></div><div class="line"><span class="comment">// a指向的数组可写,但如果更改指针指向的地址则错误</span></div><div class="line">a = [<span class="string">'dave'</span>]; <span class="comment">// error, assignment to constant variable</span></div></pre></td></tr></table></figure>
<h3 id="三-解构赋值"><a href="#三-解构赋值" class="headerlink" title="三. 解构赋值"></a>三. 解构赋值</h3><ul>
<li>数组解构按次序排列,对象解构由属性名决定</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibs</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">		<span class="keyword">yield</span> a;</div><div class="line">		[a, b] = [b, a+b];</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> [first, second,third,four] = fibs();</div><div class="line"><span class="built_in">console</span>.log([first,second,third,four]); <span class="comment">// [0, 1,1,2]</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;bar, foo&#125; = &#123;<span class="attr">foo</span>: <span class="string">'a'</span>, <span class="attr">bar</span>:<span class="string">'b'</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(&#123;bar,foo&#125;); <span class="comment">//&#123;bar:'b',foo:'a'&#125;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> &#123;bzz&#125; = &#123;bar, foo&#125;;</div><div class="line"><span class="built_in">console</span>.log(bzz); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> &#123;x&#125; = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log(x, &#123;x&#125;); <span class="comment">// 1, &#123;x:1&#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x;</div><div class="line">&#123;x&#125; = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;; <span class="comment">// error, &#123;x&#125;会被解析为代码块</span></div><div class="line"><span class="comment">// (&#123;x&#125; = &#123;x:1&#125;) // true</span></div></pre></td></tr></table></figure>
<ul>
<li>字符串赋值</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> [a,b,c,d,e,f] = <span class="string">'hello'</span>;</div><div class="line"><span class="built_in">console</span>.log(a,b,c,d,e,f)<span class="comment">//h e l l o undefined</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span>: len&#125; = <span class="string">'hello'</span>;</div><div class="line"><span class="built_in">console</span>.log(len, &#123;<span class="attr">length</span>:len&#125;) <span class="comment">// 5 &#123; length: 5 &#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span> (<span class="params">&#123;x=<span class="number">0</span>,y=<span class="number">1</span>&#125; = &#123;&#125;</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> [x,y];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(move(&#123;<span class="attr">x</span>:<span class="number">3</span>,<span class="attr">y</span>:<span class="number">8</span>&#125;))</div><div class="line"><span class="built_in">console</span>.log(move()) <span class="comment">// [0,1]</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> jsonData = &#123;</div><div class="line">	<span class="attr">id</span>: <span class="number">42</span>,</div><div class="line">	<span class="attr">status</span>: <span class="string">'OK'</span>,</div><div class="line">	<span class="attr">data</span>: [<span class="number">867</span>,<span class="number">5309</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123;id, status, <span class="attr">data</span>:number&#125; = jsonData;</div><div class="line"><span class="built_in">console</span>.log(id,status,number);<span class="comment">// 42 'OK' [ 867, 5309 ]</span></div></pre></td></tr></table></figure>
<ul>
<li>指定默认值</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> link = <span class="function"><span class="keyword">function</span> (<span class="params">height, color, url</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> height = height || <span class="number">50</span>;</div><div class="line">    <span class="keyword">var</span> color = color || <span class="string">'red'</span>;</div><div class="line">    <span class="keyword">var</span> url = url || <span class="string">'http://azat.co'</span>;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> link = <span class="function"><span class="keyword">function</span>(<span class="params">height = <span class="number">50</span>, color = <span class="string">'red'</span>, url = <span class="string">'http://azat.co'</span></span>) </span>&#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>for…of 循环遍历</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">map.set(<span class="string">'first'</span>,<span class="string">'hello'</span>);</div><div class="line">map.set(<span class="string">'second'</span>,<span class="string">'world'</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key,value] <span class="keyword">of</span> map) &#123;</div><div class="line">	<span class="built_in">console</span>.log(key + <span class="string">" is "</span> + value); <span class="comment">// first is hello second is world</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [,value] <span class="keyword">of</span> map)&#123;</div><div class="line">	<span class="built_in">console</span>.log(value); <span class="comment">// hello   world</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>输入模块的指定方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class="built_in">require</span>(<span class="string">"source-map"</span>);</div></pre></td></tr></table></figure>
<h3 id="四-字符串-数值-数组-对象扩展"><a href="#四-字符串-数值-数组-对象扩展" class="headerlink" title="四. 字符串/数值/数组/对象扩展"></a>四. 字符串/数值/数组/对象扩展</h3><h4 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1. 字符串:"></a>1. 字符串:</h4><ul>
<li>字符串拼接: 用反引号 + ${string}</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">`Your name is <span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>. `</span>;</div><div class="line"><span class="comment">// 'Your name is ' + first + ' ' + last + '.';</span></div></pre></td></tr></table></figure>
<ul>
<li>多行字符串</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> roadPoem = <span class="string">`Then took the other, as just as fair,</span></div><div class="line">    And having perhaps the better claim</div><div class="line">    Because it was grassy and wanted wear,</div><div class="line">    Though as for that the passing there</div><div class="line">    Had worn them really about the same,`;</div></pre></td></tr></table></figure>
<ul>
<li>标签模板</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span> (<span class="params">s, v1, v2</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(s[<span class="number">0</span>],s[<span class="number">1</span>], v1,v2);</div><div class="line">	<span class="keyword">return</span> <span class="string">'ok'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">tag <span class="string">`Hello <span class="subst">$&#123; a + b&#125;</span> world <span class="subst">$&#123; a*b&#125;</span>`</span>; <span class="comment">// [ Hello   world  15 50</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> total = <span class="number">30</span>;</div><div class="line"><span class="keyword">var</span> msg = splice <span class="string">`the total is <span class="subst">$&#123;total&#125;</span> (<span class="subst">$&#123;total*<span class="number">1.05</span>&#125;</span> with tax)`</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">splice</span> (<span class="params">literals</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> result = <span class="string">''</span>;</div><div class="line">	<span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (i &lt; literals.length) &#123;</div><div class="line">		result += literals[i++];</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</div><div class="line">		<span class="comment">// &#123; '0': [ 'the total is ', ' (', ' with tax)' ],'1': 30, '2': 31.5 &#125;</span></div><div class="line">		<span class="keyword">if</span> (i &lt; <span class="built_in">arguments</span>.length) &#123;</div><div class="line">			result += <span class="built_in">arguments</span>[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 过滤html字符串</span></div><div class="line"><span class="keyword">var</span> message = safeHTML <span class="string">`&lt;p&gt;<span class="subst">$&#123;sender&#125;</span> has sent u a message.&lt;/p&gt;`</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">safeHTML</span>(<span class="params">templateData</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> s = templateData[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> arg = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="built_in">arguments</span>[i]);</div><div class="line"></div><div class="line">        s += arg.replace(<span class="regexp">/&amp;/g</span>, <span class="string">"&amp;amp;"</span>)</div><div class="line">            .replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>)</div><div class="line">            .replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>);</div><div class="line"></div><div class="line">        s += templateData[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-数组"><a href="#2-数组" class="headerlink" title="2. 数组:"></a>2. 数组:</h4><ul>
<li>Array.from</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.from(&#123;<span class="number">0</span>:<span class="string">"a"</span>, <span class="number">1</span>:<span class="string">"b"</span>, <span class="number">2</span>:<span class="string">"c"</span>, <span class="attr">length</span>:<span class="number">3</span>&#125;)</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ['a','b','c']</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</div><div class="line">	<span class="built_in">console</span>.log(args); <span class="comment">// [ 'a', 'b', 'c' ]</span></div><div class="line">	<span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">// &#123; '0': 'a', '1': 'b', '2': 'c' &#125;</span></div><div class="line">&#125;</div><div class="line">foo(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr =  <span class="built_in">Array</span>.from([<span class="number">1</span>,,<span class="number">2</span>,,<span class="number">3</span>], (n)=&gt; n || <span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">// [ 1, 0, 2, 0, 3 ]</span></div></pre></td></tr></table></figure>
<ul>
<li>Array.of()</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArrayOf</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> [].slice.call(<span class="built_in">arguments</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.of(<span class="number">3</span>,<span class="number">11</span>,<span class="number">8</span>) <span class="comment">// [3,11,8]</span></div></pre></td></tr></table></figure>
<ul>
<li>find: 找到第一个符合条件的数组成员</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> found = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>,<span class="number">10</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &gt; <span class="number">1</span>);</div><div class="line"><span class="built_in">console</span>.log(found); <span class="comment">// 4</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>].find(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,arr</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(value,index,arr); <span class="comment">// 1 0 [ 1, 3, 6 ]</span></div><div class="line">		<span class="keyword">return</span> value &gt; <span class="number">0</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</div><div class="line">&#125;) <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<ul>
<li>fill(column,startIndex, endIndex)[起始位置,结束位置]</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// </span></div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].fill(<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="comment">// ['a', 7, 'c']</span></div></pre></td></tr></table></figure>
<ul>
<li>entries(), keys(), values()遍历</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].keys()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(index);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> elem <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].values()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(elem);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 'a'</span></div><div class="line"><span class="comment">// 'b'</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(index, elem);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0 "a"</span></div><div class="line"><span class="comment">// 1 "b"</span></div></pre></td></tr></table></figure>
<ul>
<li>includes(column, startIndex): 数组中是否包含某个值</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法重写</span></div><div class="line"><span class="keyword">const</span> contains = <span class="function">(<span class="params">(</span>)=&gt;</span> <span class="built_in">Array</span>.prototype.includes </div><div class="line">	? <span class="function">(<span class="params">arr,value</span>) =&gt;</span> arr.includes(value): </div><div class="line"> <span class="function">(<span class="params">arr,value</span>) =&gt;</span> arr.some(<span class="function"><span class="params">el</span> =&gt;</span> el === value))();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(contains([<span class="string">'xiao'</span>,<span class="string">'na'</span>], <span class="string">'na'</span>));</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].includes(<span class="number">2</span>,<span class="number">0</span>)); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h4 id="3-对象"><a href="#3-对象" class="headerlink" title="3. 对象"></a>3. 对象</h4><ul>
<li>Object.is(): 用来比较两个值是否严格相等<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>, <span class="string">'is'</span>, &#123;</div><div class="line">	<span class="attr">value</span>: <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</div><div class="line">		<span class="keyword">if</span> (x === y) &#123;</div><div class="line">			<span class="keyword">return</span> x !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> x !== x &amp;&amp; y !== y;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">configurable</span>: <span class="literal">true</span>,</div><div class="line">	<span class="attr">enumerable</span>: <span class="literal">false</span>,</div><div class="line">	<span class="attr">writable</span>: <span class="literal">true</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>&gt;<br><a href="http://www.alloyteam.com/2016/03/es6-front-end-developers-will-have-to-know-the-top-ten-properties/" target="_blank" rel="external">前端开发者不得不知的ES6十大特性</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-let&quot;&gt;&lt;a href=&quot;#一-let&quot; class=&quot;headerlink&quot; title=&quot;一. let&quot;&gt;&lt;/a&gt;一. let&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;let 所声明的变量,只在let命令所在的代码块有效&lt;/li&gt;
&lt;/ul&gt;
&lt;figure clas
    
    </summary>
    
    
      <category term="javascript" scheme="https://neareven.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>我决定简单的生活</title>
    <link href="https://neareven.github.io/2017/07/18/17-book/"/>
    <id>https://neareven.github.io/2017/07/18/17-book/</id>
    <published>2017-07-18T05:06:00.000Z</published>
    <updated>2017-07-18T05:12:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>–佐佐木典士</p>
<blockquote>
<p>2017-07-16 15:41:13</p>
<p>两个特质的人，就是极简主义者： 「真正了解自己需要什么的人。」 「为了最重要的人生目标，减少物品数量的人。<br>2017-07-16 15:41:53<br>为了好好珍惜最重要的事物，我们必须「减少」可有可无的东西。 为了将心力集中在最重要的事物，我们必须「减少」其他干扰。<br>2017-07-16 15:50:08<br>人之所以感到不满足是因为当我们实现愿望之后，就会慢慢「习惯」。久而久之，「习惯」就变成「理所当然」。人类对于「理所当然」的事物与状态，最后容易感到「厌倦」。<br>2017-07-16 17:30:24<br>除了外在之外，内在也有价值。善良、有趣、勤勉、体贴、开朗、认真、聪明、亲切、有勇气，内在价值与外在价值不同，内在价值没有极限，只要磨练绝对有利于自己。<br>2017-07-16 17:35:02<br>现在的我很清楚当时为什么无法丢掉看完的书，而且就连不打算看的书也一直放在家里。因为我希望透过书柜，展现自己的价值。   我想告诉大家：「我看了这么多书，你们只要看到我的书柜就知道，我的兴趣相当广泛，我的好奇心十分强烈。我知道这本书，也听过那本书，不过，这些书我都只看过书名而已。虽然我没看过，但真的很感兴趣，正因如此，我才会买一大堆书回家。尽管看不太懂，但我真的有看内容艰涩的书籍。我的外表很平凡，也不太会说话，但我的内在世界充满丰富知识。我是一位有智慧且『深不可测』的人。<br>2017-07-16 17:41:07<br>人之所以不想丢东西，都是因为害怕之后还会用到，或认为未来可能会庆幸自己没丢这样东西<br>2017-07-16 17:43:59<br>人之所以舍不得丢东西，关键不在于东西的价值，而是蕴藏其中的回忆。<br>2017-07-16 17:54:49<br>我想引用他的著作《什么都没有的男人》其中一段话：「我觉得自己的照片、纪录与日记等物品，与我的过去毫无关系。就算我丢掉充满回忆的照片与纪录，过去仍然留在我的记忆里。丢掉有形的物品并不代表丢掉过去，事情没那么严重。忘掉的回忆代表不记住也没关系，那对自己其实没有那么重要。重要的人生回忆会自然地保存下来。」看<br>2017-07-16 21:52:37<br>无论是在家看电视或出门在外，各式各样的信息都会透过媒体、广告等媒介，向所有人强力放送。 我们每天都会接收到这些讯息：努力赚钱、存钱；拥有窈窕美丽的身体曲线；考进好学校；住在舒适的房子里；维持身体健康；在竞争中胜出；成为时尚焦点；扩展事业版图；学习更多知识；未雨绸缪，做好面对危险的准备。 电影导演汤姆·谢迪雅克一语道破这种现象： 「这些信息都在告诉我们，『现在的你不够好！』」<br>2017-07-16 21:52:52<br>因为我们很清楚「自己已经拥有所有需要的东西」，只要明白这一点，自然可忽视杂乱的外在信息。<br>2017-07-16 23:09:44<br>问题不在于如何获得暴增的信息，而是如何保持距离，如何「减少多余的资讯」<br>2017-07-16 23:11:51<br>这个世界上有比别人说的话更重要的事情， 那就是即使跌跌撞撞也要付诸行动</p>
</blockquote>
<p>多看笔记 来自多看阅读 for Kindle</p>
<p><img src="http://orvnx1k8y.bkt.clouddn.com/2017-07-18-IMG_3950.JPG" alt="IMG_3950"></p>
<p>我决定简单的生活,于我所拥有的现在,精简自己的生活.<br>方法论与实践总隔着一段距离,行动,持久的行动,需要付出代价.每日回到住处,背包随手一丢,往床上一躺,也并不就此睡去.掏出手机,刷着朋友圏,微博,扣扣,看到别人生活美好的同时,会更加的自责吧,你只是个一无所成的人.<br>内心的柔软,是时间的积淀而来.每日接触暴力的游戏,嘈杂的人群,而无任何内省的机会,在这样环境的影响下,做个洒脱率性真诚的人,恐怕只是想想吧.<br>一直被推动着做许多事,即使知道这是必做的事,却仍无一点热心.怎么说呢?是一种很松散的生活状态吧,浑浑噩噩.<br>何谓自我?很欣赏萨特的观点.不是你拥有了什么,而是你摈弃所有后所剩下的.于我自是无法做到.<br>这本书讲的并不仅是家居生活.信息焦虑,每日试图去汲取这其中的养分,结果呢?还好,我舍弃了新闻.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;–佐佐木典士&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2017-07-16 15:41:13&lt;/p&gt;
&lt;p&gt;两个特质的人，就是极简主义者： 「真正了解自己需要什么的人。」 「为了最重要的人生目标，减少物品数量的人。&lt;br&gt;2017-07-16 15:41:53&lt;br&gt;为了好
    
    </summary>
    
    
      <category term="拆书记" scheme="https://neareven.github.io/tags/%E6%8B%86%E4%B9%A6%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>陈寅恪的最后二十年</title>
    <link href="https://neareven.github.io/2017/07/14/12-book/"/>
    <id>https://neareven.github.io/2017/07/14/12-book/</id>
    <published>2017-07-14T04:40:00.000Z</published>
    <updated>2017-07-14T04:49:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>并不是一定要去经历些什么，你的人生才会完满，生命本就是残缺的，樱花为何绚烂，皆因那转瞬即逝的美。不用去祈求太多，且只活在自己狭隘的内心世界中，将眼蒙住，任尔东西南北风。擦肩而过，便且过去吧，扼腕叹息，乃至痛哭流涕，实无必要。与之相遇的那一刻，幸福美好终会构筑内心的温柔，而回顾过往淡淡的伤痛会让你懂得珍惜与珍重吧。<br>《陈寅恪的最后二十年》，垂垂老矣，伤痛却又蓬发的二十年。一生的积累，在这最后二十年迸发。晓十国语言，书过目而不忘，于佛学，唐史有极深的钻研，中国文化集大成者。万般无奈，只能将一身才华，倾诉于历史一隅。论再生缘，柳如是别传，发自肺腑，穷清之考据学，成千古文章，却仍让人扼腕叹息。屠龙之技，最终落于鸡羊之身。晚景凄楚，仍埋头于书堆中。<br>再也寻不到了，霓虹灯闪烁，纷纷扰扰，大师已不再有，哪怕只是一个纯粹的人也寻不得了吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;并不是一定要去经历些什么，你的人生才会完满，生命本就是残缺的，樱花为何绚烂，皆因那转瞬即逝的美。不用去祈求太多，且只活在自己狭隘的内心世界中，将眼蒙住，任尔东西南北风。擦肩而过，便且过去吧，扼腕叹息，乃至痛哭流涕，实无必要。与之相遇的那一刻，幸福美好终会构筑内心的温柔，而回
    
    </summary>
    
    
      <category term="拆书记" scheme="https://neareven.github.io/tags/%E6%8B%86%E4%B9%A6%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>javascript高级程序设计:八. BOM</title>
    <link href="https://neareven.github.io/2017/07/12/10-js/"/>
    <id>https://neareven.github.io/2017/07/12/10-js/</id>
    <published>2017-07-12T01:00:00.000Z</published>
    <updated>2017-07-11T02:20:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-Window对象"><a href="#一-Window对象" class="headerlink" title="一. Window对象"></a>一. Window对象</h2><ol>
<li>全局作用域<ul>
<li>在全局作用域中声明的变量/函数都会变成window对象的属性和方法</li>
<li>全局变量不能通过delete操作符删除,但直接在window对象上的定义的属性可以删除<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age = <span class="number">29</span>;</div><div class="line">   <span class="built_in">window</span>.color = <span class="string">'red'</span>;</div><div class="line">   <span class="keyword">delete</span> <span class="built_in">window</span>.color;</div><div class="line">   alert(<span class="built_in">window</span>.color); <span class="comment">// undefined</span></div><div class="line">   <span class="keyword">delete</span> <span class="built_in">window</span>.age;</div><div class="line">   alert(<span class="built_in">window</span>.age); <span class="comment">// 29</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-Window对象&quot;&gt;&lt;a href=&quot;#一-Window对象&quot; class=&quot;headerlink&quot; title=&quot;一. Window对象&quot;&gt;&lt;/a&gt;一. Window对象&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;全局作用域&lt;ul&gt;
&lt;li&gt;在全局作用域中声明的变量/函数都
    
    </summary>
    
    
      <category term="javascript" scheme="https://neareven.github.io/tags/javascript/"/>
    
      <category term="javascript高级程序设计" scheme="https://neareven.github.io/tags/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>javascript高级程序设计:7.函数表达式</title>
    <link href="https://neareven.github.io/2017/07/11/09-js/"/>
    <id>https://neareven.github.io/2017/07/11/09-js/</id>
    <published>2017-07-11T02:00:00.000Z</published>
    <updated>2017-07-11T02:15:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-定义函数的方式"><a href="#一-定义函数的方式" class="headerlink" title="一. 定义函数的方式"></a>一. 定义函数的方式</h2><ol>
<li><p>函数声明</p>
<ul>
<li>函数声明提升:执行代码前会优先读取函数声明<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sayHi();</div><div class="line">  <span class="comment">// 函数声明放在调用语句之后</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      alert(<span class="string">'hi'</span>);</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>函数表态式</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sayHi;</div><div class="line">   <span class="keyword">if</span> (condition) &#123;</div><div class="line">       sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           alert(<span class="string">'hi'</span>);</div><div class="line">       &#125;</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">       sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           alert(<span class="string">'yo'</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>递归</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">     <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</div><div class="line">         return1;</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">         <span class="keyword">return</span> num * <span class="built_in">arguments</span>(num - <span class="number">1</span>);</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> factorial = (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">     <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">     &#125; <span class="keyword">else</span> &#123;</div><div class="line">         <span class="keyword">return</span> num * f(num - <span class="number">1</span>);</div><div class="line">     &#125;</div><div class="line"> &#125;)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>3.闭包</p>
<blockquote>
<p>   有权访问另一个函数作用域中的变量的函数[常见方式:在一个函数内部健另一个函数]</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-定义函数的方式&quot;&gt;&lt;a href=&quot;#一-定义函数的方式&quot; class=&quot;headerlink&quot; title=&quot;一. 定义函数的方式&quot;&gt;&lt;/a&gt;一. 定义函数的方式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;函数声明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数声明提升:执行代码前会
    
    </summary>
    
    
      <category term="javascript" scheme="https://neareven.github.io/tags/javascript/"/>
    
      <category term="javascript高级程序设计" scheme="https://neareven.github.io/tags/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>node.js开发实战详解</title>
    <link href="https://neareven.github.io/2017/07/09/11-js/"/>
    <id>https://neareven.github.io/2017/07/09/11-js/</id>
    <published>2017-07-09T01:00:00.000Z</published>
    <updated>2017-07-11T02:32:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.&lt;/p&gt;

    
    </summary>
    
    
      <category term="node.js" scheme="https://neareven.github.io/tags/node-js/"/>
    
      <category term="node.js开发实战详解" scheme="https://neareven.github.io/tags/node-js%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%A6%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>javascript高级程序设计:六.对象</title>
    <link href="https://neareven.github.io/2017/07/09/08-js/"/>
    <id>https://neareven.github.io/2017/07/09/08-js/</id>
    <published>2017-07-09T01:00:00.000Z</published>
    <updated>2017-07-11T01:43:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-对象属性"><a href="#一-对象属性" class="headerlink" title="一. 对象属性"></a>一. 对象属性</h3><ol>
<li>数据属性</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> person = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;</div><div class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>, <span class="comment">// 不能从对象中删除属性</span></div><div class="line">    enumerable: <span class="literal">false</span>, <span class="comment">// 遍历</span></div><div class="line">    value: <span class="string">"js"</span></div><div class="line">&#125;);</div><div class="line">alert(person.name); <span class="comment">// js</span></div><div class="line">person.name = <span class="string">"vue"</span>;</div><div class="line">alert(person.name); <span class="comment">// js</span></div></pre></td></tr></table></figure>
<ol>
<li>访问器属性: 只能通过Object.defineProperty()来定义</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">var</span> book = &#123;</div><div class="line">    <span class="attr">_year</span>: <span class="number">2004</span>, <span class="comment">// _只能通过对象方法访问</span></div><div class="line">    edition: <span class="number">1</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">'year'</span>, &#123;</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._year;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (newValue &gt; <span class="number">2004</span>) &#123;</div><div class="line">            <span class="keyword">this</span>._year = newValue;</div><div class="line">            <span class="keyword">this</span>.edition += newValue - <span class="number">2004</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">book.year = <span class="number">2005</span>;</div><div class="line">alert(book.edition);<span class="comment">//2</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">"_year"</span>);</div><div class="line">alert(descriptor.value); <span class="comment">// 2005</span></div><div class="line">alert(<span class="keyword">typeof</span> descriptor.get); <span class="comment">// undefined</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">"year"</span>);</div><div class="line">alert(desc.value); <span class="comment">// undefined</span></div><div class="line">alert(desc.value); <span class="comment">// undefined</span></div><div class="line">alert(<span class="keyword">typeof</span> desc.get); <span class="comment">// function // get为指向函数的指针</span></div></pre></td></tr></table></figure>
<h3 id="二-构造函数的方式"><a href="#二-构造函数的方式" class="headerlink" title="二. 构造函数的方式"></a>二. 构造函数的方式</h3><ol>
<li><p>工厂模式</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.name = name;</div><div class="line">    o.age = age;</div><div class="line">    o.job = job;</div><div class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">"js"</span>, <span class="number">27</span>, <span class="string">"engineer"</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>构造函数</p>
<ul>
<li>没有显示地创建对象</li>
<li>直接将属性和方法赋给了this对象</li>
<li>没有return 语句<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.job = job;</div><div class="line">        <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            alert(<span class="keyword">this</span>.name);</div><div class="line">        &#125;;</div><div class="line">        <span class="xml"><span class="comment">&lt;!--this.sayName = new Function("alert(this.name)");--&gt;</span></span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">     // 当作构造函数调用</div><div class="line">    var person1 = new Person("js", 23, 'enigneer');</div><div class="line">    person1.sayName(); // js</div><div class="line">     </div><div class="line">     // 当作普通函数调用</div><div class="line">     Person("OC",20,'ios');</div><div class="line">     window.sayName(); // oc</div><div class="line"></div><div class="line">     // 在另一个对象的作用域中调用</div><div class="line">     var o = new Object();</div><div class="line">     Person.call(o,'vue',3,"express");</div><div class="line">     o.sayName(); // vue</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>原型模式</p>
<ul>
<li>当为实例添加一个属性时,该属性会屏蔽原型对象中的同名属性</li>
<li>delete可以删除实例属性,从而可以重新访问原型对象中的属性</li>
<li>hasOwnProperty() 检测属性存于实例还是在原型中<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">Person.prototype.name = <span class="string">"js"</span>;</div><div class="line">Person.prototype.age = <span class="number">29</span>;</div><div class="line">Person.prototype.job = <span class="string">"engineer"</span>;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line">alert(<span class="string">"name"</span> <span class="keyword">in</span> person1); <span class="comment">// true</span></div><div class="line">alert(person1.hasOwnProperty(<span class="string">"name"</span>)); <span class="comment">// false</span></div><div class="line">person1.name = <span class="string">"vue"</span>;</div><div class="line">alert(person1.hasOwnProperty(<span class="string">"name"</span>)); <span class="comment">// true</span></div><div class="line">alert(person1.name); <span class="comment">//vue</span></div><div class="line"></div><div class="line"><span class="keyword">delete</span> person1.name;</div><div class="line">alert(person1.name); <span class="comment">// js</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPrototypeProperty</span>(<span class="params">object, name</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> !object.hasOwnProperty &amp;&amp; (name <span class="keyword">in</span> object);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<p><img src="http://orvnx1k8y.bkt.clouddn.com/2017-07-07-IMG_3895.JPG" alt="IMG_3895"></p>
<ol>
<li><p>原型对象: 所有实例在默认情况下都将取得相同的属性值</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="attr">constructor</span>: Person,</div><div class="line">    <span class="attr">name</span>: <span class="string">"js"</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">29</span>,</div><div class="line">    <span class="attr">friends</span>: [<span class="string">"shelby"</span>, <span class="string">"court"</span>],</div><div class="line">    <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">person1.friends.push(<span class="string">'van'</span>);</div><div class="line">person2.friends.push(<span class="string">'凉风有信'</span>);</div><div class="line"></div><div class="line">alert(person1.friends);</div><div class="line">alert(person2.friends);</div></pre></td></tr></table></figure>
</li>
<li><p>组合使用构造函数与原型模式</p>
<ul>
<li>构造函数用于定义实例属性</li>
<li>原型模式用于定义方法与共享的属性<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.job = job;</div><div class="line">        <span class="keyword">this</span>.friends = [<span class="string">'court'</span>, <span class="string">'shelby'</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Person.prototype = &#123;</div><div class="line">        <span class="attr">constructor</span>: Person,</div><div class="line">        <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            alert(<span class="keyword">this</span>.name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'na'</span>, <span class="number">23</span>, <span class="string">'soft'</span>);</div><div class="line">    <span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'?'</span>, <span class="number">27</span>, <span class="string">'ios'</span>);</div><div class="line">    person1.friends.push(<span class="string">'hi'</span>);</div><div class="line">    alert(person1.friends);</div><div class="line">    alert(person2.friends);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>动态原型模式</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,job,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName != <span class="string">'function'</span>)    &#123;</div><div class="line">      Person.prototype.sayName =<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name);</div><div class="line">      &#125;          </div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ol>
<li>寄生构造函数:重写调用构造函数时返回的值</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpecialArray</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> values = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">      values.push.apply(values, <span class="built_in">arguments</span>);</div><div class="line">      values.toPipedString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.join(<span class="string">"|"</span>);</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> values;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">var</span> colors = <span class="keyword">new</span> SpecialArray(<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>);</div><div class="line">  alert(colors.toPipedString());<span class="comment">// red|blue|green</span></div></pre></td></tr></table></figure>
<ol>
<li>稳妥构造函数模式<ul>
<li>没有公共属性</li>
<li>其他方法不引用this的对象</li>
</ul>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(name);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> friend = Person(<span class="string">'vc'</span>, <span class="number">29</span>, <span class="string">'js'</span>);</div><div class="line">friend.sayName(); <span class="comment">// vc</span></div></pre></td></tr></table></figure>
<h3 id="三-继承"><a href="#三-继承" class="headerlink" title="三. 继承"></a>三. 继承</h3><ol>
<li>原型链</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.property = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.property;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.subproperty = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line">    SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</div><div class="line">    alert(instance.getSuperValue()); <span class="comment">// true</span></div><div class="line">    alert(instance.getSubValue()); <span class="comment">// false</span></div><div class="line">        alert(SubType.prototype.isPrototypeOf(instance)); <span class="comment">// ture</span></div><div class="line">    alert(instance <span class="keyword">instanceof</span> SubType); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<ol>
<li><p>原型链的问题: </p>
<blockquote>
<p> 引用类型的值会被所有实例共享<br>apply在特定的作用域中调用函数,实际上等于设置函数体内的this对象</p>
</blockquote>
</li>
<li><p>借用构造函数:可以在子类中向父类传递参数</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        SuperType.call(<span class="keyword">this</span>, <span class="string">'js'</span>);</div><div class="line">        <span class="keyword">this</span>.age = <span class="number">29</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</div><div class="line">    alert(instance.name); <span class="comment">// js</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> instance2 = <span class="keyword">new</span> SuperType();</div><div class="line">    alert(instance2.name); <span class="comment">// undefined</span></div><div class="line">    alert(instance2.age); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<ol>
<li>组合继承: 原型链与借用构造函数进行组合</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">     <span class="keyword">this</span>.name = name;</div><div class="line">     <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>];</div><div class="line"> &#125;</div><div class="line"></div><div class="line"></div><div class="line"> SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     alert(<span class="keyword">this</span>.name);</div><div class="line"> &#125;;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">     SuperType.call(<span class="keyword">this</span>, name);</div><div class="line">     <span class="keyword">this</span>.age = age;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> SubType.prototype = <span class="keyword">new</span> SuperType();</div><div class="line"> SubType.prototype.constructor = SubType;</div><div class="line"> SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     alert(<span class="keyword">this</span>.age);</div><div class="line"> &#125;;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">'na'</span>, <span class="number">23</span>);</div><div class="line"> instance1.colors.push(<span class="string">'black'</span>);</div><div class="line"> alert(instance1.colors); <span class="comment">// red,green,blue,black</span></div><div class="line"> instance1.sayName(); <span class="comment">// na</span></div><div class="line"> instance1.sayAge(); <span class="comment">// 23</span></div><div class="line"></div><div class="line"> <span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">'me'</span>, <span class="number">26</span>);</div><div class="line"> alert(instance2.colors); <span class="comment">// red,green,blue</span></div><div class="line"> instance2.sayAge();<span class="comment">// 26</span></div><div class="line"> instance2.sayName();<span class="comment">// me</span></div></pre></td></tr></table></figure>
<ol>
<li><p>原型式继承</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">    F.prototype = o;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'na'</span>,</div><div class="line">    <span class="attr">friends</span>: [<span class="string">'li'</span>, <span class="string">'peng'</span>, <span class="string">'yao'</span>]</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> anotherPerson = object(person);</div><div class="line">anotherPerson.name = <span class="string">'gred'</span>;</div><div class="line">anotherPerson.friends.push(<span class="string">'hao'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> yetAnotherPerson = object(person);</div><div class="line">yetAnotherPerson.name = <span class="string">'linda'</span>;</div><div class="line">yetAnotherPerson.friends.push(<span class="string">'barbie'</span>);</div><div class="line"></div><div class="line">alert(person.friends); <span class="comment">// li,peng,hao,barbie</span></div><div class="line">alert(anotherPerson.friends); <span class="comment">// li,peng,hao,barbie</span></div></pre></td></tr></table></figure>
</li>
<li><p>寄生式继承</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">original</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> clone = <span class="built_in">Object</span>(original); <span class="comment">// 通过调用函数创建一个新对象</span></div><div class="line">      clone.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 以某种方式来增强对象</span></div><div class="line">          alert(<span class="string">'hi'</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> clone;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> person = &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'js'</span>,</div><div class="line">      <span class="attr">friends</span>: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> anotehrperson = createAnother(person);</div><div class="line">  anotehrperson.sayHi(); <span class="comment">// hi</span></div><div class="line">  alert(anotehrperson.name); <span class="comment">// js</span></div><div class="line">  <span class="comment">// anotherperson 不仅有person的属性和方法,而且有自己的sayhi()方法</span></div></pre></td></tr></table></figure>
</li>
<li><p>寄生组合式继承</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">       <span class="keyword">this</span>.name = name;</div><div class="line">       <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>];</div><div class="line">   &#125;</div><div class="line">   SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">       alert(<span class="keyword">this</span>.name);</div><div class="line">   &#125;;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">       SuperType.call(<span class="keyword">this</span>.name); <span class="comment">// 第干净调用supertype</span></div><div class="line">       <span class="keyword">this</span>.age = age;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">// SubType.prototype = new SuperType(); // 第一次调用SuperType</span></div><div class="line">   <span class="comment">// SubType.prototype.constructor = SubType;</span></div><div class="line"></div><div class="line"></div><div class="line">   inheritPrototype(SubType, SuperType);</div><div class="line"></div><div class="line"></div><div class="line">   SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">       alert(<span class="keyword">this</span>.age);</div><div class="line">   &#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一-对象属性&quot;&gt;&lt;a href=&quot;#一-对象属性&quot; class=&quot;headerlink&quot; title=&quot;一. 对象属性&quot;&gt;&lt;/a&gt;一. 对象属性&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;数据属性&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://neareven.github.io/tags/javascript/"/>
    
      <category term="javascript高级程序设计" scheme="https://neareven.github.io/tags/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>javascript高级程序设计:五.引用类型</title>
    <link href="https://neareven.github.io/2017/07/06/07-js/"/>
    <id>https://neareven.github.io/2017/07/06/07-js/</id>
    <published>2017-07-06T03:00:00.000Z</published>
    <updated>2017-07-06T07:29:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-Array"><a href="#一-Array" class="headerlink" title="一. Array"></a>一. Array</h3><h4 id="1-检测数组"><a href="#1-检测数组" class="headerlink" title="1. 检测数组:"></a>1. 检测数组:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value))</div><div class="line">    <span class="keyword">var</span> array = [<span class="string">"js"</span>,<span class="string">"node.js"</span>,<span class="string">"vue"</span>];</div><div class="line">array[<span class="number">99</span>] = <span class="string">"oc"</span>;</div><div class="line">alert(array.length); <span class="comment">// 100</span></div></pre></td></tr></table></figure>
<h4 id="2-转换方法"><a href="#2-转换方法" class="headerlink" title="2. 转换方法"></a>2. 转换方法</h4><pre><code>*   toString():将数组中值的字符串的形式拼接成以逗号分隔的字符串.
*   valueOf(): 原数组
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</div><div class="line">alert(colors.toString());  <span class="comment">// "red,blue,green" 字符串</span></div><div class="line">alert(colors.valueOf());    <span class="comment">// ["red","blue","green"] 数组</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person1 = &#123;</div><div class="line">       <span class="attr">toLocaleString</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="string">"js"</span>;</div><div class="line">       &#125;,</div><div class="line">       <span class="attr">toString</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="string">"oc"</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">var</span> person2 = &#123;</div><div class="line">       <span class="attr">toLocaleString</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="string">"vue"</span>;</div><div class="line">       &#125;,</div><div class="line">       <span class="attr">toString</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="string">"node"</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">var</span> people = [person1, person2];</div><div class="line">   alert(people); <span class="comment">// oc,node</span></div><div class="line">   alert(people.toString()); <span class="comment">// oc, node</span></div><div class="line">   alert(people.toLocaleString()); <span class="comment">// js, vue</span></div></pre></td></tr></table></figure>
<h4 id="3-拼接-join"><a href="#3-拼接-join" class="headerlink" title="3. 拼接: join"></a>3. 拼接: join</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"green"</span>, <span class="string">"blue"</span>];</div><div class="line">alert(colors.join(<span class="string">"||"</span>)); <span class="comment">// red||green||blue</span></div></pre></td></tr></table></figure>
<h4 id="4-栈方法-后进先出-push-pop"><a href="#4-栈方法-后进先出-push-pop" class="headerlink" title="4. 栈方法: 后进先出 push(), pop()"></a>4. 栈方法: 后进先出 push(), pop()</h4><pre><code>&gt; pop取得最后一项
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">"js"</span>,<span class="string">"h5"</span>];</div><div class="line">colors.push(<span class="string">"css"</span>);</div><div class="line">alert(colors.length);   <span class="comment">// 3</span></div><div class="line"><span class="keyword">var</span> item = colors.pop();  <span class="comment">// item = "css";</span></div><div class="line">alert(colors.length);   <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h4 id="5-队列方法-先进先出-shift-unshift"><a href="#5-队列方法-先进先出-shift-unshift" class="headerlink" title="5. 队列方法: 先进先出 : shift(), unshift()"></a>5. 队列方法: 先进先出 : shift(), unshift()</h4><pre><code>* shift(): 取得第一项
* unshift(): 在数组前端添加任意个项并返回数组的长度
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">"js"</span>,<span class="string">"h5"</span>];</div><div class="line">colors.push(<span class="string">"css"</span>);  </div><div class="line"><span class="keyword">var</span> item = colors.shift();  <span class="comment">// item = "js";</span></div><div class="line">alert(colors.length);   <span class="comment">// 2</span></div><div class="line">    </div><div class="line"><span class="keyword">var</span> count = colors.unshift(<span class="string">"oc"</span>,<span class="string">"node"</span>); <span class="comment">// count = 4, colors = ["oc", "node", "js","h5"]</span></div></pre></td></tr></table></figure>
<h4 id="6-重排序方法"><a href="#6-重排序方法" class="headerlink" title="6. 重排序方法:"></a>6. 重排序方法:</h4><pre><code>* reverse():数组反转

<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> values = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">values.reverse();   <span class="comment">// vlaues = [3,2,1];</span></div></pre></td></tr></table></figure>

* sort(): 先调用toString(),然后比较得到的字符串[即使是全是数字,也依然会调用toString]
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> values = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>];</div><div class="line">values.sort();  <span class="comment">// values = [0,1,10,15,5];</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;!--<span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (value1 &lt; value2) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;--&gt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1,value2</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> value2-value1; <span class="comment">// 降序</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> values = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">15</span>,<span class="number">10</span>,<span class="number">5</span>];</div><div class="line">values.sort(compare);       <span class="comment">// values = [0,1,5,10,15]</span></div></pre></td></tr></table></figure>
<h4 id="7-合并-conact"><a href="#7-合并-conact" class="headerlink" title="7. 合并: conact"></a>7. 合并: conact</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>];</div><div class="line"><span class="keyword">var</span> colorsConact = colors.concat(<span class="string">"yellow"</span>, [<span class="string">"brown"</span>,<span class="string">"gray"</span>]); <span class="comment">// colorsConact = ["red","blue","yellow","brown","gray"]</span></div></pre></td></tr></table></figure>
<h4 id="8-截取-slice-start-int-end-int"><a href="#8-截取-slice-start-int-end-int" class="headerlink" title="8.  截取: .slice(start: int, end: int)"></a>8.  截取: .slice(start: int, end: int)</h4><blockquote>
<p>end为结束位置</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"yellow"</span>, <span class="string">"brown"</span>, <span class="string">"gray"</span>];</div><div class="line"><span class="keyword">var</span> colorsSlice = colors.slice(<span class="number">3</span>); <span class="comment">// colorsSlice = ["brown", "gray"]</span></div><div class="line">alert(colorsSlice);</div><div class="line">colorsSlice = colors.slice(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// colorsSlice = ["blue"]</span></div><div class="line">alert(colorsSlice);</div></pre></td></tr></table></figure>
<h4 id="9-splice"><a href="#9-splice" class="headerlink" title="9. splice:"></a>9. splice:</h4><pre><code>* 删除: colors.splice(start: int, deleteCount: int)--&gt;返回删除的数组
* 插入
* 替换:返回被替换的数组
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>,<span class="string">"green"</span>,<span class="string">"blue"</span>];</div><div class="line"><span class="comment">// 删除第一项</span></div><div class="line"><span class="keyword">var</span> removed = colors.splice(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">// colors = ["green", "blue"]; removed = ["red"]</span></div><div class="line"></div><div class="line"><span class="comment">// 从位置1开始插入2项</span></div><div class="line">removed = colors.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"yellow"</span>,<span class="string">"orange"</span>);<span class="comment">// colors = ["green","yellow","orange","blue"]; removed为空数组</span></div><div class="line"></div><div class="line"><span class="comment">// 插入两项,删除第一项</span></div><div class="line">removed = colors.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">"red"</span>, <span class="string">"purple"</span>); <span class="comment">//removed = [</span></div><div class="line"><span class="string">"yellow"</span>], colors = [<span class="string">"green"</span>, <span class="string">"red"</span>, <span class="string">"purple"</span>, <span class="string">"orange"</span>, <span class="string">"blue"</span>];</div></pre></td></tr></table></figure>
<h4 id="10-位置"><a href="#10-位置" class="headerlink" title="10. 位置"></a>10. 位置</h4><pre><code>&gt; 传入要查找的项和查找起点位置的索引,返回要查找的项在数组中的位置,如果没找到,返回-1
* indexOf(searchString: string, position?: int):从数组的开头向后查找
* lastIndexOf():从数组的末尾向前查找
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</div><div class="line">    alert(numbers.indexOf(<span class="number">4</span>)); <span class="comment">// 3</span></div><div class="line"></div><div class="line">    <span class="comment">// 位置越界</span></div><div class="line">    alert(numbers.indexOf(<span class="number">4</span>, <span class="number">4</span>)); <span class="comment">// 5</span></div><div class="line">    alert(numbers.lastIndexOf(<span class="number">4</span>, <span class="number">4</span>)); <span class="comment">// 3</span></div><div class="line"></div><div class="line">    alert(numbers.indexOf(<span class="number">0</span>));<span class="comment">// -1</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">"js"</span>&#125;;</div><div class="line">    <span class="keyword">var</span> people = [&#123;<span class="attr">name</span>: <span class="string">"js"</span>&#125;];</div><div class="line">    alert(people.indexOf(person));<span class="comment">//-1</span></div><div class="line"><span class="string">``</span><span class="string">`  </span></div><div class="line">#### 11. 迭代</div><div class="line">    * every():  返回boolvalue</div><div class="line">    * some():   返回boolvalue</div><div class="line">    * filter(): 返回满足条件的数组</div><div class="line">    * map():    与rac中map类似</div><div class="line">    * forEach(): 与oc中enumrated类似,遍历</div><div class="line"></div><div class="line">`<span class="string">``</span>js</div><div class="line">     <span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</div><div class="line">     <span class="keyword">var</span> every = numbers.every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> item &gt; <span class="number">4</span>;</div><div class="line">     &#125;); <span class="comment">// every false</span></div><div class="line"></div><div class="line">     <span class="keyword">var</span> some = numbers.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">     	<span class="keyword">return</span> item &gt; <span class="number">4</span>;</div><div class="line">     &#125;); <span class="comment">// some true</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</div><div class="line"> <span class="keyword">var</span> filter = numbers.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</div><div class="line"> 	<span class="keyword">return</span> item &gt; <span class="number">4</span>;</div><div class="line"> &#125;); <span class="comment">// filter = ["5"]</span></div><div class="line"></div><div class="line"> <span class="keyword">var</span> map = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</div><div class="line"> 	<span class="keyword">return</span> item * <span class="number">2</span>;</div><div class="line"> &#125;); <span class="comment">// map = [2, 4, 6, 8, 10, 8, 6, 4, 2]</span></div><div class="line"></div><div class="line"> numbers.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</div><div class="line"></div><div class="line"> &#125;);<span class="comment">// 遍历,无返回值</span></div></pre></td></tr></table></figure>
<h4 id="12-归并方法"><a href="#12-归并方法" class="headerlink" title="12. 归并方法"></a>12. 归并方法</h4><pre><code>* reduce: 从数组第一项开始向后遍历
* reduceRight: 从数组的最后一项开始,向前遍历
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> values = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> sum = values.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,cur,index,array</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> prev + cur;</div><div class="line">	<span class="comment">// 1 + 2</span></div><div class="line">	<span class="comment">// 3 + 3</span></div><div class="line">	<span class="comment">// 6 + 4</span></div><div class="line">	<span class="comment">// 10 + 5</span></div><div class="line">&#125;); <span class="comment">// 15</span></div></pre></td></tr></table></figure>
<h3 id="二-Date"><a href="#二-Date" class="headerlink" title="二. Date"></a>二. Date</h3><h4 id="1-Date-parse"><a href="#1-Date-parse" class="headerlink" title="1. Date.parse()"></a>1. Date.parse()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(<span class="string">"6/13/2004"</span>));</div></pre></td></tr></table></figure>
<h4 id="2-Date-UTC"><a href="#2-Date-UTC" class="headerlink" title="2. Date.UTC()"></a>2. Date.UTC()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2000</span>,<span class="number">0</span>))<span class="comment">// 2000年1月1日午夜0点</span></div><div class="line"><span class="keyword">var</span> now = <span class="built_in">Date</span>.now;</div></pre></td></tr></table></figure>
<p><img src="http://orvnx1k8y.bkt.clouddn.com/2017-07-06-IMG_38921.jpg" alt="IMG_38921"></p>
<h3 id="三-RegExp"><a href="#三-RegExp" class="headerlink" title="三. RegExp"></a>三. RegExp</h3><h3 id="四-Function"><a href="#四-Function" class="headerlink" title="四. Function"></a>四. Function</h3><h4 id="1-函数声明"><a href="#1-函数声明" class="headerlink" title="1. 函数声明"></a>1. 函数声明</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">alert(sum(<span class="number">10</span>,<span class="number">10</span>));</div><div class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123; <span class="comment">// sum在初始化中,执行错误</span></div><div class="line">     	<span class="keyword">return</span> num1 + num2;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>arguments.callee</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</div><div class="line"> 	<span class="keyword">if</span> (num &lt; <span class="number">1</span>) &#123;</div><div class="line"> 		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"> 	&#125;<span class="keyword">else</span> &#123;</div><div class="line"> 		<span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num<span class="number">-1</span>);</div><div class="line"> 	&#125;</div><div class="line"> &#125;</div><div class="line"> factorial(<span class="number">3</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>caller</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> 	inner();</div><div class="line"> &#125;</div><div class="line"><span class="comment">// arguments.callee指向inner</span></div><div class="line"><span class="comment">// inner.caller指向outer</span></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> 	alert(<span class="built_in">arguments</span>.callee.caller);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> outer();</div></pre></td></tr></table></figure>
</li>
<li><p>call</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.color = <span class="string">"red"</span>;</div><div class="line"> <span class="keyword">var</span> o = &#123;<span class="attr">color</span>: <span class="string">"blue"</span>&#125;;</div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> 	alert(<span class="keyword">this</span>.color);</div><div class="line"> &#125;</div><div class="line"> sayColor(); <span class="comment">// "red"</span></div><div class="line"> sayColor.call(<span class="keyword">this</span>); <span class="comment">// "red"</span></div><div class="line"> sayColor.call(<span class="built_in">window</span>); <span class="comment">// "red"</span></div><div class="line"> sayColor.call(o); <span class="comment">// "blue"</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一-Array&quot;&gt;&lt;a href=&quot;#一-Array&quot; class=&quot;headerlink&quot; title=&quot;一. Array&quot;&gt;&lt;/a&gt;一. Array&lt;/h3&gt;&lt;h4 id=&quot;1-检测数组&quot;&gt;&lt;a href=&quot;#1-检测数组&quot; class=&quot;headerlink
    
    </summary>
    
    
      <category term="javascript" scheme="https://neareven.github.io/tags/javascript/"/>
    
      <category term="javascript高级程序设计" scheme="https://neareven.github.io/tags/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>javascript高级程序设计:四.类型.作用域.内存</title>
    <link href="https://neareven.github.io/2017/07/06/06-js/"/>
    <id>https://neareven.github.io/2017/07/06/06-js/</id>
    <published>2017-07-06T02:00:00.000Z</published>
    <updated>2017-07-06T02:52:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>  基本类型/引用类型<br>  执行环境(全局与局部)<br>  垃圾回收(arc)</p>
</blockquote>
<h3 id="一-基本概念"><a href="#一-基本概念" class="headerlink" title="一.基本概念"></a>一.基本概念</h3><h4 id="一-基本类型-Undefined-Null-Boolean-Number-String"><a href="#一-基本类型-Undefined-Null-Boolean-Number-String" class="headerlink" title="(一). 基本类型: Undefined/Null/Boolean/Number/String"></a>(一). 基本类型: Undefined/Null/Boolean/Number/String</h4><blockquote>
<p>保存在栈中</p>
</blockquote>
<h4 id="二-引用类型-通过指针访问对象在内存中的位置"><a href="#二-引用类型-通过指针访问对象在内存中的位置" class="headerlink" title="(二). 引用类型: 通过指针访问对象在内存中的位置"></a>(二). 引用类型: 通过指针访问对象在内存中的位置</h4><blockquote>
<p>为对象,保存在堆中</p>
</blockquote>
<h4 id="三-基本类型与引用类型的区别"><a href="#三-基本类型与引用类型的区别" class="headerlink" title="(三). 基本类型与引用类型的区别"></a>(三). 基本类型与引用类型的区别</h4><blockquote>
<p>复制变量值</p>
<ol>
<li>基本类型: 从一个变量向另一个变量复制基本类型的值,会创建值的副本</li>
<li>引用类型: 复制的只是指针,两个指针指向同一块内存空间</li>
</ol>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num1 = <span class="number">5</span>;</div><div class="line"><span class="keyword">var</span> num2 = num1;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="keyword">var</span> obj2 = obj1;</div><div class="line">obj1.name = <span class="string">"js"</span>;</div><div class="line">alert(obj2.name);  <span class="comment">// "js"</span></div></pre></td></tr></table></figure>
<h4 id="四-参数传递方式-只能按值传递"><a href="#四-参数传递方式-只能按值传递" class="headerlink" title="(四)参数传递方式: 只能按值传递"></a>(四)参数传递方式: 只能按值传递</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 新创建一个对象person, 通过setname,person的name属性被设置为"js",之后重写obj,此时的obj为局部变量,而这个局部变量在函数执行完后会立刻被销毁[即使在函数内部引用了参数的值,但原始的引用仍然保持不变]</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    obj.name = <span class="string">"js"</span>;</div><div class="line">    obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    obj.name = <span class="string">"oc"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person = newObject();</div><div class="line">setName(person);</div><div class="line">alert(person.name);  <span class="comment">// "js"</span></div></pre></td></tr></table></figure>
<h4 id="五-typeof-amp-instanceof"><a href="#五-typeof-amp-instanceof" class="headerlink" title="(五). typeof &amp; instanceof"></a>(五). typeof &amp; instanceof</h4><blockquote>
<p>确定值是哪种基本类型用typeof,确定一个值是哪种引用类型用instanceof</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// typeof比较时,全部加引号</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> setName != <span class="string">'funciton'</span>)&#123;&#125;</div><div class="line">    <span class="keyword">if</span> (person instance <span class="keyword">of</span> <span class="built_in">Object</span>(<span class="built_in">Array</span>/<span class="built_in">RegExp</span>))</div></pre></td></tr></table></figure>
<h3 id="二-执行环境及作用域"><a href="#二-执行环境及作用域" class="headerlink" title="二.执行环境及作用域"></a>二.执行环境及作用域</h3><blockquote>
<p>内部环境首先在自己的变量对象中查找变量和函数名,如果搜不到,会通过作用域链向上逐级查询</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> color = <span class="string">"blue"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> anotherColor = <span class="string">"red"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">swapColors</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> tempColor = anotherColor;</div><div class="line">    anotherColor = color;</div><div class="line">    color = tempColor;</div><div class="line">&#125;</div><div class="line">swapColors();</div><div class="line">&#125;</div><div class="line">changeColor();</div><div class="line">alert(color); <span class="comment">// red</span></div></pre></td></tr></table></figure>
<h4 id="一-延长作用域链"><a href="#一-延长作用域链" class="headerlink" title="(一).延长作用域链"></a>(一).延长作用域链</h4><ul>
<li>try-catch中的catch块</li>
<li>with语句</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildUrl</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> qs = <span class="string">"?id=12"</span>;</div><div class="line"><span class="comment">// href = location.href</span></div><div class="line"><span class="keyword">with</span>(location) &#123;</div><div class="line"><span class="keyword">var</span> url = href + qs;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> url;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三-垃圾回收"><a href="#三-垃圾回收" class="headerlink" title="三.垃圾回收"></a>三.垃圾回收</h3><blockquote>
<p>解除值引用并不意味着自动回收该值所占用的内存</p>
<ul>
<li>标记清除:给当前不使用的值加上配房,然后再回收其内存<ol>
<li>垃圾收集器给存储在内存中的所有变量都加上标记</li>
<li>清除掉环境中的变量和被环境中的变量引用的变量的标记</li>
<li>在此之后被加上标记的变量将被视为准备删除的变量</li>
<li>进行内存清除</li>
</ol>
</li>
<li>引用计数: 跟踪记录所有值被引用的次数</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;  基本类型/引用类型&lt;br&gt;  执行环境(全局与局部)&lt;br&gt;  垃圾回收(arc)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一-基本概念&quot;&gt;&lt;a href=&quot;#一-基本概念&quot; class=&quot;headerlink&quot; title=&quot;一.
    
    </summary>
    
    
      <category term="javascript" scheme="https://neareven.github.io/tags/javascript/"/>
    
      <category term="javascript高级程序设计" scheme="https://neareven.github.io/tags/javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Tangram pageView配置表</title>
    <link href="https://neareven.github.io/2017/06/25/03-ios-tangram/"/>
    <id>https://neareven.github.io/2017/06/25/03-ios-tangram/</id>
    <published>2017-06-25T11:00:00.000Z</published>
    <updated>2017-06-26T06:41:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>pageview视图配置</p>
<p><img src="https://ooo.0o0.ooo/2017/06/23/594ce3aa6ff2c.png" alt="pageview视图配置"></p>
<h2 id="pageHeight-pagWidth-设置pageview宽高度"><a href="#pageHeight-pagWidth-设置pageview宽高度" class="headerlink" title="pageHeight,pagWidth, 设置pageview宽高度"></a>pageHeight,pagWidth, 设置pageview宽高度</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="attr">"data"</span>: &#123;</div><div class="line">        <span class="attr">"cards"</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">"type"</span>: <span class="string">"10"</span>,</div><div class="line">                <span class="attr">"id"</span>: <span class="string">"first-line"</span>,</div><div class="line">                <span class="attr">"style"</span>:&#123;</div><div class="line">                  <span class="attr">"padding"</span>:[<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>],</div><div class="line">                  <span class="attr">"indicatorStyle"</span> : <span class="string">"dot"</span>,</div><div class="line">                  <span class="attr">"pageHeight"</span>:<span class="number">160</span>,</div><div class="line">                  <span class="attr">"bgColor"</span>: <span class="string">"#FFFFFF"</span>,</div><div class="line">                  <span class="attr">"indicatorRadius"</span>: <span class="string">"20"</span>,</div><div class="line">                  <span class="attr">"indicatorPosition"</span>:<span class="string">"inside"</span>,</div><div class="line">                  <span class="attr">"indicatorGravity"</span>: <span class="string">"left"</span>,</div><div class="line">                  <span class="attr">"indicatorHeight"</span>: <span class="string">"5"</span>,</div><div class="line">                  <span class="attr">"indicatorPosition"</span>: <span class="string">"outside"</span>,</div><div class="line">                  <span class="attr">"infinite"</span>: <span class="string">"true"</span>,</div><div class="line">                  <span class="attr">"autoScroll"</span> : <span class="string">"3000"</span>,</div><div class="line">                  <span class="attr">"indicatorMargin"</span>:<span class="string">"-10"</span>,</div><div class="line">                  <span class="attr">"defaultIndicatorColor"</span>: <span class="string">"#333333"</span>,</div><div class="line">                  <span class="attr">"indicatorColor"</span>: <span class="string">"#B4B4B4"</span>,</div><div class="line">                  <span class="attr">"hasIndicator"</span>:<span class="string">"true"</span></div><div class="line">                  &#125;,</div><div class="line">                <span class="attr">"items"</span>: [</div><div class="line">                    &#123;</div><div class="line">                        <span class="attr">"type"</span>: <span class="string">"2"</span>,</div><div class="line">                          <span class="attr">"imgUrl"</span>:<span class="string">"https://www.google.com.hk/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png"</span></div><div class="line">                    &#125;,</div><div class="line">                          &#123;</div><div class="line">                          <span class="attr">"type"</span>:<span class="string">"2"</span>,</div><div class="line">                          <span class="attr">"imgUrl"</span>:<span class="string">"https://www.google.com.hk/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png"</span></div><div class="line">                          &#125;,</div><div class="line">                          &#123;</div><div class="line">                          <span class="attr">"type"</span>:<span class="string">"2"</span>,</div><div class="line">                          <span class="attr">"imgUrl"</span>:<span class="string">"https://www.google.com.hk/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png"</span></div><div class="line">                          &#125;,</div><div class="line">                          &#123;</div><div class="line">                          <span class="attr">"type"</span>:<span class="string">"1"</span>,</div><div class="line">                          <span class="attr">"imgUrl"</span>:<span class="string">"https://www.google.com.hk/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png"</span></div><div class="line">                          &#125;,</div><div class="line">                          &#123;</div><div class="line">                          <span class="attr">"type"</span>:<span class="string">"1"</span>,</div><div class="line">                          <span class="attr">"imgUrl"</span>:<span class="string">"https://www.google.com.hk/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png"</span></div><div class="line">                          &#125;</div><div class="line">                ]</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pageview视图配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/23/594ce3aa6ff2c.png&quot; alt=&quot;pageview视图配置&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;pageHeight-pagWidth-设置pag
    
    </summary>
    
    
      <category term="ios" scheme="https://neareven.github.io/tags/ios/"/>
    
      <category term="tangram" scheme="https://neareven.github.io/tags/tangram/"/>
    
  </entry>
  
  <entry>
    <title>初识阿里Tangram</title>
    <link href="https://neareven.github.io/2017/06/23/02-ios-tangram/"/>
    <id>https://neareven.github.io/2017/06/23/02-ios-tangram/</id>
    <published>2017-06-23T07:00:00.000Z</published>
    <updated>2017-06-23T08:55:58.000Z</updated>
    
    <content type="html"><![CDATA[<!-- EventBus:事件总线,提供组件/布局/tangramView之间的通信渠道
Helper: 提供数据Model到ViewModel, ViewModel到View之间的转换
Core: 提供复用回收机制
Layout: 布局/组件摆放 -->
<p>Tangram, 阿里开源动态搭建页面的组件,支持瀑布流/浮动/吸顶/轮播等多种布局方式,通过后台json配置,实现页面的动态更新.</p>
<h1 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h1><p>tangram主要由页面/卡片/组件三部分组成.<br><img src="https://ooo.0o0.ooo/2017/06/23/594cd534b1db1.png" alt="tangram三大块"></p>
<h2 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h2><p>通过<a href="https://github.com/alibaba/LazyScrollView" target="_blank" rel="external">LazyScrollView</a>实现,是页面容器,所有的卡片和组件都添加在页面中</p>
<h2 id="卡片"><a href="#卡片" class="headerlink" title="卡片"></a>卡片</h2><p>卡片: 负责布局逻辑,对组件进行组合布局,只声明布局方式,不提供布局细节,由header/footer/body/style[样式:边距/间距/宽高比]组成.</p>
<blockquote>
<p>流式布局/瀑布流布局/吸顶式布局/悬浮布局/轮播布局<br>仅轮播卡片与通用流式卡片支持header/footer</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="string">"type"</span>:<span class="number">1</span>, </div><div class="line"><span class="comment">// "type":2 </span></div><div class="line"><span class="string">"style"</span>:&#123; --&gt; 描述样式</div><div class="line"></div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="string">"header"</span>:&#123;</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="string">"footer"</span>:&#123;</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="string">"items"</span>:[  ---&gt; 组件列表描述</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><blockquote>
<p>包括类型/数据/样式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="string">"type"</span> : <span class="string">"2"</span> --&gt;TangramSingleImageElement,图片类型</div><div class="line">	<span class="comment">// type=1为TangramSimpleTextElement,文字类型</span></div><div class="line"></div><div class="line">	<span class="string">"style"</span>:&#123;  --&gt;描述组件样式</div><div class="line">		<span class="string">"margin"</span>:[</div><div class="line">			<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span></div><div class="line">		],</div><div class="line">		<span class="string">"height"</span>: <span class="number">100</span>,</div><div class="line">		<span class="string">"width"</span>: <span class="number">100</span>,</div><div class="line">		<span class="string">"bgColor"</span>: <span class="string">"#ffffff"</span></div><div class="line">	&#125;,</div><div class="line">	<span class="string">"imgurl"</span>: <span class="string">"../img.png"</span>,</div><div class="line">	<span class="string">"title"</span>: <span class="string">""</span>,</div><div class="line">	<span class="string">"action"</span>: <span class="string">""</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="各布局详细说明"><a href="#各布局详细说明" class="headerlink" title="各布局详细说明"></a>各布局详细说明</h1><p><a href="http://tangram.pingguohe.net/docs/layout-support/flow-layout" target="_blank" rel="external">流式布局:TangramFlowLayout</a></p>
<p><a href="http://tangram.pingguohe.net/docs/layout-support/waterflow-layout" target="_blank" rel="external">瀑布流式布局:TangramWaterFlowLayout</a></p>
<p><a href="http://tangram.pingguohe.net/docs/layout-support/oneplusn-layout" target="_blank" rel="external">一拖N布局:TangramSingleAndDoubleLayout</a></p>
<p><a href="http://tangram.pingguohe.net/docs/layout-support/float-layout" target="_blank" rel="external">浮动布局:TangramDragableLayout</a></p>
<p><a href="hhttp://tangram.pingguohe.net/docs/layout-support/sticky-layout" target="_blank" rel="external">吸顶/吸底布局:TangramStickyLayout</a></p>
<p><a href="http://tangram.pingguohe.net/docs/layout-support/pagescroll-layout" target="_blank" rel="external">轮播布局:TangramPageScrollLayout</a></p>
<p>以流式布局为例:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="string">"margin"</span>: [<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>] --&gt; 卡片外边距:上右下左</div><div class="line">	<span class="string">"padding"</span>: [<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">9</span>] --&gt; 卡片内间距:上右下左</div><div class="line">	<span class="string">"aspectRadio"</span>: <span class="string">"9"</span>  --&gt; 每一行的宽高比</div><div class="line">	<span class="string">"vGap"</span>: <span class="string">"9"</span>   		--&gt; 组件间的坚直间距</div><div class="line">	<span class="string">"hGap"</span>: <span class="string">"9"</span>			--&gt; 组件间的水平间距</div><div class="line">	<span class="string">"bgImgUrl"</span>: <span class="string">"../img.png"</span> --&gt;卡片背景图</div><div class="line">	<span class="string">"bgColor"</span>: <span class="string">"#ffffff"</span>	--&gt;卡片背景色</div><div class="line">	<span class="string">"cols"</span>:	[<span class="number">30</span>,<span class="number">30</span>] ??--&gt;每列的百分比，如果是N列，可以只写<span class="built_in">Array</span>中只写N<span class="number">-1</span>项，最后一项会自动填充，如果加一起大于<span class="number">100</span>，就按照填写的来算</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://tangram.pingguohe.net/docs/layout-support/inner-support" target="_blank" rel="external"></a></p>
<p><img src="https://ooo.0o0.ooo/2017/06/23/594ccd9375663.png" alt="流式布局style"><br><img src="https://ooo.0o0.ooo/2017/06/23/594ccdd3e0896.png" alt="流式布局style"><br><img src="https://ooo.0o0.ooo/2017/06/23/594ccdf8477f8.png" alt="流式布局style"></p>
<h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><ol>
<li>注册tangram组件:两种类型:文字与图片<blockquote>
<p>TangramSingleImageElement: 图片类型<br>TangramSimpleTextElement: 文字类型</p>
</blockquote>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[TangramDefaultItemModelFactory registElementType:@&quot;1&quot; className:@&quot;TangramSingleImageElement&quot;];</div><div class="line">	[TangramDefaultItemModelFactory registElementType:@&quot;2&quot; className:@&quot;TangramSimpleTextElement&quot;];</div></pre></td></tr></table></figure>
<ol>
<li>读取json数据,使用helper解析实例<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	 <span class="comment">//获取数据</span></div><div class="line"> 	NSString *mockDataPath = [NSString stringWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@<span class="string">"TangramMock"</span> ofType:@<span class="string">"json"</span>] encoding:NSUTF8StringEncoding error:nil];</div><div class="line"> 	NSDictionary *dict = [mockDataPath objectFromJSONString];</div><div class="line">	 self.layoutModelArray = [[dict objectForKey:@<span class="string">"data"</span>] objectForKey:@<span class="string">"cards"</span>];</div><div class="line"> 	<span class="comment">//使用helper解析成layout实例</span></div><div class="line">	 self.layoutArray = [TangramDefaultDataSourceHelper layoutsWithArray:self.layoutModelArray];	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><a href="http://tangram.pingguohe.net/docs/layout-support/inner-support" target="_blank" rel="external">各种布局json type配置表</a>&gt;</p>
<ol>
<li>实现<code>TangramDataSource Delegate</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//返回layout个数:卡片个数</span></div><div class="line">- (NSUInteger)numberOfLayoutsInTangramView:(TangramView *)view</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> self.layoutModelArray.count;</div><div class="line">&#125;</div><div class="line"><span class="comment">//返回layout的实例:实例内容有哪些</span></div><div class="line">- (UIView&lt;TangramLayoutProtocol&gt; *)layoutInTangramView:(TangramView *)view atIndex:(NSUInteger)index</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [self.layoutArray objectAtIndex:index];</div><div class="line">&#125;</div><div class="line"><span class="comment">//返回某一个layout中itemModel的个数:一个卡片中组件的个数</span></div><div class="line">- (NSUInteger)numberOfItemsInTangramView:(TangramView *)view forLayout:(UIView&lt;TangramLayoutProtocol&gt; *)layout</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> layout.itemModels.count;</div><div class="line">&#125;</div><div class="line"><span class="comment">//返回layout中指定index的itemModel实例</span></div><div class="line">- (NSObject&lt;TangramItemModelProtocol&gt; *)itemModelInTangramView:(TangramView *)view forLayout:(UIView&lt;TangramLayoutProtocol&gt; *)layout atIndex:(NSUInteger)index</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [layout.itemModels objectAtIndex:index];;</div><div class="line">&#125;</div><div class="line"><span class="comment">//根据Model生成View</span></div><div class="line"><span class="comment">//以上的方法在调用Tangram的reload方法后就会执行，而这个方法是按需加载</span></div><div class="line">- (UIView *)itemInTangramView:(TangramView *)view withModel:(NSObject&lt;TangramItemModelProtocol&gt; *)model forLayout:(UIView&lt;TangramLayoutProtocol&gt; *)layout atIndex:(NSUInteger)index</div><div class="line">&#123;</div><div class="line">    <span class="comment">//先尝试找可以复用的View，有的话就赋值，没有的话就生成一个</span></div><div class="line">    UIView *reuseableView = [view dequeueReusableItemWithIdentifier:model.reuseIdentifier];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (reuseableView) &#123;</div><div class="line">        reuseableView =  [TangramDefaultDataSourceHelper refreshElement:reuseableView byModel:model];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        reuseableView =  [TangramDefaultDataSourceHelper elementByModel:model];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> reuseableView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>创建tangram实例</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">	-(TangramView *)tangramView</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (nil == _tangramView) &#123;</div><div class="line">        _tangramView = [[TangramView alloc]init];</div><div class="line">        _tangramView.frame = self.view.bounds;</div><div class="line">        <span class="comment">//要设置datasouce delegate</span></div><div class="line">        [_tangramView setDataSource:self];</div><div class="line">        _tangramView.backgroundColor = [UIColor whiteColor];</div><div class="line">        [self.view addSubview:_tangramView];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _tangramView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>刷新视图</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[self.tangramView reloadData];</div></pre></td></tr></table></figure>
<p><img src="https://ooo.0o0.ooo/2017/06/23/594cc6b32a9f6.png" alt="tangram执行流程"></p>
<!-- 
## TangramDragableLayout
可拖动的item,
<figure class="highlight plain"><figcaption><span>*fixLabyout = [[TangramDragableLayout alloc] init];</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fixLabyout.alignType = TopRight;</div><div class="line">fixLabyout.offsetX = 0;</div><div class="line">fixLabyout.offsetY = 100;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">alignType: 设置位置类型</div><div class="line">typedef NS_ENUM(NSInteger, FixAlignType)</div><div class="line">&#123;</div><div class="line">    TopLeft = <span class="number">0</span>,		上左</div><div class="line">    TopRight,			上右</div><div class="line">    BottomLeft,			下左</div><div class="line">    BottomRight			下右</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="string">``</span><span class="string">` --&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;!-- ##TangramViewDatasource</span></div></pre></td></tr></table></figure>
<p>// 返回item的个数</p>
<ul>
<li>(NSUInteger)numberOfLayoutsInTangramView:(TangramView *)view;<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
</li>
</ul>
<p>// item复用(与cell类似)</p>
<ul>
<li>(UIView <em>)itemInTangramView:(TangramView </em>)view withModel:(NSObject<TangramItemModelProtocol> <em>)model forLayout:(UIView<TangramLayoutProtocol> </em>)layout atIndex:(NSUInteger)index{<br>  DemoItem <em>item = (DemoItem </em>)[view dequeueReusableItemWithIdentifier:model.reuseIdentifier];<br>  if (!item) {<br>#warning 1: frame invalid<pre><code>item = [[DemoItem alloc] initWithFrame:CGRectMake(0, 0, 220, 20) reuseIdentifier:model.reuseIdentifier];
</code></pre>  }</li>
</ul>
<pre><code>// 添加item的subview元素
UILabel *testLabel = [item viewWithTag:1001];
if (!testLabel) {
    testLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 100, 30)];
    testLabel.textColor = [UIColor redColor];
    testLabel.backgroundColor = [UIColor whiteColor];
    testLabel.tag = 1001;
    [item addSubview:testLabel];
}

testLabel.text = [NSString stringWithFormat:@&quot;%ld&quot;,index];

return item;  
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>// </p>
<ul>
<li>(NSUInteger)numberOfItemsInTangramView:(TangramView <em>)view forLayout:(UIView<TangramLayoutProtocol> </em>)layout;<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
</li>
</ul>
<p>// fixModel要实现TangramItemModelProtocol协议</p>
<ul>
<li>(NSObject<TangramItemModelProtocol> <em>)itemModelInTangramView:(TangramView </em>)view forLayout:(UIView<TangramLayoutProtocol> <em>)layout atIndex:(NSUInteger)index{<br>  DemoFixModel </em>fixModel = [[DemoFixModel alloc] init];<br>  return fixModel;<br>}<br>``` –&gt;</li>
</ul>
-->]]></content>
    
    <summary type="html">
    
      &lt;!-- EventBus:事件总线,提供组件/布局/tangramView之间的通信渠道
Helper: 提供数据Model到ViewModel, ViewModel到View之间的转换
Core: 提供复用回收机制
Layout: 布局/组件摆放 --&gt;
&lt;p&gt;Tangram
    
    </summary>
    
    
      <category term="ios" scheme="https://neareven.github.io/tags/ios/"/>
    
      <category term="tangram" scheme="https://neareven.github.io/tags/tangram/"/>
    
  </entry>
  
  <entry>
    <title>html--&gt;CSS</title>
    <link href="https://neareven.github.io/2017/06/21/04-html/"/>
    <id>https://neareven.github.io/2017/06/21/04-html/</id>
    <published>2017-06-21T11:00:00.000Z</published>
    <updated>2017-06-30T03:10:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="一-简介"><a href="#一-简介" class="headerlink" title="一 简介"></a>一 简介</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 限定body样式 p &#123;&#125;, head &#123;&#125;, h1 &#123;&#125;, </div><div class="line">body &#123;</div><div class="line">	background-color: #ffffff;</div><div class="line">	margin-left: 20%;</div><div class="line">	margin-right: 20%;</div><div class="line">	border:2px dotted black; // 宽为2px的圆点黑色边框</div><div class="line">	padding: 10px ;   (10px 10px 10px 10px,内边距)</div><div class="line">	font-family: sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><link rel="stylesheet" type="text/css" href="lounge.css"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">rel 指定了html文件与所链接的文件间的关系,这里链接到的是样式表,所以使用stylesheet </div><div class="line">``</div><div class="line"></div><div class="line">1. 	``li a&#123;&#125;`` : 右边的标签包含在左边的标签里</div><div class="line">2.	`` .用来选择class属性``, ``#用来选择id属性``,id 具有唯一性, class可以多个标签用同一个属性</div><div class="line">3.	``li a:hover:not(.active) &#123;&#125;`` : 当鼠标停在所有li标签里的a标签,但是a的class属性以不等于active的时候执行&#123;&#125;</div><div class="line"></div><div class="line">4. 类: </div><div class="line">```css</div><div class="line">	&lt;p class=&quot;greenTea&quot;&gt;  ... &lt;/p&gt;</div><div class="line"></div><div class="line">	p.greenTea &#123;</div><div class="line">		color: green;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	// 设置greenTea中的所有元素</div><div class="line">	.greenTea &#123;&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li><p>一个元素加入多个类: </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;p class = "greenTea blueBerry raspberry"&gt; ..&lt;/p&gt;</div><div class="line">如果多个类中定义了同样的属性,如何确定最终选用哪个类的属性?</div><div class="line">如果属性相同,后面列出的规则会胜出</div></pre></td></tr></table></figure>
</li>
<li><p>属性</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">width: 设置内容区的宽度,不包括内边距,边框,外边距</div><div class="line">font-weight: 文本粗细--&gt;bold/normal</div><div class="line">left: 指定元素左边所在位置</div><div class="line">line-height: 设置文本元素中的行间距</div><div class="line">top: 元素顶部的位置</div><div class="line">text-align: 文本对齐[对块中的所有内联元素都设置对齐,如果直接在内联元素中使用(&lt;img&gt;)中,则无效]</div><div class="line">letter-spacing: 在字母间设置间距. [l i k e]</div><div class="line">font-style: 设置斜体文本--&gt;no italic/ italic</div><div class="line">list-style: 设置列表中列表项的外观</div><div class="line">border-style: 边框:实线/虚线/破折线--&gt;solid/dotted/dashed</div><div class="line">border-width: thin/medium/thick</div><div class="line">border-top-width:指定某一边边框</div><div class="line">border-top-left-radius:设定角度</div><div class="line">padding: 内边距[上右下左]</div><div class="line">background-image: 背景图片--&gt;url("images/cocktail.gif") repeat-x;</div><div class="line">text-decoration: 上划线/下划线/删除线--&gt;underline/overline/line-through</div><div class="line">background-position: top left right center bottom</div><div class="line">background-repeat: repeat/repeat-x(水平方向上重复)/repeat-y/inherit(按父元素的设置来处理)/no-repeat</div></pre></td></tr></table></figure>
</li>
<li><p>定义自己的字体</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@font-face &#123;</div><div class="line">	font-family:"myfont",</div><div class="line">	src: url(http://...woff),</div><div class="line">		 url(http://...tff);</div><div class="line">&#125;</div><div class="line"></div><div class="line">h1 &#123;</div><div class="line">	font-family: "myfont",sans-serif; /*  如果没有找到myfont字体,则调用sans-serif*/</div><div class="line">&#125;</div><div class="line"></div><div class="line">// @font-face为内置css规则,同样的还有</div><div class="line">@import: css中导入其他的css文件[与html中的&lt;link&gt;类似]</div><div class="line">@media: 创建特定的css, 如印刷页/桌面屏幕/手机</div></pre></td></tr></table></figure>
</li>
<li><p>设置字体大小: 相对于父元素的大小[body默认像素为16px,</p><h4>与body相同]<p></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">150%,1<span class="selector-class">.5em</span></div><div class="line">子元素是父元素的1<span class="selector-class">.5</span>倍</div></pre></td></tr></table></figure>
</h4></li>
<li><p>装饰叠加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 1. 同时有上划线和下划线</div><div class="line">em &#123;</div><div class="line">	text-decoration: underline overline;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 2. 只会有下划线</div><div class="line">em &#123;</div><div class="line">	text-decoration: underline;</div><div class="line">&#125;</div><div class="line">em &#123;</div><div class="line">	text-decoration: overline;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>&lt;del&gt;</code>: 待删除</p>
</li>
<li><p><code>&lt;ins&gt;</code>:   待加入</p>
</li>
<li><p>尾部:<br><img src="https://ooo.0o0.ooo/2017/06/28/59531fb731923.png" alt="尾部示例"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">small</span>&gt;</span></div><div class="line">       &amp;copy; 2012, Head First Lounge<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">       All trademarks and registered trademarks appearing on this site are </div><div class="line">       the property of their respective owners.</div><div class="line">     <span class="tag">&lt;/<span class="name">small</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"cd"</span>&gt;</span>Buddha Bar<span class="tag">&lt;/<span class="name">span</span>&gt;</span>, <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"artist"</span>&gt;</span>Claude Challe<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>符号代替</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&amp; : &amp;amp;</div><div class="line">© : &amp;copy;</div></pre></td></tr></table></figure>
</li>
<li><p>链接颜色</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 默认颜色</div><div class="line">a: link &#123;</div><div class="line">	color: black;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 访问过后的颜色</div><div class="line">a:visited &#123;</div><div class="line">	color: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 鼠标悬停上时颜色</div><div class="line">a:hover &#123;</div><div class="line">	color: green;</div><div class="line">&#125;</div><div class="line"></div><div class="line">focus: tab焦点</div><div class="line">active:激活</div></pre></td></tr></table></figure>
</li>
<li><p>id &amp; class:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">id通常用来指定唯一元素,如footer/header </div><div class="line">id用#来引用</div><div class="line">class用.来引用</div></pre></td></tr></table></figure>
</li>
<li><p>指定样式表的设备类型</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"cc.css rel="</span><span class="attr">stylesheet</span>" <span class="attr">media</span> =<span class="string">"screen and (max-device-width:480px)"</span>&gt;</span></div><div class="line">: 有屏幕而且屏幕宽度不超过480px</div><div class="line">media = "print": 打印机</div><div class="line"></div><div class="line">in-device-width/ [orientation:landscape/portrait]</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@media screen and (min-device-width: 480px)&#123;</div><div class="line">	#guraantee&#123;</div><div class="line">		margin-right: 250px;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@media screen and (max-device-width:479px) and (orientation:portrait)&#123;</div><div class="line">	#guraantee &#123;</div><div class="line">		margin-right: 30px;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@media print&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>div 与 span</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">div 针对块元素, span针对内联元素</div></pre></td></tr></table></figure>
</li>
<li><p>伪类: html中没有相关代码,由浏览器来进行指定: 如 a:link ,a:visited</p>
</li>
<li><p>布局方式: 块元素自上而下, 内联元素自左而右</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 块元素计算空间会将重叠的外边距中最大的外边距来计算</div><div class="line">2. 而内联元素则会取二者之和,内联元素的外边距通常用于img</div><div class="line">3. 如果一个块元素嵌套在另一个块元素中,且都有外边距,如果外边的元素有边框,则不会折叠,否则,会折叠</div></pre></td></tr></table></figure>
</li>
<li><p>设置布局方式:以浮动在右边为例</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. 要让a块元素在b块元素后浮动,就要将a块元素的代码移到b块元素后</div><div class="line">2. 设置a的width,float</div><div class="line">3. 设置主内容栏的右边距= a的width+ a的内外边距*2</div><div class="line">注意: 通常浮动边栏,主显示内容随浏览器的宽度进行变动</div></pre></td></tr></table></figure>
</li>
<li><p>浮动元素的外边距不会折叠,因为浮动元素的外边距不会碰到正常流中的外边距</p>
</li>
<li><p>clear: 会使块元素下移,直到两边没有浮动元素挨着</p>
</li>
<li><p><strong>float</strong>: 块元素的浮动[left right]</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">左松右紧</div><div class="line">右紧左松</div><div class="line">两种设计: 对边栏内容设置float right</div><div class="line">		 对主内容设置float left</div></pre></td></tr></table></figure>
</li>
<li><p>流体布局 vs 冻结布局</p>
</li>
<li><p><code>position</code>属性</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static: 默认状态</div><div class="line">absolute: 相对于当前页面的位置</div><div class="line">fixed: 相对于浏览器窗口的位置</div><div class="line">relative:元素正常地流入页面,只是在显示之前要进行偏移</div></pre></td></tr></table></figure>
<ol>
<li>创建table视图时,borderspacing与外边距不会折叠</li>
<li><p>vertical-align: 垂直对齐: top/bottom/middle</p>
</li>
<li><p>插入视频</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">controls : 是否显示控制器</div><div class="line">autoplay: 是否自动播放</div><div class="line"> <span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">width</span>=<span class="string">"512"</span> <span class="attr">height</span>=<span class="string">"288"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"video/tweetsip.webom"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"video/tweetsip.mp4"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"video/tweetsip.ogv"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>dslfasaflakdaldf<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h2&gt;&lt;h3 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title=&quot;一 简介&quot;&gt;&lt;/a&gt;一 简
    
    </summary>
    
    
      <category term="html" scheme="https://neareven.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>html【元素一箩筐】</title>
    <link href="https://neareven.github.io/2017/06/21/01-html/"/>
    <id>https://neareven.github.io/2017/06/21/01-html/</id>
    <published>2017-06-21T11:00:00.000Z</published>
    <updated>2017-07-05T11:22:58.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p><code>&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/22/594ba56541612.png&quot; alt=&quot;padding&quot; width=&quot;48&quot; height:&quot;100&quot;&gt;</code>:图片插入[alt 为图片描述]</p>
</li>
<li><p><code>&lt;a href=&quot;http://wickedlysmart.com/buzz/#Coffee&quot; title=&quot;所要链接的页面的文本的描述&quot;&gt;back to longue&lt;/a&gt;</code>:插入链接[#Coffee 直接跳转到对应网页的Coffee部分]</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// id表示可以直接链接到该元素</div><div class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"Coffee"</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">id</span>=<span class="string">"top"</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">// 链接到同一个页面上的top目标</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#top"</span>&gt;</span>Back to top<span class="tag">&lt;/<span class="name">a</span>&gt;</span>,</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// _blank :浏览器会显示新的窗口来显示页面[未命名,可以用任意不含空格的字段来命名]</div><div class="line">// </div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li><p><code>&lt;q&gt; &lt;/q&gt;</code>: 内联引用</p>
</li>
<li><p><code>&lt;blockquote&gt; &lt;/blockquote&gt;</code>: 长(块)引用</p>
</li>
<li><p><code>&lt;br&gt;</code>: 结尾br用于换行</p>
</li>
<li><p><code>ul:(unordered list)</code>: 无序列表</p>
</li>
<li><p><code>ol:(ordered list)</code>: 有序列表&lt;会自动创建序号&gt;</p>
</li>
<li><p><code>li:(list item)</code>: 每个li元素都会成为一个列表项</p>
</li>
<li><p><code>&lt;dt&gt;&lt;dd&gt;</code>: 缩进式列表<br><img src="https://ooo.0o0.ooo/2017/06/22/594ba589b90dd.png" alt="列表样式"></p>
</li>
<li><p>字符缩写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; : &quot;&amp;gt&quot; </div><div class="line">&lt; : &quot;&amp;lt&quot;</div><div class="line">the &amp;lt html &amp;gt  ==&gt; the &lt; html &gt;</div></pre></td></tr></table></figure>
</li>
<li><p><code>a</code>: 链接</p>
</li>
<li><p><code>&lt;em&gt;&lt;em&gt;</code>: <em>强调不同文本<em> </em></em></p>
</li>
<li><p><code>strong</code>: <strong>特别强调</strong></p>
</li>
<li><p><code>pre</code>: <pre>用来指定文本的格式<pre>让浏览器按我们输入的方式原样显示文本 </pre></pre></p>
</li>
<li><p><code>time</code> :  <time>2017.06.22用来显示日期<time></time></time></p>
</li>
<li><p>点击图片跳转到新的链接</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'html/downtown.html'</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"downtown.jpg"</span> <span class="attr">alt</span>=<span class="string">"an ipod in downtown"</span> <span class="attr">title</span>=<span class="string">"downtown"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>meta</code>: 告诉浏览器相关页面信息 <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;https://ooo.0o0.ooo/2017/06/22/594ba56541612.png&amp;quot; alt=&amp;quot;padding&amp;quot; width=&amp;quot;48&amp;quot; heig
    
    </summary>
    
    
      <category term="html" scheme="https://neareven.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>茶者,南方嘉木也</title>
    <link href="https://neareven.github.io/2017/06/20/05-book/"/>
    <id>https://neareven.github.io/2017/06/20/05-book/</id>
    <published>2017-06-20T04:00:00.000Z</published>
    <updated>2017-06-28T01:46:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>南方有嘉木，不夜之侯，筑草为城，茶人三部曲。喜欢这样的书，写一个时代，几辈人的故事。家事国事儿女情长，抑或疯狂，抑或哀怨。始自太平天国，终于1997，近百年历史，满目疮痍。赵寄客，一代侠士，杭天醉，枉自风流，于国家，自有肝胆。但这些，也不过只是时代的一个注脚罢了。倒不如那些微小的事物，反而更充满血与肉。忘忧茶庄，曼生壶，天目盏，狮峰，普洱，合上书，口舌生津。”水里火里去得，热里冷里经得，没有这番功夫，哪里来的好茶”。<br>满纸荒唐言，一把辛酸泪，都云作者痴，谁解其中味。经十载，书方成。且抛去所有的故事，仅茶一字，便不枉下得此番功夫了。何况于饮茶之时，可以细细品茶之外的故事。杭家5代，也只有这两种性格，性子平缓，心灵细腻，而另一种，激情而狂热。两者泾渭分明，始终未曾现于一人身。吴家茶清伯，三代杭嘉和，至忘忧止。嘉平，寄草，布朗，得放，迎霜，这另一种性格，竟也颤颤巍巍熬过了那段岁月。<br>杭州，最繁华的地方，也是温柔女儿乡，大宋拱手相让之都。这样的地方，本不应有铮铮铁骨，只适合端上一杯茶，坐于西湖边，论家长里短。却仍挡不住这血性之人。<br>南方有嘉木，是为茶也。内清明，外方直，吾与尔皆藏，曼生壶者。斯壶当饮斯茶，终满口茶香。<br>小驻为佳，且吃了赵州茶去，日归可缓，试同歌陌上花来。时候不早了，且梦中吃茶去吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;南方有嘉木，不夜之侯，筑草为城，茶人三部曲。喜欢这样的书，写一个时代，几辈人的故事。家事国事儿女情长，抑或疯狂，抑或哀怨。始自太平天国，终于1997，近百年历史，满目疮痍。赵寄客，一代侠士，杭天醉，枉自风流，于国家，自有肝胆。但这些，也不过只是时代的一个注脚罢了。倒不如那些
    
    </summary>
    
    
      <category term="拆书记" scheme="https://neareven.github.io/tags/%E6%8B%86%E4%B9%A6%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>春雪</title>
    <link href="https://neareven.github.io/2017/02/03/13-book/"/>
    <id>https://neareven.github.io/2017/02/03/13-book/</id>
    <published>2017-02-03T13:10:00.000Z</published>
    <updated>2017-07-14T04:53:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>三岛由纪夫长篇小说的第一部，之后是奔马。<br>三岛的书总是透着浓浓的悲凉气，金阁寺或春雪皆是。还记着大学时学世界文化概论，老师讲到日本文学有物哀之美，凋谢的樱花随风飘动。<br>一个少不更事，不懂爱为何物，生来便是为了制造伤害的人，最终于二十二岁孤寂的死去，他最后看到的是什么场景呢？飘着大雪的早晨，清显与聪子坐着马车踏雪的情景吧，唯有此，才能笑着离去吧。<br>这是一个绝情无情的人，与太宰治的人间失格少年一般，孤独的来到此地，未曾敞开心扉，父母或者知交。或许应该称为自私的人吧，也不对，加入自己的道德批判了。是一个禁锢在自己牢笼里的人。成熟不是一霎那的转变，拨开云雾，总是在经历诸多苦痛之后的慢慢自省。在清显终于找到自己的所爱时，或者才真正长大吧。<br>因少时的执拗酿了这样的悲剧。<br>在获取极乐之后，还剩什么？要去找寻什么？无论绚烂还是苦痛都不是永恒的，想让自己沉醉在任一种状态之中不复醒？唯有知识的不断获取才是永恒的吧，获取新知识来填充成就感，真实的成就感，不再是虚妄的。荷尔蒙的释放，确实会乱了理智。<br>湖北省博物馆的小小讲解员，不论他是死记硬背这么多知识还是其它，但古物本就是繁多的，能从编钟看到青铜器制造工艺，音乐的审美和艺术水准，当时的生活习惯与风俗，真的是浩如烟海，再学20年也不敢称懂了，所以很佩服那些随便聊起啥都能侃侃而谈的人，肚子里有墨水吧。<br>历史真的很有趣，一叶子亦可知秋</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;三岛由纪夫长篇小说的第一部，之后是奔马。&lt;br&gt;三岛的书总是透着浓浓的悲凉气，金阁寺或春雪皆是。还记着大学时学世界文化概论，老师讲到日本文学有物哀之美，凋谢的樱花随风飘动。&lt;br&gt;一个少不更事，不懂爱为何物，生来便是为了制造伤害的人，最终于二十二岁孤寂的死去，他最后看到的是
    
    </summary>
    
    
      <category term="拆书记" scheme="https://neareven.github.io/tags/%E6%8B%86%E4%B9%A6%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>疯言疯语</title>
    <link href="https://neareven.github.io/2017/01/13/23-thing/"/>
    <id>https://neareven.github.io/2017/01/13/23-thing/</id>
    <published>2017-01-13T06:43:00.000Z</published>
    <updated>2017-07-20T04:59:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>秋叶早已落尽，她坐在院子里，双眼布满了血丝，手兀自不停地剥着玉米，看到他背着书包从县城的中学回来，再也忍不住眼中的泪水，连一声招呼也未打，便跑回自己的房间将门紧紧地关起。</p>
<p>他站地在院子中，落日的余晖早已散尽，发黄而暗淡的灯光却格外刺眼，他久久地望着这灯光而失神了。</p>
<p>‘小弟快起来，我煮好了面’。门外传来一阵敲门声。他还尚在睡梦中，寒冷的冬季，冷气透过门缝钻了进来。“你不起床，我吃完不等你了”，她在门外说道。北方的冬天，黑夜格外漫长，他们要在6点半之前赶到学校。</p>
<p>6岁那年的夏天，连续下了7天大雨。雨停的那天，她拿着家里的小网兜，对弟弟说，我们去捉癞蛤蟆吧，可以拿到村头的药店卖钱。当时的他还很贪玩，7天的大雨早已闷坏了他，便豪不犹豫地答道，好啊好啊。<br>最后捉到了多少，并卖了多少钱，早已记不真切了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;秋叶早已落尽，她坐在院子里，双眼布满了血丝，手兀自不停地剥着玉米，看到他背着书包从县城的中学回来，再也忍不住眼中的泪水，连一声招呼也未打，便跑回自己的房间将门紧紧地关起。&lt;/p&gt;
&lt;p&gt;他站地在院子中，落日的余晖早已散尽，发黄而暗淡的灯光却格外刺眼，他久久地望着这灯光而失神
    
    </summary>
    
    
      <category term="碎碎念" scheme="https://neareven.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>黄雀记</title>
    <link href="https://neareven.github.io/2016/12/09/14-book/"/>
    <id>https://neareven.github.io/2016/12/09/14-book/</id>
    <published>2016-12-09T11:20:00.000Z</published>
    <updated>2017-07-14T04:55:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>螳螂捕蝉黄雀在后，孰是蝉，谁又是黄雀。并没胜利者，所有人都在不幸中。</p>
<p>保润的春天，柳生的秋天，白小姐的夏天。春天本是希望之春，三人都在少年天真烂漫时。只是有些许的荒诞不经，以保润爷爷的找魂开始，从那手电筒装着的两根肋骨开始。<br>并没有看到太丑恶的场景，人们在贫苦的环境中生活，直到水塔事件。现在还不太相信，为何剧情会朝此发展。前面并没有铺垫，保润，仙女，柳生，柳生的姐姐柳娟。唯一能想到的，也只是青春荷尔蒙的冲动。<br>但看到柳娟，保润在树林里的体验，想起了自己的少年岁月。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;螳螂捕蝉黄雀在后，孰是蝉，谁又是黄雀。并没胜利者，所有人都在不幸中。&lt;/p&gt;
&lt;p&gt;保润的春天，柳生的秋天，白小姐的夏天。春天本是希望之春，三人都在少年天真烂漫时。只是有些许的荒诞不经，以保润爷爷的找魂开始，从那手电筒装着的两根肋骨开始。&lt;br&gt;并没有看到太丑恶的场景，人们
    
    </summary>
    
    
      <category term="拆书记" scheme="https://neareven.github.io/tags/%E6%8B%86%E4%B9%A6%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>情人</title>
    <link href="https://neareven.github.io/2016/12/01/15-book/"/>
    <id>https://neareven.github.io/2016/12/01/15-book/</id>
    <published>2016-12-01T14:00:00.000Z</published>
    <updated>2017-07-14T04:55:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>书名&lt;情人&gt;,必涉及爱情.<br>第一次听说这本书,源自-段话.”那时候,你还很年轻,人人都说你美.现在,我是特意来告诉你,对我来说,我觉得现在你比年轻的时候更美.与你那时的面貌相比,我更爱你现在备受摧残的面容.”<br>本以为这是一本关于爱情的小说,在日暮时分相遇,两人均已满鬓白发,坐在公园的长椅上,回忆年少时的岁月.应是一个很温馨的画面,但当我真的翻开这本小书时,发现完全是另外一个场景.<br>很多人说这是一本关于爱情的书,但在这里我并没有找到爱情的形式.<br>我只看到一个悲惨命运的少女,在一个扭曲病态的家庭中颤巍巍的成长.也许是贫穷,造成了这样的业果.<br>很多事只是感觉到一个模糊的形状,但细节却看不清了.4人的家庭,不如说是二人.母亲宠爱着的永远都是大哥,这也是她自认为唯一的孩子.至于少女与二哥,他们只是恰好存在于这个家庭的装饰品.<br>很庆幸,我生活在自己的家庭里,父母健健康康.少时的我尽管淘气调皮,但父母,姐姐们或多或少都能容忍.也庆幸,自己顺顺荡荡的走到了今天,无大灾大难,亦无大病大痛.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;书名&amp;lt;情人&amp;gt;,必涉及爱情.&lt;br&gt;第一次听说这本书,源自-段话.”那时候,你还很年轻,人人都说你美.现在,我是特意来告诉你,对我来说,我觉得现在你比年轻的时候更美.与你那时的面貌相比,我更爱你现在备受摧残的面容.”&lt;br&gt;本以为这是一本关于爱情的小说,在日暮时分
    
    </summary>
    
    
      <category term="拆书记" scheme="https://neareven.github.io/tags/%E6%8B%86%E4%B9%A6%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>不持有的生活</title>
    <link href="https://neareven.github.io/2016/10/18/16-book/"/>
    <id>https://neareven.github.io/2016/10/18/16-book/</id>
    <published>2016-10-18T14:00:00.000Z</published>
    <updated>2017-07-14T04:58:13.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>超出自己的管理能力的物品,不持有</li>
<li>不钟爱的物品,不持有</li>
<li>无法回收利用或转送给他人的物品,不持有</li>
<li>不适合自己.与自己的生活方式不相符的物品,不持有<br>不持有的真正含义,就是最大限度地利用物品的价值,使之物尽其用.<br>不拥有不必要的东西<br>执念:不持有的生活与标准的生活/节俭的生活</li>
</ol>
<p>不持有的生活,并不是反对人们持有东西,不让人们持有东西的观点本身也不是不现实的.不持有的生活也不是让人们放弃使用便捷的东西,只是让人们把”的确很方便,但对我来说没用”的东西, 逐一拿来重新审视,争取能够做到”没用的东西不处理掉/用不到的东西再好也不买”.如此一来,生活将变得简单而纯粹,即使有些事情需要花点工夫,也能够以一种积极乐观的心态去面对.</p>
<p>让生活慢一点<br>从前的生活那么慢,车马都慢,一辈子只够爱一个人<br>不持有的生活,不是要限制人的欲望/枯燥无味地生活.而是要以饱满的热情快乐地度过每一天,心情愉快地与这些少量的东西进行交流<br><img src="http://orvnx1k8y.bkt.clouddn.com/2017-07-14-C9ED6B76-D629-4D28-B842-0188062A283B.png" alt="C9ED6B76-D629-4D28-B842-0188062A283B"></p>
<p><img src="http://orvnx1k8y.bkt.clouddn.com/2017-07-14-ED3CC416-2FD2-4E06-A406-8A3602977266.png" alt="ED3CC416-2FD2-4E06-A406-8A3602977266"></p>
<p>现在的一瞬确实存在,比你想象中的之后的某一时间更加现实.如果我们能将这一瞬,用我们双眼和双手来体味,从中找寻到无限乐趣.这一瞬就是我们最为充裕的时间.</p>
<p>很轻松的一本小书。看书，可能并不是让自己读了后便如打凤凰血般激情满满，立刻着手去做。其实，很多书，看看便可，他并不是你一步一行所必要遵守的教科书，你只要能从中找到自己所喜欢的地方，这本书对你来说意义便达到了。不持有的生活，我看来，是简单生活，放慢脚步。当然，看作者的一个个生活小妙招，也会想到俺那乱乱的小窝，但也并不想回去整理，俺太懒了。保持日常的干净整洁已很难得，再让俺过更精致的生活，尚办不到。<br>其实，也没啥，努力过好你自己的生活。很是赞同作者所言，简单生活。其实这样的生活，很令人心动，不信且去阿勒泰走走，或去缘缘堂看看。<br>木心写的真好，从前的生活那么慢，车，马都慢，一生只够爱一个人。<br>那么多纯粹而又干净的生活或许很难寻得，但越是这样，我们不应该是更应该去慢慢的走，慢慢的行，慢慢的生活吗？</p>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;超出自己的管理能力的物品,不持有&lt;/li&gt;
&lt;li&gt;不钟爱的物品,不持有&lt;/li&gt;
&lt;li&gt;无法回收利用或转送给他人的物品,不持有&lt;/li&gt;
&lt;li&gt;不适合自己.与自己的生活方式不相符的物品,不持有&lt;br&gt;不持有的真正含义,就是最大限度地利用物品的价值,使之物尽
    
    </summary>
    
    
      <category term="拆书记" scheme="https://neareven.github.io/tags/%E6%8B%86%E4%B9%A6%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>2015--在路上</title>
    <link href="https://neareven.github.io/2015/12/28/22-thing/"/>
    <id>https://neareven.github.io/2015/12/28/22-thing/</id>
    <published>2015-12-28T14:03:00.000Z</published>
    <updated>2017-07-20T04:57:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>年关将至，回首匆匆岁月，去年今日的情景还历历在目。</p>
<p>2015，一个没有计划和许诺的一年，有过曲折，也有收获，一步一个脚印的走到了结尾。每年伊始，或多或少都会对新的一年充满遐想，跃跃欲试，打算用一年的时间，做一个全新而又充满斗志的自己。</p>
<p>开始的四个月，并不太顺利，有失落，也曾想过放弃，困恼种种，但最终走到了五月。</p>
<p>五月芒种，收获的季节，人们在辛劳数月后，满怀欣喜的进入了丰收的时刻，而我也在这仲满希望的五月，找到了新的工作，踏上全新的征程。事情总在冥冥之中按照它既定的路线出发，尽管我们还未找到他行走的轨迹，但最终走向了同一个终点。</p>
<p>2015，遇到了一些人，读了一些书，骑行了一段路。</p>
<p>遇到了一些人：</p>
<p>David&amp;Marco,亦师亦友，自己的新同事，自己IOS开发的领路人，感谢幸运的遇到你们而不是匆匆擦肩而过。<br>David,2015,也许是你另外一个附加的本命年，事事不顺，各种打击纷至沓来，但最终挺过了这一年。希望在下一年，万事安好，无论何时何地，也要告诉自己，要独立，要坚强，要勇敢，要经得住挫折，要活得漂亮，要永远善良。</p>
<p>总说吃一堑长一智，但很多事并不一定要经历后才有所得。感谢Marco，优秀的代码书写规范，清晰明了的代码逻辑，以及给自己讲过的的代码思想，获益良多。佩服你通宵到凌晨3点只为弄明白一个技术问题，也佩服你博客长更不断。。。</p>
<p>读了一些书：</p>
<p>在困窘的时刻，酷爱村上春树的小说，在孤独的城市中坚强的生活。闲暇的时刻，徜徉在李娟的阿勒泰，怀想丰子恺的孩童时代和笔下趣闻，伴着玛雅在岛上书店慢慢长大，也曾痴醉于消失的地平线上那一段传说。懈怠的时刻，坐着海斯勒的车顺着长城走到河北最终落脚在浙江小城，扒着火车伴着耍猴人们离开河南闯荡在大江南北。冲动的时刻，也曾想在金阁寺燃起一把大火，在生命册上留下一个脚注，为异乡人辩上一场。</p>
<p>骑行了一段路：</p>
<p>怀念大学时光，怀念那些蹬着租来的自行车一起远行的岁月。而今，又重拾当年的冲动与想象。</p>
<p>躺在洒满阳光的草地上，望着碧蓝如洗的天空，感谢现在所拥有的一切。我爱静静地码代码的生活，也爱落日余晖下疯狂骑行在路上的生活。何为自我？不是你拥有了什么，而是在你失去所有后所能剩下的。当我一贫如洗时，我又拥有什么呢？有音乐可听，有清风可吹，有美景可赏，有杂书可读。也许，这才是我所想要的。或许少了几分斗志，但我感激现在的生活，感谢遇到的这些人，那些事。</p>
<p>“任何认识任何行动都无法代替扬帆起航的喜悦”，借用三岛由纪夫的一句话。2016，下一个起航点，我是哈罗德，在无计划的路上，只管前行</p>
<p><img src="http://orvnx1k8y.bkt.clouddn.com/2017-07-20-15005266194378.jpg" alt="苏州湖畔"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年关将至，回首匆匆岁月，去年今日的情景还历历在目。&lt;/p&gt;
&lt;p&gt;2015，一个没有计划和许诺的一年，有过曲折，也有收获，一步一个脚印的走到了结尾。每年伊始，或多或少都会对新的一年充满遐想，跃跃欲试，打算用一年的时间，做一个全新而又充满斗志的自己。&lt;/p&gt;
&lt;p&gt;开始的四个
    
    </summary>
    
    
      <category term="碎碎念" scheme="https://neareven.github.io/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
</feed>
